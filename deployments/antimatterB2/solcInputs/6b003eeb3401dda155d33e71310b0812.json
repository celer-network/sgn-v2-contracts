{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/governed-owner/GovernedOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./proxies/CommonOwnerProxy.sol\";\nimport \"./proxies/BridgeOwnerProxy.sol\";\nimport \"./proxies/MessageOwnerProxy.sol\";\nimport \"./proxies/SgnOwnerProxy.sol\";\nimport \"./proxies/UpgradeableOwnerProxy.sol\";\n\ncontract GovernedOwnerProxy is\n    CommonOwnerProxy,\n    BridgeOwnerProxy,\n    MessageOwnerProxy,\n    SgnOwnerProxy,\n    UpgradeableOwnerProxy\n{\n    constructor(address _initializer) OwnerProxyBase(_initializer) {}\n}\n"
    },
    "contracts/governed-owner/interfaces/IBridgeOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IBridgeOwner {\n    // for bridges\n\n    function resetSigners(address[] calldata _signers, uint256[] calldata _powers) external;\n\n    function notifyResetSigners() external;\n\n    function increaseNoticePeriod(uint256 _period) external;\n\n    function setWrap(address _token) external;\n\n    function setSupply(address _token, uint256 _supply) external;\n\n    function increaseSupply(address _token, uint256 _delta) external;\n\n    function decreaseSupply(address _token, uint256 _delta) external;\n\n    function addGovernor(address _account) external;\n\n    function removeGovernor(address _account) external;\n\n    // for bridge tokens\n\n    function updateBridge(address _bridge) external;\n\n    function updateBridgeSupplyCap(address _bridge, uint256 _cap) external;\n\n    function setBridgeTokenSwapCap(address _bridgeToken, uint256 _swapCap) external;\n}\n"
    },
    "contracts/governed-owner/interfaces/ICommonOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ICommonOwner {\n    function transferOwnership(address _newOwner) external;\n\n    function addPauser(address _account) external;\n\n    function removePauser(address _account) external;\n}\n"
    },
    "contracts/governed-owner/interfaces/IMessageOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IMessageOwner {\n    function setFeePerByte(uint256 _fee) external;\n\n    function setFeeBase(uint256 _fee) external;\n\n    function setLiquidityBridge(address _addr) external;\n\n    function setPegBridge(address _addr) external;\n\n    function setPegVault(address _addr) external;\n\n    function setPegBridgeV2(address _addr) external;\n\n    function setPegVaultV2(address _addr) external;\n\n    function setPreExecuteMessageGasUsage(uint256 _usage) external;\n}\n"
    },
    "contracts/governed-owner/interfaces/ISgnOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISgnOwner {\n    function setWhitelistEnabled(bool _whitelistEnabled) external;\n\n    function addWhitelisted(address _account) external;\n\n    function removeWhitelisted(address _account) external;\n\n    function setGovContract(address _addr) external;\n\n    function setRewardContract(address _addr) external;\n\n    function setMaxSlashFactor(uint256 _maxSlashFactor) external;\n}\n"
    },
    "contracts/governed-owner/interfaces/IUpgradeableOwner.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IUpgradeableOwner {\n    function changeProxyAdmin(address _proxy, address _newAdmin) external;\n\n    function upgrade(address _proxy, address _implementation) external;\n\n    function upgradeAndCall(\n        address _proxy,\n        address _implementation,\n        bytes calldata _data\n    ) external;\n\n    function upgradeTo(address _implementation) external;\n\n    function upgradeToAndCall(address _implementation, bytes calldata _data) external;\n}\n"
    },
    "contracts/governed-owner/proxies/BridgeOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/IBridgeOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract BridgeOwnerProxy is OwnerProxyBase {\n    // for bridges\n    event ResetSignersProposalCreated(uint256 proposalId, address target, address[] signers, uint256[] powers);\n    event NotifyResetSignersProposalCreated(uint256 proposalId, address target);\n    event IncreaseNoticePeriodProposalCreated(uint256 proposalId, address target, uint256 period);\n    event SetNativeWrapProposalCreated(uint256 proposalId, address target, address token);\n    event UpdateSupplyProposalCreated(\n        uint256 proposalId,\n        address target,\n        dt.Action action,\n        address token,\n        uint256 supply\n    );\n    event UpdateGovernorProposalCreated(uint256 proposalId, address target, dt.Action action, address account);\n\n    // for bridge tokens\n    event UpdateBridgeProposalCreated(uint256 proposalId, address target, address bridgeAddr);\n    event UpdateBridgeSupplyCapProposalCreated(uint256 proposalId, address target, address bridge, uint256 cap);\n    event SetBridgeTokenSwapCapProposalCreated(uint256 proposalId, address target, address bridgeToken, uint256 cap);\n\n    function proposeResetSigners(\n        address _target,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external {\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.resetSigners.selector, _signers, _powers);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit ResetSignersProposalCreated(proposalId, _target, _signers, _powers);\n    }\n\n    function proposeNotifyResetSigners(address _target) external {\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.notifyResetSigners.selector);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\n        emit NotifyResetSignersProposalCreated(proposalId, _target);\n    }\n\n    function proposeIncreaseNoticePeriod(address _target, uint256 _period) external {\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.increaseNoticePeriod.selector, _period);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit IncreaseNoticePeriodProposalCreated(proposalId, _target, _period);\n    }\n\n    function proposeSetNativeWrap(address _target, address _token) external {\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.setWrap.selector, _token);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetNativeWrapProposalCreated(proposalId, _target, _token);\n    }\n\n    function proposeUpdateSupply(\n        address _target,\n        dt.Action _action,\n        address _token,\n        uint256 _supply\n    ) external {\n        bytes4 selector;\n        if (_action == dt.Action.Set) {\n            selector = IBridgeOwner.setSupply.selector;\n        } else if (_action == dt.Action.Add) {\n            selector = IBridgeOwner.increaseSupply.selector;\n        } else if (_action == dt.Action.Remove) {\n            selector = IBridgeOwner.decreaseSupply.selector;\n        } else {\n            revert(\"invalid action\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _token, _supply);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\n        emit UpdateSupplyProposalCreated(proposalId, _target, _action, _token, _supply);\n    }\n\n    function proposeUpdateGovernor(\n        address _target,\n        dt.Action _action,\n        address _account\n    ) external {\n        bytes4 selector;\n        if (_action == dt.Action.Add) {\n            selector = IBridgeOwner.addGovernor.selector;\n        } else if (_action == dt.Action.Remove) {\n            selector = IBridgeOwner.removeGovernor.selector;\n        } else {\n            revert(\"invalid action\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _account);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\n        emit UpdateGovernorProposalCreated(proposalId, _target, _action, _account);\n    }\n\n    function proposeUpdateBridgeSupplyCap(\n        address _target,\n        address _bridge,\n        uint256 _cap\n    ) external {\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.updateBridgeSupplyCap.selector, _bridge, _cap);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpdateBridgeSupplyCapProposalCreated(proposalId, _target, _bridge, _cap);\n    }\n\n    function proposeSetBridgeTokenSwapCap(\n        address _target,\n        address _bridgeToken,\n        uint256 _swapCap\n    ) external {\n        bytes memory data = abi.encodeWithSelector(IBridgeOwner.setBridgeTokenSwapCap.selector, _bridgeToken, _swapCap);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetBridgeTokenSwapCapProposalCreated(proposalId, _target, _bridgeToken, _swapCap);\n    }\n}\n"
    },
    "contracts/governed-owner/proxies/CommonOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/ICommonOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract CommonOwnerProxy is OwnerProxyBase {\n    event TransferOwnershipProposalCreated(uint256 proposalId, address target, address newOwner);\n    event UpdatePauserProposalCreated(uint256 proposalId, address target, dt.Action action, address account);\n\n    function proposeTransferOwnership(address _target, address _newOwner) external {\n        bytes memory data = abi.encodeWithSelector(ICommonOwner.transferOwnership.selector, _newOwner);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit TransferOwnershipProposalCreated(proposalId, _target, _newOwner);\n    }\n\n    function proposeUpdatePauser(\n        address _target,\n        dt.Action _action,\n        address _account\n    ) external {\n        bytes4 selector;\n        if (_action == dt.Action.Add) {\n            selector = ICommonOwner.addPauser.selector;\n        } else if (_action == dt.Action.Remove) {\n            selector = ICommonOwner.removePauser.selector;\n        } else {\n            revert(\"invalid action\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _account);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\n        emit UpdatePauserProposalCreated(proposalId, _target, _action, _account);\n    }\n}\n"
    },
    "contracts/governed-owner/proxies/MessageOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/IMessageOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract MessageOwnerProxy is OwnerProxyBase {\n    event SetMsgFeeProposalCreated(uint256 proposalId, address target, dt.MsgFeeType feeType, uint256 fee);\n    event SetBridgeAddressProposalCreated(\n        uint256 proposalId,\n        address target,\n        dt.BridgeType bridgeType,\n        address bridgeAddr\n    );\n    event SetPreExecuteMessageGasUsageProposalCreated(uint256 proposalId, address target, uint256 usage);\n\n    function proposeSetMsgFee(\n        address _target,\n        dt.MsgFeeType _feeType,\n        uint256 _fee\n    ) external {\n        bytes4 selector;\n        if (_feeType == dt.MsgFeeType.PerByte) {\n            selector = IMessageOwner.setFeePerByte.selector;\n        } else if (_feeType == dt.MsgFeeType.Base) {\n            selector = IMessageOwner.setFeeBase.selector;\n        } else {\n            revert(\"invalid fee type\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _fee);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\n        emit SetMsgFeeProposalCreated(proposalId, _target, _feeType, _fee);\n    }\n\n    function proposeSetBridgeAddress(\n        address _target,\n        dt.BridgeType _bridgeType,\n        address _bridgeAddr\n    ) external {\n        bytes4 selector;\n        if (_bridgeType == dt.BridgeType.Liquidity) {\n            selector = IMessageOwner.setLiquidityBridge.selector;\n        } else if (_bridgeType == dt.BridgeType.PegBridge) {\n            selector = IMessageOwner.setPegBridge.selector;\n        } else if (_bridgeType == dt.BridgeType.PegVault) {\n            selector = IMessageOwner.setPegVault.selector;\n        } else if (_bridgeType == dt.BridgeType.PegBridgeV2) {\n            selector = IMessageOwner.setPegBridgeV2.selector;\n        } else if (_bridgeType == dt.BridgeType.PegVaultV2) {\n            selector = IMessageOwner.setPegVaultV2.selector;\n        } else {\n            revert(\"invalid bridge type\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _bridgeAddr);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetBridgeAddressProposalCreated(proposalId, _target, _bridgeType, _bridgeAddr);\n    }\n\n    function proposeSetPreExecuteMessageGasUsage(address _target, uint256 _usage) external {\n        bytes memory data = abi.encodeWithSelector(IMessageOwner.setPreExecuteMessageGasUsage.selector, _usage);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetPreExecuteMessageGasUsageProposalCreated(proposalId, _target, _usage);\n    }\n}\n"
    },
    "contracts/governed-owner/proxies/OwnerDataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary OwnerDataTypes {\n    enum Action {\n        Set,\n        Add,\n        Remove\n    }\n\n    enum MsgFeeType {\n        PerByte,\n        Base\n    }\n\n    enum BridgeType {\n        Liquidity,\n        PegBridge,\n        PegVault,\n        PegBridgeV2,\n        PegVaultV2\n    }\n}\n"
    },
    "contracts/governed-owner/proxies/OwnerProxyBase.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../SimpleGovernance.sol\";\n\nabstract contract OwnerProxyBase {\n    SimpleGovernance public gov;\n    address private initializer;\n\n    constructor(address _initializer) {\n        initializer = _initializer;\n    }\n\n    function initGov(SimpleGovernance _gov) public {\n        require(msg.sender == initializer, \"only initializer can init\");\n        require(address(gov) == address(0), \"gov addr already set\");\n        gov = _gov;\n    }\n}\n"
    },
    "contracts/governed-owner/proxies/SgnOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/ISgnOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract SgnOwnerProxy is OwnerProxyBase {\n    event SetWhitelistEnableProposalCreated(uint256 proposalId, address target, bool enabled);\n    event UpdateWhitelistedProposalCreated(uint256 proposalId, address target, dt.Action action, address account);\n    event SetGovContractProposalCreated(uint256 proposalId, address target, address addr);\n    event SetRewardContractProposalCreated(uint256 proposalId, address target, address addr);\n    event SetMaxSlashFactorProposalCreated(uint256 proposalId, address target, uint256 maxSlashFactor);\n    event DrainTokenProposalCreated(uint256 proposalId, address target, address token, uint256 amount);\n\n    function proposeSetWhitelistEnable(address _target, bool _enable) external {\n        bytes memory data = abi.encodeWithSelector(ISgnOwner.setWhitelistEnabled.selector, _enable);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetWhitelistEnableProposalCreated(proposalId, _target, _enable);\n    }\n\n    function proposeUpdateWhitelisted(\n        address _target,\n        dt.Action _action,\n        address _account\n    ) external {\n        bytes4 selector;\n        if (_action == dt.Action.Add) {\n            selector = ISgnOwner.addWhitelisted.selector;\n        } else if (_action == dt.Action.Remove) {\n            selector = ISgnOwner.removeWhitelisted.selector;\n        } else {\n            revert(\"invalid action\");\n        }\n        bytes memory data = abi.encodeWithSelector(selector, _account);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalFastPass);\n        emit UpdateWhitelistedProposalCreated(proposalId, _target, _action, _account);\n    }\n\n    function proposeSetGovContract(address _target, address _addr) external {\n        bytes memory data = abi.encodeWithSelector(ISgnOwner.setGovContract.selector, _addr);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetGovContractProposalCreated(proposalId, _target, _addr);\n    }\n\n    function proposeSetRewardContract(address _target, address _addr) external {\n        bytes memory data = abi.encodeWithSelector(ISgnOwner.setRewardContract.selector, _addr);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetRewardContractProposalCreated(proposalId, _target, _addr);\n    }\n\n    function proposeSetMaxSlashFactor(address _target, uint256 _maxSlashFactor) external {\n        bytes memory data = abi.encodeWithSelector(ISgnOwner.setMaxSlashFactor.selector, _maxSlashFactor);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit SetMaxSlashFactorProposalCreated(proposalId, _target, _maxSlashFactor);\n    }\n\n    function proposeDrainToken(\n        address _target,\n        address _token,\n        uint256 _amount\n    ) external {\n        bytes memory data;\n        if (_token == address(0)) {\n            data = abi.encodeWithSelector(bytes4(keccak256(bytes(\"drainToken(uint256\"))), _amount);\n        } else {\n            data = abi.encodeWithSelector(bytes4(keccak256(bytes(\"drainToken(address,uint256\"))), _token, _amount);\n        }\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit DrainTokenProposalCreated(proposalId, _target, _token, _amount);\n    }\n}\n"
    },
    "contracts/governed-owner/proxies/UpgradeableOwnerProxy.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./OwnerProxyBase.sol\";\nimport \"../interfaces/IUpgradeableOwner.sol\";\nimport {SimpleGovernance as sg} from \"../SimpleGovernance.sol\";\nimport {OwnerDataTypes as dt} from \"./OwnerDataTypes.sol\";\n\nabstract contract UpgradeableOwnerProxy is OwnerProxyBase {\n    event ChangeProxyAdminProposalCreated(uint256 proposalId, address target, address proxy, address newAdmin);\n    event UpgradeProposalCreated(uint256 proposalId, address target, address proxy, address implementation);\n    event UpgradeAndCallProposalCreated(\n        uint256 proposalId,\n        address target,\n        address proxy,\n        address implementation,\n        bytes data\n    );\n    event UpgradeToProposalCreated(uint256 proposalId, address target, address implementation);\n    event UpgradeToAndCallProposalCreated(uint256 proposalId, address target, address implementation, bytes data);\n\n    function proposeChangeProxyAdmin(\n        address _target,\n        address _proxy,\n        address _newAdmin\n    ) external {\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.changeProxyAdmin.selector, _proxy, _newAdmin);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit ChangeProxyAdminProposalCreated(proposalId, _target, _proxy, _newAdmin);\n    }\n\n    function proposeUpgrade(\n        address _target,\n        address _proxy,\n        address _implementation\n    ) external {\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.upgrade.selector, _proxy, _implementation);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpgradeProposalCreated(proposalId, _target, _proxy, _implementation);\n    }\n\n    function proposeUpgradeAndCall(\n        address _target,\n        address _proxy,\n        address _implementation,\n        bytes calldata _data\n    ) external {\n        bytes memory data = abi.encodeWithSelector(\n            IUpgradeableOwner.upgradeAndCall.selector,\n            _proxy,\n            _implementation,\n            _data\n        );\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpgradeAndCallProposalCreated(proposalId, _target, _proxy, _implementation, _data);\n    }\n\n    function proposeUpgradeTo(address _target, address _implementation) external {\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.upgradeTo.selector, _implementation);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpgradeToProposalCreated(proposalId, _target, _implementation);\n    }\n\n    function proposeUpgradeToAndCall(\n        address _target,\n        address _implementation,\n        bytes calldata _data\n    ) external {\n        bytes memory data = abi.encodeWithSelector(IUpgradeableOwner.upgradeToAndCall.selector, _implementation, _data);\n        uint256 proposalId = gov.createProposal(msg.sender, _target, data, sg.ProposalType.ExternalDefault);\n        emit UpgradeToAndCallProposalCreated(proposalId, _target, _implementation, _data);\n    }\n}\n"
    },
    "contracts/governed-owner/SimpleGovernance.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../libraries/Utils.sol\";\n\n// mainly used for governed-owner to do infrequent sgn/cbridge owner operations,\n// relatively prefer easy-to-use over gas-efficiency\ncontract SimpleGovernance {\n    uint256 public constant THRESHOLD_DECIMAL = 100;\n    uint256 public constant MIN_ACTIVE_PERIOD = 3600; // one hour\n    uint256 public constant MAX_ACTIVE_PERIOD = 2419200; // four weeks\n\n    using SafeERC20 for IERC20;\n\n    enum ParamName {\n        ActivePeriod,\n        QuorumThreshold, // default threshold for votes to pass\n        FastPassThreshold // lower threshold for less critical operations\n    }\n\n    enum ProposalType {\n        ExternalDefault,\n        ExternalFastPass,\n        InternalParamChange,\n        InternalVoterUpdate,\n        InternalProxyUpdate,\n        InternalTransferToken\n    }\n\n    mapping(ParamName => uint256) public params;\n\n    struct Proposal {\n        bytes32 dataHash; // hash(proposalType, targetAddress, calldata)\n        uint256 deadline;\n        mapping(address => bool) votes;\n    }\n\n    mapping(uint256 => Proposal) public proposals;\n    uint256 public nextProposalId;\n\n    address[] public voters;\n    mapping(address => uint256) public voterPowers; // voter addr -> voting power\n\n    // NOTE: proxies must be audited open-source non-upgradable contracts with following requirements:\n    // 1. Truthfully pass along tx sender who called the proxy function as the governance proposer.\n    // 2. Do not allow arbitrary fastpass proposal with calldata constructed by the proxy callers.\n    // See ./proxies/CommonOwnerProxy.sol for example.\n    mapping(address => bool) public proposerProxies;\n\n    event Initiated(\n        address[] voters,\n        uint256[] powers,\n        address[] proxies,\n        uint256 activePeriod,\n        uint256 quorumThreshold,\n        uint256 fastPassThreshold\n    );\n\n    event ProposalCreated(\n        uint256 proposalId,\n        ProposalType proposalType,\n        address target,\n        bytes data,\n        uint256 deadline,\n        address proposer\n    );\n    event ProposalVoted(uint256 proposalId, address voter, bool vote);\n    event ProposalExecuted(uint256 proposalId);\n\n    event ParamChangeProposalCreated(uint256 proposalId, ParamName name, uint256 value);\n    event VoterUpdateProposalCreated(uint256 proposalId, address[] voters, uint256[] powers);\n    event ProxyUpdateProposalCreated(uint256 proposalId, address[] addrs, bool[] ops);\n    event TransferTokenProposalCreated(uint256 proposalId, address receiver, address token, uint256 amount);\n\n    constructor(\n        address[] memory _voters,\n        uint256[] memory _powers,\n        address[] memory _proxies,\n        uint256 _activePeriod,\n        uint256 _quorumThreshold,\n        uint256 _fastPassThreshold\n    ) {\n        require(_voters.length > 0 && _voters.length == _powers.length, \"invalid init voters\");\n        require(_activePeriod <= MAX_ACTIVE_PERIOD && _activePeriod >= MIN_ACTIVE_PERIOD, \"invalid active period\");\n        require(\n            _quorumThreshold < THRESHOLD_DECIMAL && _fastPassThreshold <= _quorumThreshold,\n            \"invalid init thresholds\"\n        );\n        for (uint256 i = 0; i < _voters.length; i++) {\n            _setVoter(_voters[i], _powers[i]);\n        }\n        for (uint256 i = 0; i < _proxies.length; i++) {\n            proposerProxies[_proxies[i]] = true;\n        }\n        params[ParamName.ActivePeriod] = _activePeriod;\n        params[ParamName.QuorumThreshold] = _quorumThreshold;\n        params[ParamName.FastPassThreshold] = _fastPassThreshold;\n        emit Initiated(_voters, _powers, _proxies, _activePeriod, _quorumThreshold, _fastPassThreshold);\n    }\n\n    /*********************************\n     * External and Public Functions *\n     *********************************/\n\n    function createProposal(address _target, bytes memory _data) external returns (uint256) {\n        return _createProposal(msg.sender, _target, _data, ProposalType.ExternalDefault);\n    }\n\n    // create proposal through proxy\n    function createProposal(\n        address _proposer,\n        address _target,\n        bytes memory _data,\n        ProposalType _type\n    ) external returns (uint256) {\n        require(proposerProxies[msg.sender], \"sender is not a valid proxy\");\n        require(_type == ProposalType.ExternalDefault || _type == ProposalType.ExternalFastPass, \"invalid type\");\n        return _createProposal(_proposer, _target, _data, _type);\n    }\n\n    function createParamChangeProposal(ParamName _name, uint256 _value) external returns (uint256) {\n        bytes memory data = abi.encode(_name, _value);\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalParamChange);\n        emit ParamChangeProposalCreated(proposalId, _name, _value);\n        return proposalId;\n    }\n\n    function createVoterUpdateProposal(address[] calldata _voters, uint256[] calldata _powers)\n        external\n        returns (uint256)\n    {\n        require(_voters.length == _powers.length, \"voters and powers length not match\");\n        bytes memory data = abi.encode(_voters, _powers);\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalVoterUpdate);\n        emit VoterUpdateProposalCreated(proposalId, _voters, _powers);\n        return proposalId;\n    }\n\n    function createProxyUpdateProposal(address[] calldata _addrs, bool[] calldata _ops) external returns (uint256) {\n        require(_addrs.length == _ops.length, \"_addrs and _ops length not match\");\n        bytes memory data = abi.encode(_addrs, _ops);\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalProxyUpdate);\n        emit ProxyUpdateProposalCreated(proposalId, _addrs, _ops);\n        return proposalId;\n    }\n\n    function createTransferTokenProposal(\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) external returns (uint256) {\n        bytes memory data = abi.encode(_receiver, _token, _amount);\n        uint256 proposalId = _createProposal(msg.sender, address(0), data, ProposalType.InternalTransferToken);\n        emit TransferTokenProposalCreated(proposalId, _receiver, _token, _amount);\n        return proposalId;\n    }\n\n    function voteProposal(uint256 _proposalId, bool _vote) external {\n        require(voterPowers[msg.sender] > 0, \"invalid voter\");\n        Proposal storage p = proposals[_proposalId];\n        require(block.timestamp < p.deadline, \"deadline passed\");\n        p.votes[msg.sender] = _vote;\n        emit ProposalVoted(_proposalId, msg.sender, _vote);\n    }\n\n    function executeProposal(\n        uint256 _proposalId,\n        ProposalType _type,\n        address _target,\n        bytes calldata _data\n    ) external {\n        require(voterPowers[msg.sender] > 0, \"only voter can execute a proposal\");\n        Proposal storage p = proposals[_proposalId];\n        require(block.timestamp < p.deadline, \"deadline passed\");\n        require(keccak256(abi.encodePacked(_type, _target, _data)) == p.dataHash, \"data hash not match\");\n        p.deadline = 0;\n\n        p.votes[msg.sender] = true;\n        (, , bool pass) = countVotes(_proposalId, _type);\n        require(pass, \"not enough votes\");\n\n        if (_type == ProposalType.ExternalDefault || _type == ProposalType.ExternalFastPass) {\n            (bool success, bytes memory res) = _target.call(_data);\n            require(success, Utils.getRevertMsg(res));\n        } else if (_type == ProposalType.InternalParamChange) {\n            (ParamName name, uint256 value) = abi.decode((_data), (ParamName, uint256));\n            params[name] = value;\n            if (name == ParamName.ActivePeriod) {\n                require(value <= MAX_ACTIVE_PERIOD && value >= MIN_ACTIVE_PERIOD, \"invalid active period\");\n            } else if (name == ParamName.QuorumThreshold || name == ParamName.FastPassThreshold) {\n                require(\n                    params[ParamName.QuorumThreshold] >= params[ParamName.FastPassThreshold] &&\n                        value < THRESHOLD_DECIMAL &&\n                        value > 0,\n                    \"invalid threshold\"\n                );\n            }\n        } else if (_type == ProposalType.InternalVoterUpdate) {\n            (address[] memory addrs, uint256[] memory powers) = abi.decode((_data), (address[], uint256[]));\n            for (uint256 i = 0; i < addrs.length; i++) {\n                if (powers[i] > 0) {\n                    _setVoter(addrs[i], powers[i]);\n                } else {\n                    _removeVoter(addrs[i]);\n                }\n            }\n        } else if (_type == ProposalType.InternalProxyUpdate) {\n            (address[] memory addrs, bool[] memory ops) = abi.decode((_data), (address[], bool[]));\n            for (uint256 i = 0; i < addrs.length; i++) {\n                if (ops[i]) {\n                    proposerProxies[addrs[i]] = true;\n                } else {\n                    delete proposerProxies[addrs[i]];\n                }\n            }\n        } else if (_type == ProposalType.InternalTransferToken) {\n            (address receiver, address token, uint256 amount) = abi.decode((_data), (address, address, uint256));\n            _transfer(receiver, token, amount);\n        }\n        emit ProposalExecuted(_proposalId);\n    }\n\n    receive() external payable {}\n\n    /**************************\n     *  Public View Functions *\n     **************************/\n\n    function getVoters() public view returns (address[] memory, uint256[] memory) {\n        address[] memory addrs = new address[](voters.length);\n        uint256[] memory powers = new uint256[](voters.length);\n        for (uint32 i = 0; i < voters.length; i++) {\n            addrs[i] = voters[i];\n            powers[i] = voterPowers[voters[i]];\n        }\n        return (addrs, powers);\n    }\n\n    function getVote(uint256 _proposalId, address _voter) public view returns (bool) {\n        return proposals[_proposalId].votes[_voter];\n    }\n\n    function countVotes(uint256 _proposalId, ProposalType _type)\n        public\n        view\n        returns (\n            uint256,\n            uint256,\n            bool\n        )\n    {\n        uint256 yesVotes;\n        uint256 totalPower;\n        for (uint32 i = 0; i < voters.length; i++) {\n            if (getVote(_proposalId, voters[i])) {\n                yesVotes += voterPowers[voters[i]];\n            }\n            totalPower += voterPowers[voters[i]];\n        }\n        uint256 threshold;\n        if (_type == ProposalType.ExternalFastPass) {\n            threshold = params[ParamName.FastPassThreshold];\n        } else {\n            threshold = params[ParamName.QuorumThreshold];\n        }\n        bool pass = (yesVotes >= (totalPower * threshold) / THRESHOLD_DECIMAL);\n        return (totalPower, yesVotes, pass);\n    }\n\n    /**********************************\n     * Internal and Private Functions *\n     **********************************/\n\n    // create a proposal and vote yes\n    function _createProposal(\n        address _proposer,\n        address _target,\n        bytes memory _data,\n        ProposalType _type\n    ) private returns (uint256) {\n        require(voterPowers[_proposer] > 0, \"only voter can create a proposal\");\n        uint256 proposalId = nextProposalId;\n        nextProposalId += 1;\n        Proposal storage p = proposals[proposalId];\n        p.dataHash = keccak256(abi.encodePacked(_type, _target, _data));\n        p.deadline = block.timestamp + params[ParamName.ActivePeriod];\n        p.votes[_proposer] = true;\n        emit ProposalCreated(proposalId, _type, _target, _data, p.deadline, _proposer);\n        return proposalId;\n    }\n\n    function _setVoter(address _voter, uint256 _power) private {\n        require(_power > 0, \"zero power\");\n        if (voterPowers[_voter] == 0) {\n            // add new voter\n            voters.push(_voter);\n        }\n        voterPowers[_voter] = _power;\n    }\n\n    function _removeVoter(address _voter) private {\n        require(voterPowers[_voter] > 0, \"not a voter\");\n        uint256 lastIndex = voters.length - 1;\n        for (uint256 i = 0; i < voters.length; i++) {\n            if (voters[i] == _voter) {\n                if (i < lastIndex) {\n                    voters[i] = voters[lastIndex];\n                }\n                voters.pop();\n                voterPowers[_voter] = 0;\n                return;\n            }\n        }\n        revert(\"voter not found\"); // this should never happen\n    }\n\n    function _transfer(\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) private {\n        if (_token == address(0)) {\n            (bool sent, ) = _receiver.call{value: _amount, gas: 50000}(\"\");\n            require(sent, \"failed to send native token\");\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IPeggedToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedToken {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IPeggedTokenBurnFrom.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\n// used for pegged token with openzeppelin ERC20Burnable interface\n// only compatible with PeggedTokenBridgeV2\ninterface IPeggedTokenBurnFrom {\n    function mint(address _to, uint256 _amount) external;\n\n    function burnFrom(address _from, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/ISigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/libraries/Pb.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\n// runtime proto sol library\nlibrary Pb {\n    enum WireType {\n        Varint,\n        Fixed64,\n        LengthDelim,\n        StartGroup,\n        EndGroup,\n        Fixed32\n    }\n\n    struct Buffer {\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\n        bytes b; // hold serialized proto msg, readonly\n    }\n\n    // create a new in-memory Buffer object from raw msg bytes\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n        buf.b = raw;\n        buf.idx = 0;\n    }\n\n    // whether there are unread bytes\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\n        return buf.idx < buf.b.length;\n    }\n\n    // decode current field number and wiretype\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\n        uint256 v = decVarint(buf);\n        tag = v / 8;\n        wiretype = WireType(v & 7);\n    }\n\n    // count tag occurrences, return an array due to no memory map support\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\n    // should keep buf.idx unchanged because this is only a count function\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\n        uint256 originalIdx = buf.idx;\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\n        uint256 tag;\n        WireType wire;\n        while (hasMore(buf)) {\n            (tag, wire) = decKey(buf);\n            cnts[tag] += 1;\n            skipValue(buf, wire);\n        }\n        buf.idx = originalIdx;\n    }\n\n    // read varint from current buf idx, move buf.idx to next read, return the int value\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\n        v = buf.idx; // use v to save one additional uint variable\n        assembly {\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n        }\n        uint256 b; // store current byte content\n        v = 0; // reset to 0 for return value\n        for (uint256 i = 0; i < 10; i++) {\n            assembly {\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\n            }\n            v |= (b & 0x7F) << (i * 7);\n            if (b & 0x80 == 0) {\n                buf.idx += i + 1;\n                return v;\n            }\n        }\n        revert(); // i=10, invalid varint stream\n    }\n\n    // read length delimited field and return bytes\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        b = new bytes(len);\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\n        uint256 bStart;\n        uint256 bufBStart = buf.idx;\n        assembly {\n            bStart := add(b, 32)\n            bufBStart := add(add(bufB, 32), bufBStart)\n        }\n        for (uint256 i = 0; i < len; i += 32) {\n            assembly {\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\n            }\n        }\n        buf.idx = end;\n    }\n\n    // return packed ints\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        // array in memory must be init w/ known length\n        // so we have to create a tmp array w/ max possible len first\n        uint256[] memory tmp = new uint256[](len);\n        uint256 i = 0; // count how many ints are there\n        while (buf.idx < end) {\n            tmp[i] = decVarint(buf);\n            i++;\n        }\n        t = new uint256[](i); // init t with correct length\n        for (uint256 j = 0; j < i; j++) {\n            t[j] = tmp[j];\n        }\n        return t;\n    }\n\n    // move idx pass current value field, to beginning of next tag or msg end\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\n        if (wire == WireType.Varint) {\n            decVarint(buf);\n        } else if (wire == WireType.LengthDelim) {\n            uint256 len = decVarint(buf);\n            buf.idx += len; // skip len bytes value data\n            require(buf.idx <= buf.b.length); // avoid overflow\n        } else {\n            revert();\n        } // unsupported wiretype\n    }\n\n    // type conversion help utils\n    function _bool(uint256 x) internal pure returns (bool v) {\n        return x != 0;\n    }\n\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\n        assembly {\n            v := mload(add(b, 32))\n        } // load all 32bytes to v\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\n    }\n\n    function _address(bytes memory b) internal pure returns (address v) {\n        v = _addressPayable(b);\n    }\n\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n        require(b.length == 20);\n        //load 32bytes then shift right 12 bytes\n        assembly {\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\n        }\n    }\n\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n        require(b.length == 32);\n        assembly {\n            v := mload(add(b, 32))\n        }\n    }\n\n    // uint[] to uint8[]\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\n        t = new uint8[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint8(arr[i]);\n        }\n    }\n\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\n        t = new uint32[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint32(arr[i]);\n        }\n    }\n\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\n        t = new uint64[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint64(arr[i]);\n        }\n    }\n\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\n        t = new bool[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = arr[i] != 0;\n        }\n    }\n}\n"
    },
    "contracts/libraries/PbPegged.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\n// Code generated by protoc-gen-sol. DO NOT EDIT.\n// source: contracts/libraries/proto/pegged.proto\npragma solidity 0.8.17;\nimport \"./Pb.sol\";\n\nlibrary PbPegged {\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\n\n    struct Mint {\n        address token; // tag: 1\n        address account; // tag: 2\n        uint256 amount; // tag: 3\n        address depositor; // tag: 4\n        uint64 refChainId; // tag: 5\n        bytes32 refId; // tag: 6\n    } // end struct Mint\n\n    function decMint(bytes memory raw) internal pure returns (Mint memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.token = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.account = Pb._address(buf.decBytes());\n            } else if (tag == 3) {\n                m.amount = Pb._uint256(buf.decBytes());\n            } else if (tag == 4) {\n                m.depositor = Pb._address(buf.decBytes());\n            } else if (tag == 5) {\n                m.refChainId = uint64(buf.decVarint());\n            } else if (tag == 6) {\n                m.refId = Pb._bytes32(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder Mint\n\n    struct Withdraw {\n        address token; // tag: 1\n        address receiver; // tag: 2\n        uint256 amount; // tag: 3\n        address burnAccount; // tag: 4\n        uint64 refChainId; // tag: 5\n        bytes32 refId; // tag: 6\n    } // end struct Withdraw\n\n    function decWithdraw(bytes memory raw) internal pure returns (Withdraw memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.token = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.receiver = Pb._address(buf.decBytes());\n            } else if (tag == 3) {\n                m.amount = Pb._uint256(buf.decBytes());\n            } else if (tag == 4) {\n                m.burnAccount = Pb._address(buf.decBytes());\n            } else if (tag == 5) {\n                m.refChainId = uint64(buf.decVarint());\n            } else if (tag == 6) {\n                m.refId = Pb._bytes32(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder Withdraw\n}\n"
    },
    "contracts/libraries/Utils.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary Utils {\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n}\n"
    },
    "contracts/pegged-bridge/customized/PeggedNativeTokenBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"../PeggedTokenBridgeV2.sol\";\n\ninterface INativeVault {\n    function burn() external payable;\n}\n\ncontract PeggedNativeTokenBridge is PeggedTokenBridgeV2 {\n    // native vault address is treated as the pegged natvie token address\n    address public nativeVault;\n\n    constructor(ISigsVerifier _sigsVerifier) PeggedTokenBridgeV2(_sigsVerifier) {}\n\n    function burnNative(\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external payable whenNotPaused returns (bytes32) {\n        require(msg.value > 0, \"zero msg value\");\n        bytes32 burnId = _burn(nativeVault, msg.value, _toChainId, _toAccount, _nonce);\n        INativeVault(nativeVault).burn{value: msg.value}();\n        return burnId;\n    }\n\n    function setNativeVault(address _natvieVault) external onlyOwner {\n        nativeVault = _natvieVault;\n    }\n}\n"
    },
    "contracts/pegged-bridge/PeggedTokenBridgeV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/ISigsVerifier.sol\";\nimport \"../interfaces/IPeggedToken.sol\";\nimport \"../interfaces/IPeggedTokenBurnFrom.sol\";\nimport \"../libraries/PbPegged.sol\";\nimport \"../safeguard/Pauser.sol\";\nimport \"../safeguard/VolumeControl.sol\";\nimport \"../safeguard/DelayedTransfer.sol\";\n\n/**\n * @title The bridge contract to mint and burn pegged tokens\n * @dev Work together with OriginalTokenVault deployed at remote chains.\n */\ncontract PeggedTokenBridgeV2 is Pauser, VolumeControl, DelayedTransfer {\n    ISigsVerifier public immutable sigsVerifier;\n\n    mapping(bytes32 => bool) public records;\n    mapping(address => uint256) public supplies;\n\n    mapping(address => uint256) public minBurn;\n    mapping(address => uint256) public maxBurn;\n\n    event Mint(\n        bytes32 mintId,\n        address token,\n        address account,\n        uint256 amount,\n        // ref_chain_id defines the reference chain ID, taking values of:\n        // 1. The common case: the chain ID on which the remote corresponding deposit or burn happened;\n        // 2. Refund for wrong burn: this chain ID on which the burn happened\n        uint64 refChainId,\n        // ref_id defines a unique reference ID, taking values of:\n        // 1. The common case of deposit/burn-mint: the deposit or burn ID on the remote chain;\n        // 2. Refund for wrong burn: the burn ID on this chain\n        bytes32 refId,\n        address depositor\n    );\n    event Burn(\n        bytes32 burnId,\n        address token,\n        address account,\n        uint256 amount,\n        uint64 toChainId,\n        address toAccount,\n        uint64 nonce\n    );\n    event MinBurnUpdated(address token, uint256 amount);\n    event MaxBurnUpdated(address token, uint256 amount);\n    event SupplyUpdated(address token, uint256 supply);\n\n    constructor(ISigsVerifier _sigsVerifier) {\n        sigsVerifier = _sigsVerifier;\n    }\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external whenNotPaused returns (bytes32) {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Mint\"));\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _request), _sigs, _signers, _powers);\n        PbPegged.Mint memory request = PbPegged.decMint(_request);\n        bytes32 mintId = keccak256(\n            // len = 20 + 20 + 32 + 20 + 8 + 32 + 20 = 152\n            abi.encodePacked(\n                request.account,\n                request.token,\n                request.amount,\n                request.depositor,\n                request.refChainId,\n                request.refId,\n                address(this)\n            )\n        );\n        require(records[mintId] == false, \"record exists\");\n        records[mintId] = true;\n        _updateVolume(request.token, request.amount);\n        uint256 delayThreshold = delayThresholds[request.token];\n        if (delayThreshold > 0 && request.amount > delayThreshold) {\n            _addDelayedTransfer(mintId, request.account, request.token, request.amount);\n        } else {\n            IPeggedToken(request.token).mint(request.account, request.amount);\n        }\n        supplies[request.token] += request.amount;\n        emit Mint(\n            mintId,\n            request.token,\n            request.account,\n            request.amount,\n            request.refChainId,\n            request.refId,\n            request.depositor\n        );\n        return mintId;\n    }\n\n    /**\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\n     * OriginalTokenVault, or mint at another remote chain\n     * NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\n     * @param _token The pegged token address.\n     * @param _amount The amount to burn.\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\n     * @param _toAccount The account to receive tokens on the remote chain\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external whenNotPaused returns (bytes32) {\n        bytes32 burnId = _burn(_token, _amount, _toChainId, _toAccount, _nonce);\n        IPeggedToken(_token).burn(msg.sender, _amount);\n        return burnId;\n    }\n\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\n    function burnFrom(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external whenNotPaused returns (bytes32) {\n        bytes32 burnId = _burn(_token, _amount, _toChainId, _toAccount, _nonce);\n        IPeggedTokenBurnFrom(_token).burnFrom(msg.sender, _amount);\n        return burnId;\n    }\n\n    function _burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) internal returns (bytes32) {\n        require(_amount > minBurn[_token], \"amount too small\");\n        require(maxBurn[_token] == 0 || _amount <= maxBurn[_token], \"amount too large\");\n        supplies[_token] -= _amount;\n        bytes32 burnId = keccak256(\n            // len = 20 + 20 + 32 + 8 + 20 + 8 + 8 + 20 = 136\n            abi.encodePacked(\n                msg.sender,\n                _token,\n                _amount,\n                _toChainId,\n                _toAccount,\n                _nonce,\n                uint64(block.chainid),\n                address(this)\n            )\n        );\n        require(records[burnId] == false, \"record exists\");\n        records[burnId] = true;\n        emit Burn(burnId, _token, msg.sender, _amount, _toChainId, _toAccount, _nonce);\n        return burnId;\n    }\n\n    function executeDelayedTransfer(bytes32 id) external whenNotPaused {\n        delayedTransfer memory transfer = _executeDelayedTransfer(id);\n        IPeggedToken(transfer.token).mint(transfer.receiver, transfer.amount);\n    }\n\n    function setMinBurn(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            minBurn[_tokens[i]] = _amounts[i];\n            emit MinBurnUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function setMaxBurn(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            maxBurn[_tokens[i]] = _amounts[i];\n            emit MaxBurnUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function setSupply(address _token, uint256 _supply) external onlyOwner {\n        supplies[_token] = _supply;\n        emit SupplyUpdated(_token, _supply);\n    }\n\n    function increaseSupply(address _token, uint256 _delta) external onlyOwner {\n        supplies[_token] += _delta;\n        emit SupplyUpdated(_token, supplies[_token]);\n    }\n\n    function decreaseSupply(address _token, uint256 _delta) external onlyOwner {\n        supplies[_token] -= _delta;\n        emit SupplyUpdated(_token, supplies[_token]);\n    }\n}\n"
    },
    "contracts/safeguard/DelayedTransfer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./Governor.sol\";\n\nabstract contract DelayedTransfer is Governor {\n    struct delayedTransfer {\n        address receiver;\n        address token;\n        uint256 amount;\n        uint256 timestamp;\n    }\n    mapping(bytes32 => delayedTransfer) public delayedTransfers;\n    mapping(address => uint256) public delayThresholds;\n    uint256 public delayPeriod; // in seconds\n\n    event DelayedTransferAdded(bytes32 id);\n    event DelayedTransferExecuted(bytes32 id, address receiver, address token, uint256 amount);\n\n    event DelayPeriodUpdated(uint256 period);\n    event DelayThresholdUpdated(address token, uint256 threshold);\n\n    function setDelayThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external onlyGovernor {\n        require(_tokens.length == _thresholds.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            delayThresholds[_tokens[i]] = _thresholds[i];\n            emit DelayThresholdUpdated(_tokens[i], _thresholds[i]);\n        }\n    }\n\n    function setDelayPeriod(uint256 _period) external onlyGovernor {\n        delayPeriod = _period;\n        emit DelayPeriodUpdated(_period);\n    }\n\n    function _addDelayedTransfer(\n        bytes32 id,\n        address receiver,\n        address token,\n        uint256 amount\n    ) internal {\n        require(delayedTransfers[id].timestamp == 0, \"delayed transfer already exists\");\n        delayedTransfers[id] = delayedTransfer({\n            receiver: receiver,\n            token: token,\n            amount: amount,\n            timestamp: block.timestamp\n        });\n        emit DelayedTransferAdded(id);\n    }\n\n    // caller needs to do the actual token transfer\n    function _executeDelayedTransfer(bytes32 id) internal returns (delayedTransfer memory) {\n        delayedTransfer memory transfer = delayedTransfers[id];\n        require(transfer.timestamp > 0, \"delayed transfer not exist\");\n        require(block.timestamp > transfer.timestamp + delayPeriod, \"delayed transfer still locked\");\n        delete delayedTransfers[id];\n        emit DelayedTransferExecuted(id, transfer.receiver, transfer.token, transfer.amount);\n        return transfer;\n    }\n}\n"
    },
    "contracts/safeguard/Governor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./Ownable.sol\";\n\nabstract contract Governor is Ownable {\n    mapping(address => bool) public governors;\n\n    event GovernorAdded(address account);\n    event GovernorRemoved(address account);\n\n    modifier onlyGovernor() {\n        require(isGovernor(msg.sender), \"Caller is not governor\");\n        _;\n    }\n\n    constructor() {\n        _addGovernor(msg.sender);\n    }\n\n    function isGovernor(address _account) public view returns (bool) {\n        return governors[_account];\n    }\n\n    function addGovernor(address _account) public onlyOwner {\n        _addGovernor(_account);\n    }\n\n    function removeGovernor(address _account) public onlyOwner {\n        _removeGovernor(_account);\n    }\n\n    function renounceGovernor() public {\n        _removeGovernor(msg.sender);\n    }\n\n    function _addGovernor(address _account) private {\n        require(!isGovernor(_account), \"Account is already governor\");\n        governors[_account] = true;\n        emit GovernorAdded(_account);\n    }\n\n    function _removeGovernor(address _account) private {\n        require(isGovernor(_account), \"Account is not governor\");\n        governors[_account] = false;\n        emit GovernorRemoved(_account);\n    }\n}\n"
    },
    "contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/safeguard/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./Ownable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        pausers[account] = false;\n        emit PauserRemoved(account);\n    }\n}\n"
    },
    "contracts/safeguard/VolumeControl.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./Governor.sol\";\n\nabstract contract VolumeControl is Governor {\n    uint256 public epochLength; // seconds\n    mapping(address => uint256) public epochVolumes; // key is token\n    mapping(address => uint256) public epochVolumeCaps; // key is token\n    mapping(address => uint256) public lastOpTimestamps; // key is token\n\n    event EpochLengthUpdated(uint256 length);\n    event EpochVolumeUpdated(address token, uint256 cap);\n\n    function setEpochLength(uint256 _length) external onlyGovernor {\n        epochLength = _length;\n        emit EpochLengthUpdated(_length);\n    }\n\n    function setEpochVolumeCaps(address[] calldata _tokens, uint256[] calldata _caps) external onlyGovernor {\n        require(_tokens.length == _caps.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            epochVolumeCaps[_tokens[i]] = _caps[i];\n            emit EpochVolumeUpdated(_tokens[i], _caps[i]);\n        }\n    }\n\n    function _updateVolume(address _token, uint256 _amount) internal {\n        if (epochLength == 0) {\n            return;\n        }\n        uint256 cap = epochVolumeCaps[_token];\n        if (cap == 0) {\n            return;\n        }\n        uint256 volume = epochVolumes[_token];\n        uint256 timestamp = block.timestamp;\n        uint256 epochStartTime = (timestamp / epochLength) * epochLength;\n        if (lastOpTimestamps[_token] < epochStartTime) {\n            volume = _amount;\n        } else {\n            volume += _amount;\n        }\n        require(volume <= cap, \"volume exceeds cap\");\n        epochVolumes[_token] = volume;\n        lastOpTimestamps[_token] = timestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}