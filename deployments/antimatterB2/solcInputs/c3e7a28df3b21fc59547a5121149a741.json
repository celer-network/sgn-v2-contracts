{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/interfaces/ISigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/libraries/Pb.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\n// runtime proto sol library\nlibrary Pb {\n    enum WireType {\n        Varint,\n        Fixed64,\n        LengthDelim,\n        StartGroup,\n        EndGroup,\n        Fixed32\n    }\n\n    struct Buffer {\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\n        bytes b; // hold serialized proto msg, readonly\n    }\n\n    // create a new in-memory Buffer object from raw msg bytes\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n        buf.b = raw;\n        buf.idx = 0;\n    }\n\n    // whether there are unread bytes\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\n        return buf.idx < buf.b.length;\n    }\n\n    // decode current field number and wiretype\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\n        uint256 v = decVarint(buf);\n        tag = v / 8;\n        wiretype = WireType(v & 7);\n    }\n\n    // count tag occurrences, return an array due to no memory map support\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\n    // should keep buf.idx unchanged because this is only a count function\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\n        uint256 originalIdx = buf.idx;\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\n        uint256 tag;\n        WireType wire;\n        while (hasMore(buf)) {\n            (tag, wire) = decKey(buf);\n            cnts[tag] += 1;\n            skipValue(buf, wire);\n        }\n        buf.idx = originalIdx;\n    }\n\n    // read varint from current buf idx, move buf.idx to next read, return the int value\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\n        v = buf.idx; // use v to save one additional uint variable\n        assembly {\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n        }\n        uint256 b; // store current byte content\n        v = 0; // reset to 0 for return value\n        for (uint256 i = 0; i < 10; i++) {\n            assembly {\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\n            }\n            v |= (b & 0x7F) << (i * 7);\n            if (b & 0x80 == 0) {\n                buf.idx += i + 1;\n                return v;\n            }\n        }\n        revert(); // i=10, invalid varint stream\n    }\n\n    // read length delimited field and return bytes\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        b = new bytes(len);\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\n        uint256 bStart;\n        uint256 bufBStart = buf.idx;\n        assembly {\n            bStart := add(b, 32)\n            bufBStart := add(add(bufB, 32), bufBStart)\n        }\n        for (uint256 i = 0; i < len; i += 32) {\n            assembly {\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\n            }\n        }\n        buf.idx = end;\n    }\n\n    // return packed ints\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\n        uint256 len = decVarint(buf);\n        uint256 end = buf.idx + len;\n        require(end <= buf.b.length); // avoid overflow\n        // array in memory must be init w/ known length\n        // so we have to create a tmp array w/ max possible len first\n        uint256[] memory tmp = new uint256[](len);\n        uint256 i = 0; // count how many ints are there\n        while (buf.idx < end) {\n            tmp[i] = decVarint(buf);\n            i++;\n        }\n        t = new uint256[](i); // init t with correct length\n        for (uint256 j = 0; j < i; j++) {\n            t[j] = tmp[j];\n        }\n        return t;\n    }\n\n    // move idx pass current value field, to beginning of next tag or msg end\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\n        if (wire == WireType.Varint) {\n            decVarint(buf);\n        } else if (wire == WireType.LengthDelim) {\n            uint256 len = decVarint(buf);\n            buf.idx += len; // skip len bytes value data\n            require(buf.idx <= buf.b.length); // avoid overflow\n        } else {\n            revert();\n        } // unsupported wiretype\n    }\n\n    // type conversion help utils\n    function _bool(uint256 x) internal pure returns (bool v) {\n        return x != 0;\n    }\n\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\n        assembly {\n            v := mload(add(b, 32))\n        } // load all 32bytes to v\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\n    }\n\n    function _address(bytes memory b) internal pure returns (address v) {\n        v = _addressPayable(b);\n    }\n\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n        require(b.length == 20);\n        //load 32bytes then shift right 12 bytes\n        assembly {\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\n        }\n    }\n\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n        require(b.length == 32);\n        assembly {\n            v := mload(add(b, 32))\n        }\n    }\n\n    // uint[] to uint8[]\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\n        t = new uint8[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint8(arr[i]);\n        }\n    }\n\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\n        t = new uint32[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint32(arr[i]);\n        }\n    }\n\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\n        t = new uint64[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = uint64(arr[i]);\n        }\n    }\n\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\n        t = new bool[](arr.length);\n        for (uint256 i = 0; i < t.length; i++) {\n            t[i] = arr[i] != 0;\n        }\n    }\n}\n"
    },
    "contracts/libraries/PbBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\n// Code generated by protoc-gen-sol. DO NOT EDIT.\n// source: bridge.proto\npragma solidity 0.8.17;\nimport \"./Pb.sol\";\n\nlibrary PbBridge {\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\n\n    struct Relay {\n        address sender; // tag: 1\n        address receiver; // tag: 2\n        address token; // tag: 3\n        uint256 amount; // tag: 4\n        uint64 srcChainId; // tag: 5\n        uint64 dstChainId; // tag: 6\n        bytes32 srcTransferId; // tag: 7\n    } // end struct Relay\n\n    function decRelay(bytes memory raw) internal pure returns (Relay memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.sender = Pb._address(buf.decBytes());\n            } else if (tag == 2) {\n                m.receiver = Pb._address(buf.decBytes());\n            } else if (tag == 3) {\n                m.token = Pb._address(buf.decBytes());\n            } else if (tag == 4) {\n                m.amount = Pb._uint256(buf.decBytes());\n            } else if (tag == 5) {\n                m.srcChainId = uint64(buf.decVarint());\n            } else if (tag == 6) {\n                m.dstChainId = uint64(buf.decVarint());\n            } else if (tag == 7) {\n                m.srcTransferId = Pb._bytes32(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder Relay\n}\n"
    },
    "contracts/libraries/PbPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\n// Code generated by protoc-gen-sol. DO NOT EDIT.\n// source: contracts/libraries/proto/pool.proto\npragma solidity 0.8.17;\nimport \"./Pb.sol\";\n\nlibrary PbPool {\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\n\n    struct WithdrawMsg {\n        uint64 chainid; // tag: 1\n        uint64 seqnum; // tag: 2\n        address receiver; // tag: 3\n        address token; // tag: 4\n        uint256 amount; // tag: 5\n        bytes32 refid; // tag: 6\n    } // end struct WithdrawMsg\n\n    function decWithdrawMsg(bytes memory raw) internal pure returns (WithdrawMsg memory m) {\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\n\n        uint256 tag;\n        Pb.WireType wire;\n        while (buf.hasMore()) {\n            (tag, wire) = buf.decKey();\n            if (false) {}\n            // solidity has no switch/case\n            else if (tag == 1) {\n                m.chainid = uint64(buf.decVarint());\n            } else if (tag == 2) {\n                m.seqnum = uint64(buf.decVarint());\n            } else if (tag == 3) {\n                m.receiver = Pb._address(buf.decBytes());\n            } else if (tag == 4) {\n                m.token = Pb._address(buf.decBytes());\n            } else if (tag == 5) {\n                m.amount = Pb._uint256(buf.decBytes());\n            } else if (tag == 6) {\n                m.refid = Pb._bytes32(buf.decBytes());\n            } else {\n                buf.skipValue(wire);\n            } // skip value of unknown tag\n        }\n    } // end decoder WithdrawMsg\n}\n"
    },
    "contracts/liquidity-bridge/Bridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../libraries/PbBridge.sol\";\nimport \"./Pool.sol\";\n\n/**\n * @title The liquidity-pool based bridge.\n */\ncontract Bridge is Pool {\n    using SafeERC20 for IERC20;\n\n    // liquidity events\n    event Send(\n        bytes32 transferId,\n        address sender,\n        address receiver,\n        address token,\n        uint256 amount,\n        uint64 dstChainId,\n        uint64 nonce,\n        uint32 maxSlippage\n    );\n    event Relay(\n        bytes32 transferId,\n        address sender,\n        address receiver,\n        address token,\n        uint256 amount,\n        uint64 srcChainId,\n        bytes32 srcTransferId\n    );\n    // gov events\n    event MinSendUpdated(address token, uint256 amount);\n    event MaxSendUpdated(address token, uint256 amount);\n\n    mapping(bytes32 => bool) public transfers;\n    mapping(address => uint256) public minSend; // send _amount must > minSend\n    mapping(address => uint256) public maxSend;\n\n    // min allowed max slippage uint32 value is slippage * 1M, eg. 0.5% -> 5000\n    uint32 public minimalMaxSlippage;\n\n    /**\n     * @notice Send a cross-chain transfer via the liquidity pool-based bridge.\n     * NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\n     * @param _receiver The address of the receiver.\n     * @param _token The address of the token.\n     * @param _amount The amount of the transfer.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     */\n    function send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage // slippage * 1M, eg. 0.5% -> 5000\n    ) external nonReentrant whenNotPaused {\n        bytes32 transferId = _send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        emit Send(transferId, msg.sender, _receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n    }\n\n    /**\n     * @notice Send a cross-chain transfer via the liquidity pool-based bridge using the native token.\n     * @param _receiver The address of the receiver.\n     * @param _amount The amount of the transfer.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A unique number. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     */\n    function sendNative(\n        address _receiver,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external payable nonReentrant whenNotPaused {\n        require(msg.value == _amount, \"Amount mismatch\");\n        require(nativeWrap != address(0), \"Native wrap not set\");\n        bytes32 transferId = _send(_receiver, nativeWrap, _amount, _dstChainId, _nonce, _maxSlippage);\n        IWETH(nativeWrap).deposit{value: _amount}();\n        emit Send(transferId, msg.sender, _receiver, nativeWrap, _amount, _dstChainId, _nonce, _maxSlippage);\n    }\n\n    function _send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) private returns (bytes32) {\n        require(_amount > minSend[_token], \"amount too small\");\n        require(maxSend[_token] == 0 || _amount <= maxSend[_token], \"amount too large\");\n        require(_maxSlippage > minimalMaxSlippage, \"max slippage too small\");\n        bytes32 transferId = keccak256(\n            // uint64(block.chainid) for consistency as entire system uses uint64 for chain id\n            // len = 20 + 20 + 20 + 32 + 8 + 8 + 8 = 116\n            abi.encodePacked(msg.sender, _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\n        );\n        require(transfers[transferId] == false, \"transfer exists\");\n        transfers[transferId] = true;\n        return transferId;\n    }\n\n    /**\n     * @notice Relay a cross-chain transfer sent from a liquidity pool-based bridge on another chain.\n     * @param _relayRequest The serialized Relay protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function relay(\n        bytes calldata _relayRequest,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Relay\"));\n        verifySigs(abi.encodePacked(domain, _relayRequest), _sigs, _signers, _powers);\n        PbBridge.Relay memory request = PbBridge.decRelay(_relayRequest);\n        // len = 20 + 20 + 20 + 32 + 8 + 8 + 32 = 140\n        bytes32 transferId = keccak256(\n            abi.encodePacked(\n                request.sender,\n                request.receiver,\n                request.token,\n                request.amount,\n                request.srcChainId,\n                request.dstChainId,\n                request.srcTransferId\n            )\n        );\n        require(transfers[transferId] == false, \"transfer exists\");\n        transfers[transferId] = true;\n        _updateVolume(request.token, request.amount);\n        uint256 delayThreshold = delayThresholds[request.token];\n        if (delayThreshold > 0 && request.amount > delayThreshold) {\n            _addDelayedTransfer(transferId, request.receiver, request.token, request.amount);\n        } else {\n            _sendToken(request.receiver, request.token, request.amount);\n        }\n\n        emit Relay(\n            transferId,\n            request.sender,\n            request.receiver,\n            request.token,\n            request.amount,\n            request.srcChainId,\n            request.srcTransferId\n        );\n    }\n\n    function setMinSend(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            minSend[_tokens[i]] = _amounts[i];\n            emit MinSendUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function setMaxSend(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            maxSend[_tokens[i]] = _amounts[i];\n            emit MaxSendUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function setMinimalMaxSlippage(uint32 _minimalMaxSlippage) external onlyGovernor {\n        minimalMaxSlippage = _minimalMaxSlippage;\n    }\n\n    // This is needed to receive ETH when calling `IWETH.withdraw`\n    receive() external payable {}\n}\n"
    },
    "contracts/liquidity-bridge/Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"../libraries/PbPool.sol\";\nimport \"../safeguard/Pauser.sol\";\nimport \"../safeguard/VolumeControl.sol\";\nimport \"../safeguard/DelayedTransfer.sol\";\nimport \"./Signers.sol\";\n\n/**\n * @title Liquidity pool functions for {Bridge}.\n */\ncontract Pool is Signers, ReentrancyGuard, Pauser, VolumeControl, DelayedTransfer {\n    using SafeERC20 for IERC20;\n\n    uint64 public addseq; // ensure unique LiquidityAdded event, start from 1\n    mapping(address => uint256) public minAdd; // add _amount must > minAdd\n\n    // map of successful withdraws, if true means already withdrew money or added to delayedTransfers\n    mapping(bytes32 => bool) public withdraws;\n\n    // erc20 wrap of gas token of this chain, eg. WETH, when relay ie. pay out,\n    // if request.token equals this, will withdraw and send native token to receiver\n    // note we don't check whether it's zero address. when this isn't set, and request.token\n    // is all 0 address, guarantee fail\n    address public nativeWrap;\n\n    // when transfer native token after wrap, use this gas used config.\n    uint256 public nativeTokenTransferGas = 50000;\n\n    // liquidity events\n    event LiquidityAdded(\n        uint64 seqnum,\n        address provider,\n        address token,\n        uint256 amount // how many tokens were added\n    );\n    event WithdrawDone(\n        bytes32 withdrawId,\n        uint64 seqnum,\n        address receiver,\n        address token,\n        uint256 amount,\n        bytes32 refid\n    );\n    event MinAddUpdated(address token, uint256 amount);\n\n    /**\n     * @notice Add liquidity to the pool-based bridge.\n     * NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\n     * @param _token The address of the token.\n     * @param _amount The amount to add.\n     */\n    function addLiquidity(address _token, uint256 _amount) external nonReentrant whenNotPaused {\n        require(_amount > minAdd[_token], \"amount too small\");\n        addseq += 1;\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        emit LiquidityAdded(addseq, msg.sender, _token, _amount);\n    }\n\n    /**\n     * @notice Add native token liquidity to the pool-based bridge.\n     * @param _amount The amount to add.\n     */\n    function addNativeLiquidity(uint256 _amount) external payable nonReentrant whenNotPaused {\n        require(msg.value == _amount, \"Amount mismatch\");\n        require(nativeWrap != address(0), \"Native wrap not set\");\n        require(_amount > minAdd[nativeWrap], \"amount too small\");\n        addseq += 1;\n        IWETH(nativeWrap).deposit{value: _amount}();\n        emit LiquidityAdded(addseq, msg.sender, nativeWrap, _amount);\n    }\n\n    /**\n     * @notice Withdraw funds from the bridge pool.\n     * @param _wdmsg The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _wdmsg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external whenNotPaused {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"WithdrawMsg\"));\n        verifySigs(abi.encodePacked(domain, _wdmsg), _sigs, _signers, _powers);\n        // decode and check wdmsg\n        PbPool.WithdrawMsg memory wdmsg = PbPool.decWithdrawMsg(_wdmsg);\n        // len = 8 + 8 + 20 + 20 + 32 = 88\n        bytes32 wdId = keccak256(\n            abi.encodePacked(wdmsg.chainid, wdmsg.seqnum, wdmsg.receiver, wdmsg.token, wdmsg.amount)\n        );\n        require(withdraws[wdId] == false, \"withdraw already succeeded\");\n        withdraws[wdId] = true;\n        _updateVolume(wdmsg.token, wdmsg.amount);\n        uint256 delayThreshold = delayThresholds[wdmsg.token];\n        if (delayThreshold > 0 && wdmsg.amount > delayThreshold) {\n            _addDelayedTransfer(wdId, wdmsg.receiver, wdmsg.token, wdmsg.amount);\n        } else {\n            _sendToken(wdmsg.receiver, wdmsg.token, wdmsg.amount);\n        }\n        emit WithdrawDone(wdId, wdmsg.seqnum, wdmsg.receiver, wdmsg.token, wdmsg.amount, wdmsg.refid);\n    }\n\n    function executeDelayedTransfer(bytes32 id) external whenNotPaused {\n        delayedTransfer memory transfer = _executeDelayedTransfer(id);\n        _sendToken(transfer.receiver, transfer.token, transfer.amount);\n    }\n\n    function setMinAdd(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\n        require(_tokens.length == _amounts.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            minAdd[_tokens[i]] = _amounts[i];\n            emit MinAddUpdated(_tokens[i], _amounts[i]);\n        }\n    }\n\n    function _sendToken(\n        address _receiver,\n        address _token,\n        uint256 _amount\n    ) internal {\n        if (_token == nativeWrap) {\n            // withdraw then transfer native to receiver\n            IWETH(nativeWrap).withdraw(_amount);\n            (bool sent, ) = _receiver.call{value: _amount, gas: nativeTokenTransferGas}(\"\");\n            require(sent, \"failed to send native token\");\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    // set nativeWrap, for relay requests, if token == nativeWrap, will withdraw first then transfer native to receiver\n    function setWrap(address _weth) external onlyOwner {\n        nativeWrap = _weth;\n    }\n\n    // setNativeTransferGasUsed, native transfer will use this config.\n    function setNativeTokenTransferGas(uint256 _gasUsed) external onlyGovernor {\n        nativeTokenTransferGas = _gasUsed;\n    }\n}\n"
    },
    "contracts/liquidity-bridge/Signers.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../safeguard/Ownable.sol\";\nimport \"../interfaces/ISigsVerifier.sol\";\n\n/**\n * @title Multi-sig verification and management functions for {Bridge}.\n */\ncontract Signers is Ownable, ISigsVerifier {\n    using ECDSA for bytes32;\n\n    bytes32 public ssHash;\n    uint256 public triggerTime; // timestamp when last update was triggered\n\n    // reset can be called by the owner address for emergency recovery\n    uint256 public resetTime;\n    uint256 public noticePeriod; // advance notice period as seconds for reset\n    uint256 constant MAX_INT = 2**256 - 1;\n\n    event SignersUpdated(address[] _signers, uint256[] _powers);\n\n    event ResetNotification(uint256 resetTime);\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers\n     * The sigs must be sorted by signer addresses in ascending order.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public view override {\n        bytes32 h = keccak256(abi.encodePacked(_signers, _powers));\n        require(ssHash == h, \"Mismatch current signers\");\n        _verifySignedPowers(keccak256(_msg).toEthSignedMessageHash(), _sigs, _signers, _powers);\n    }\n\n    /**\n     * @notice Update new signers.\n     * @param _newSigners sorted list of new signers\n     * @param _curPowers powers of new signers\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _curSigners sorted list of current signers\n     * @param _curPowers powers of current signers\n     */\n    function updateSigners(\n        uint256 _triggerTime,\n        address[] calldata _newSigners,\n        uint256[] calldata _newPowers,\n        bytes[] calldata _sigs,\n        address[] calldata _curSigners,\n        uint256[] calldata _curPowers\n    ) external {\n        // use trigger time for nonce protection, must be ascending\n        require(_triggerTime > triggerTime, \"Trigger time is not increasing\");\n        // make sure triggerTime is not too large, as it cannot be decreased once set\n        require(_triggerTime < block.timestamp + 3600, \"Trigger time is too large\");\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"UpdateSigners\"));\n        verifySigs(abi.encodePacked(domain, _triggerTime, _newSigners, _newPowers), _sigs, _curSigners, _curPowers);\n        _updateSigners(_newSigners, _newPowers);\n        triggerTime = _triggerTime;\n    }\n\n    /**\n     * @notice reset signers, only used for init setup and emergency recovery\n     */\n    function resetSigners(address[] calldata _signers, uint256[] calldata _powers) external onlyOwner {\n        require(block.timestamp > resetTime, \"not reach reset time\");\n        resetTime = MAX_INT;\n        _updateSigners(_signers, _powers);\n    }\n\n    function notifyResetSigners() external onlyOwner {\n        resetTime = block.timestamp + noticePeriod;\n        emit ResetNotification(resetTime);\n    }\n\n    function increaseNoticePeriod(uint256 period) external onlyOwner {\n        require(period > noticePeriod, \"notice period can only be increased\");\n        noticePeriod = period;\n    }\n\n    // separate from verifySigs func to avoid \"stack too deep\" issue\n    function _verifySignedPowers(\n        bytes32 _hash,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) private pure {\n        require(_signers.length == _powers.length, \"signers and powers length not match\");\n        uint256 totalPower; // sum of all signer.power\n        for (uint256 i = 0; i < _signers.length; i++) {\n            totalPower += _powers[i];\n        }\n        uint256 quorum = (totalPower * 2) / 3 + 1;\n\n        uint256 signedPower; // sum of signer powers who are in sigs\n        address prev = address(0);\n        uint256 index = 0;\n        for (uint256 i = 0; i < _sigs.length; i++) {\n            address signer = _hash.recover(_sigs[i]);\n            require(signer > prev, \"signers not in ascending order\");\n            prev = signer;\n            // now find match signer add its power\n            while (signer > _signers[index]) {\n                index += 1;\n                require(index < _signers.length, \"signer not found\");\n            }\n            if (signer == _signers[index]) {\n                signedPower += _powers[index];\n            }\n            if (signedPower >= quorum) {\n                // return early to save gas\n                return;\n            }\n        }\n        revert(\"quorum not reached\");\n    }\n\n    function _updateSigners(address[] calldata _signers, uint256[] calldata _powers) private {\n        require(_signers.length == _powers.length, \"signers and powers length not match\");\n        address prev = address(0);\n        for (uint256 i = 0; i < _signers.length; i++) {\n            require(_signers[i] > prev, \"New signers not in ascending order\");\n            prev = _signers[i];\n        }\n        ssHash = keccak256(abi.encodePacked(_signers, _powers));\n        emit SignersUpdated(_signers, _powers);\n    }\n}\n"
    },
    "contracts/safeguard/DelayedTransfer.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./Governor.sol\";\n\nabstract contract DelayedTransfer is Governor {\n    struct delayedTransfer {\n        address receiver;\n        address token;\n        uint256 amount;\n        uint256 timestamp;\n    }\n    mapping(bytes32 => delayedTransfer) public delayedTransfers;\n    mapping(address => uint256) public delayThresholds;\n    uint256 public delayPeriod; // in seconds\n\n    event DelayedTransferAdded(bytes32 id);\n    event DelayedTransferExecuted(bytes32 id, address receiver, address token, uint256 amount);\n\n    event DelayPeriodUpdated(uint256 period);\n    event DelayThresholdUpdated(address token, uint256 threshold);\n\n    function setDelayThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external onlyGovernor {\n        require(_tokens.length == _thresholds.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            delayThresholds[_tokens[i]] = _thresholds[i];\n            emit DelayThresholdUpdated(_tokens[i], _thresholds[i]);\n        }\n    }\n\n    function setDelayPeriod(uint256 _period) external onlyGovernor {\n        delayPeriod = _period;\n        emit DelayPeriodUpdated(_period);\n    }\n\n    function _addDelayedTransfer(\n        bytes32 id,\n        address receiver,\n        address token,\n        uint256 amount\n    ) internal {\n        require(delayedTransfers[id].timestamp == 0, \"delayed transfer already exists\");\n        delayedTransfers[id] = delayedTransfer({\n            receiver: receiver,\n            token: token,\n            amount: amount,\n            timestamp: block.timestamp\n        });\n        emit DelayedTransferAdded(id);\n    }\n\n    // caller needs to do the actual token transfer\n    function _executeDelayedTransfer(bytes32 id) internal returns (delayedTransfer memory) {\n        delayedTransfer memory transfer = delayedTransfers[id];\n        require(transfer.timestamp > 0, \"delayed transfer not exist\");\n        require(block.timestamp > transfer.timestamp + delayPeriod, \"delayed transfer still locked\");\n        delete delayedTransfers[id];\n        emit DelayedTransferExecuted(id, transfer.receiver, transfer.token, transfer.amount);\n        return transfer;\n    }\n}\n"
    },
    "contracts/safeguard/Governor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./Ownable.sol\";\n\nabstract contract Governor is Ownable {\n    mapping(address => bool) public governors;\n\n    event GovernorAdded(address account);\n    event GovernorRemoved(address account);\n\n    modifier onlyGovernor() {\n        require(isGovernor(msg.sender), \"Caller is not governor\");\n        _;\n    }\n\n    constructor() {\n        _addGovernor(msg.sender);\n    }\n\n    function isGovernor(address _account) public view returns (bool) {\n        return governors[_account];\n    }\n\n    function addGovernor(address _account) public onlyOwner {\n        _addGovernor(_account);\n    }\n\n    function removeGovernor(address _account) public onlyOwner {\n        _removeGovernor(_account);\n    }\n\n    function renounceGovernor() public {\n        _removeGovernor(msg.sender);\n    }\n\n    function _addGovernor(address _account) private {\n        require(!isGovernor(_account), \"Account is already governor\");\n        governors[_account] = true;\n        emit GovernorAdded(_account);\n    }\n\n    function _removeGovernor(address _account) private {\n        require(isGovernor(_account), \"Account is not governor\");\n        governors[_account] = false;\n        emit GovernorRemoved(_account);\n    }\n}\n"
    },
    "contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/safeguard/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./Ownable.sol\";\n\nabstract contract Pauser is Ownable, Pausable {\n    mapping(address => bool) public pausers;\n\n    event PauserAdded(address account);\n    event PauserRemoved(address account);\n\n    constructor() {\n        _addPauser(msg.sender);\n    }\n\n    modifier onlyPauser() {\n        require(isPauser(msg.sender), \"Caller is not pauser\");\n        _;\n    }\n\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n    function isPauser(address account) public view returns (bool) {\n        return pausers[account];\n    }\n\n    function addPauser(address account) public onlyOwner {\n        _addPauser(account);\n    }\n\n    function removePauser(address account) public onlyOwner {\n        _removePauser(account);\n    }\n\n    function renouncePauser() public {\n        _removePauser(msg.sender);\n    }\n\n    function _addPauser(address account) private {\n        require(!isPauser(account), \"Account is already pauser\");\n        pausers[account] = true;\n        emit PauserAdded(account);\n    }\n\n    function _removePauser(address account) private {\n        require(isPauser(account), \"Account is not pauser\");\n        pausers[account] = false;\n        emit PauserRemoved(account);\n    }\n}\n"
    },
    "contracts/safeguard/VolumeControl.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.17;\n\nimport \"./Governor.sol\";\n\nabstract contract VolumeControl is Governor {\n    uint256 public epochLength; // seconds\n    mapping(address => uint256) public epochVolumes; // key is token\n    mapping(address => uint256) public epochVolumeCaps; // key is token\n    mapping(address => uint256) public lastOpTimestamps; // key is token\n\n    event EpochLengthUpdated(uint256 length);\n    event EpochVolumeUpdated(address token, uint256 cap);\n\n    function setEpochLength(uint256 _length) external onlyGovernor {\n        epochLength = _length;\n        emit EpochLengthUpdated(_length);\n    }\n\n    function setEpochVolumeCaps(address[] calldata _tokens, uint256[] calldata _caps) external onlyGovernor {\n        require(_tokens.length == _caps.length, \"length mismatch\");\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            epochVolumeCaps[_tokens[i]] = _caps[i];\n            emit EpochVolumeUpdated(_tokens[i], _caps[i]);\n        }\n    }\n\n    function _updateVolume(address _token, uint256 _amount) internal {\n        if (epochLength == 0) {\n            return;\n        }\n        uint256 cap = epochVolumeCaps[_token];\n        if (cap == 0) {\n            return;\n        }\n        uint256 volume = epochVolumes[_token];\n        uint256 timestamp = block.timestamp;\n        uint256 epochStartTime = (timestamp / epochLength) * epochLength;\n        if (lastOpTimestamps[_token] < epochStartTime) {\n            volume = _amount;\n        } else {\n            volume += _amount;\n        }\n        require(volume <= cap, \"volume exceeds cap\");\n        epochVolumes[_token] = volume;\n        lastOpTimestamps[_token] = timestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}