{
  "address": "0x7f27352D5F83Db87a5A3E00f4B07Cc2138D8ee52",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_celerTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_proposalDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_votingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unbondingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBondedValidators",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minValidatorTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minSelfDelegation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_advanceNoticePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorBondInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlashFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "tokenDiff",
          "type": "int256"
        }
      ],
      "name": "DelegationUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashAmt",
          "type": "uint256"
        }
      ],
      "name": "Slash",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SlashAmtCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "delAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Undelegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "ValidatorNotice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "valAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum DataTypes.ValidatorStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "ValidatorStatusUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistedAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WhitelistedRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CELER_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondedValAddrs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectForfeiture",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        }
      ],
      "name": "completeUndelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        }
      ],
      "name": "confirmUnbondedValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "drainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forfeiture",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondedValidatorNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondedValidatorsTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "valAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokens",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.ValidatorTokens[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delAddr",
          "type": "address"
        }
      ],
      "name": "getDelegatorInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "valAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shares",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "creationBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct DataTypes.Undelegation[]",
              "name": "undelegations",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "undelegationTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawableUndelegationTokens",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.DelegatorInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.ParamName",
          "name": "_name",
          "type": "uint8"
        }
      ],
      "name": "getParamValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuorumTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        }
      ],
      "name": "getValidatorStatus",
      "outputs": [
        {
          "internalType": "enum DataTypes.ValidatorStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        }
      ],
      "name": "getValidatorTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_checkSelfDelegation",
          "type": "bool"
        }
      ],
      "name": "hasMinRequiredTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minSelfDelegation",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_commissionRate",
          "type": "uint64"
        }
      ],
      "name": "initializeValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "isBondedValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextBondBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.ParamName",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "params",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setGovContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSlashFactor",
          "type": "uint256"
        }
      ],
      "name": "setMaxSlashFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum DataTypes.ParamName",
          "name": "_name",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setParamValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "setRewardContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_whitelistEnabled",
          "type": "bool"
        }
      ],
      "name": "setWhitelistEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "signerVals",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_slashRequest",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slashNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "undelegateShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "name": "undelegateTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_newRate",
          "type": "uint64"
        }
      ],
      "name": "updateCommissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minSelfDelegation",
          "type": "uint256"
        }
      ],
      "name": "updateMinSelfDelegation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "updateValidatorSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "valAddrs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_valAddr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_key",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "validatorNotice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "enum DataTypes.ValidatorStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "undelegationTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "undelegationShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minSelfDelegation",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "bondBlock",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "unbondBlock",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "commissionRate",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_msg",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        }
      ],
      "name": "verifySignatures",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_msg",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "name": "verifySigs",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf780e0e651166349ca8a8d33450b953cf49e986f3d2ebc326a2b56a6315428f4",
  "receipt": {
    "to": null,
    "from": "0x1b9dFC56e38b0F92448659C114e2347Bd803911c",
    "contractAddress": "0x7f27352D5F83Db87a5A3E00f4B07Cc2138D8ee52",
    "transactionIndex": 0,
    "gasUsed": "5470115",
    "logsBloom": "0x
    "blockHash": "0xdfde993f142ea777a6dd84ad458870588d2b7ba2685ae506e39305095fd20a00",
    "transactionHash": "0xf780e0e651166349ca8a8d33450b953cf49e986f3d2ebc326a2b56a6315428f4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14988857,
        "transactionHash": "0xf780e0e651166349ca8a8d33450b953cf49e986f3d2ebc326a2b56a6315428f4",
        "address": "0x7f27352D5F83Db87a5A3E00f4B07Cc2138D8ee52",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001b9dfc56e38b0f92448659c114e2347bd803911c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdfde993f142ea777a6dd84ad458870588d2b7ba2685ae506e39305095fd20a00"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14988857,
        "transactionHash": "0xf780e0e651166349ca8a8d33450b953cf49e986f3d2ebc326a2b56a6315428f4",
        "address": "0x7f27352D5F83Db87a5A3E00f4B07Cc2138D8ee52",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x0000000000000000000000001b9dfc56e38b0f92448659c114e2347bd803911c",
        "logIndex": 1,
        "blockHash": "0xdfde993f142ea777a6dd84ad458870588d2b7ba2685ae506e39305095fd20a00"
      }
    ],
    "blockNumber": 14988857,
    "cumulativeGasUsed": "5470115",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5D3c0F4cA5EE99f8E8F59Ff9A5fAb04F6a7e007f",
    "1000000000000000000",
    "90",
    "15",
    "5",
    "1000000000000000000",
    "1000000000000000000",
    "30",
    "0",
    "100000"
  ],
  "solcInputHash": "bb7477b53756a76aabf406494035deb5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_celerTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_proposalDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unbondingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBondedValidators\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minValidatorTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSelfDelegation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_advanceNoticePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorBondInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlashFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tokenDiff\",\"type\":\"int256\"}],\"name\":\"DelegationUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashAmt\",\"type\":\"uint256\"}],\"name\":\"Slash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SlashAmtCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Undelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ValidatorNotice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum DataTypes.ValidatorStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"ValidatorStatusUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CELER_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondedValAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectForfeiture\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"}],\"name\":\"completeUndelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"}],\"name\":\"confirmUnbondedValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forfeiture\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondedValidatorNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondedValidatorsTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.ValidatorTokens[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delAddr\",\"type\":\"address\"}],\"name\":\"getDelegatorInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.Undelegation[]\",\"name\":\"undelegations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"undelegationTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableUndelegationTokens\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DelegatorInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"_name\",\"type\":\"uint8\"}],\"name\":\"getParamValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuorumTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"}],\"name\":\"getValidatorStatus\",\"outputs\":[{\"internalType\":\"enum DataTypes.ValidatorStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"}],\"name\":\"getValidatorTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_checkSelfDelegation\",\"type\":\"bool\"}],\"name\":\"hasMinRequiredTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minSelfDelegation\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_commissionRate\",\"type\":\"uint64\"}],\"name\":\"initializeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isBondedValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBondBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"params\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setGovContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSlashFactor\",\"type\":\"uint256\"}],\"name\":\"setMaxSlashFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum DataTypes.ParamName\",\"name\":\"_name\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setParamValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setRewardContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_whitelistEnabled\",\"type\":\"bool\"}],\"name\":\"setWhitelistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signerVals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_slashRequest\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"undelegateShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"undelegateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_newRate\",\"type\":\"uint64\"}],\"name\":\"updateCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSelfDelegation\",\"type\":\"uint256\"}],\"name\":\"updateMinSelfDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"updateValidatorSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"valAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"validatorNotice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"enum DataTypes.ValidatorStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"undelegationTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"undelegationShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSelfDelegation\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"bondBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unbondBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"commissionRate\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"}],\"name\":\"verifySignatures\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"name\":\"verifySigs\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bondValidator()\":{\"details\":\"caller can be either validator owner or signer\"},\"completeUndelegate(address)\":{\"params\":{\"_valAddr\":\"the address of the validator\"}},\"confirmUnbondedValidator(address)\":{\"params\":{\"_valAddr\":\"the address of the validator\"}},\"constructor\":{\"params\":{\"_advanceNoticePeriod\":\"the wait time after the announcement and prior to the effective date of an update\",\"_celerTokenAddress\":\"address of Celer Token Contract\",\"_maxBondedValidators\":\"the maximum number of bonded validators\",\"_maxSlashFactor\":\"maximal slashing factor (1e6 = 100%)\",\"_minSelfDelegation\":\"minimal amount of self-delegated tokens\",\"_minValidatorTokens\":\"the global minimum token amount requirement for bonded validator\",\"_proposalDeposit\":\"required deposit amount for a governance proposal\",\"_unbondingPeriod\":\"the locking time for funds locked before withdrawn\",\"_validatorBondInterval\":\"min interval between bondValidator\",\"_votingPeriod\":\"voting timeout for a governance proposal\"}},\"delegate(address,uint256)\":{\"details\":\"Minimal amount per delegate operation is 1 CELR\",\"params\":{\"_tokens\":\"the amount of delegated CELR tokens\",\"_valAddr\":\"validator to delegate\"}},\"drainToken(uint256)\":{\"details\":\"emergency use only\",\"params\":{\"_amount\":\"drained token amount\"}},\"getBondedValidatorNum()\":{\"returns\":{\"_0\":\"the number of bonded validators\"}},\"getBondedValidatorsTokens()\":{\"returns\":{\"_0\":\"addresses and token amounts of bonded validators\"}},\"getDelegatorInfo(address,address)\":{\"params\":{\"_delAddr\":\"the address of the delegator\",\"_valAddr\":\"the address of the validator\"},\"returns\":{\"_0\":\"DelegatorInfo from the given validator\"}},\"getParamValue(uint8)\":{\"params\":{\"_name\":\"the key of this parameter\"},\"returns\":{\"_0\":\"the value of this parameter\"}},\"getQuorumTokens()\":{\"returns\":{\"_0\":\"the quorum amount\"}},\"getValidatorNum()\":{\"returns\":{\"_0\":\"the number of validators\"}},\"getValidatorStatus(address)\":{\"params\":{\"_valAddr\":\"the address of the validator\"},\"returns\":{\"_0\":\"Validator status\"}},\"getValidatorTokens(address)\":{\"params\":{\"_valAddr\":\"the address of the validator\"},\"returns\":{\"_0\":\"Validator token amount\"}},\"hasMinRequiredTokens(address,bool)\":{\"params\":{\"_checkSelfDelegation\":\"check self delegation\",\"_valAddr\":\"the address of the validator\"}},\"initializeValidator(address,uint256,uint64)\":{\"params\":{\"_commissionRate\":\"the self-declaimed commission rate\",\"_minSelfDelegation\":\"minimal amount of tokens staked by the validator itself\",\"_signer\":\"signer address\"}},\"isBondedValidator(address)\":{\"params\":{\"_addr\":\"the address to check\"},\"returns\":{\"_0\":\"the given address is a validator or not\"}},\"isWhitelisted(address)\":{\"returns\":{\"_0\":\"is account whitelisted\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"slash(bytes,bytes[])\":{\"params\":{\"_sigs\":\"list of validator signatures\",\"_slashRequest\":\"slash request bytes coded in protobuf\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"undelegateShares(address,uint256)\":{\"details\":\"Tokens are delegated by the msgSender to the validator\",\"params\":{\"_shares\":\"undelegate shares\",\"_valAddr\":\"the address of the validator\"}},\"undelegateTokens(address,uint256)\":{\"details\":\"Tokens are delegated by the msgSender to the validator\",\"params\":{\"_tokens\":\"undelegate tokens\",\"_valAddr\":\"the address of the validator\"}},\"updateCommissionRate(uint64)\":{\"params\":{\"_newRate\":\"new commission rate\"}},\"updateMinSelfDelegation(uint256)\":{\"params\":{\"_minSelfDelegation\":\"minimal amount of tokens staked by the validator itself\"}},\"updateValidatorSigner(address)\":{\"params\":{\"_signer\":\"signer address\"}},\"verifySignatures(bytes,bytes[])\":{\"params\":{\"_msg\":\"signed message\",\"_sigs\":\"list of validator signatures\"}},\"verifySigs(bytes,bytes[],address[],uint256[])\":{\"params\":{\"_msg\":\"signed message\",\"_sigs\":\"the list of signatures\"}}},\"title\":\"A Staking contract shared by all external sidechains and apps\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelisted(address)\":{\"notice\":\"Add an account to whitelist\"},\"bondValidator()\":{\"notice\":\"Candidate claims to become a bonded validator\"},\"completeUndelegate(address)\":{\"notice\":\"Complete pending undelegations from a validator\"},\"confirmUnbondedValidator(address)\":{\"notice\":\"Confirm validator status from Unbonding to Unbonded\"},\"constructor\":{\"notice\":\"Staking constructor\"},\"delegate(address,uint256)\":{\"notice\":\"Delegate CELR tokens to a validator\"},\"drainToken(uint256)\":{\"notice\":\"Owner drains tokens when the contract is paused\"},\"getBondedValidatorNum()\":{\"notice\":\"Get the number of bonded validators\"},\"getDelegatorInfo(address,address)\":{\"notice\":\"Get the delegator info of a specific validator\"},\"getParamValue(uint8)\":{\"notice\":\"Get the value of a specific uint parameter\"},\"getQuorumTokens()\":{\"notice\":\"Get quorum amount of tokens\"},\"getValidatorNum()\":{\"notice\":\"Get the number of validators\"},\"getValidatorStatus(address)\":{\"notice\":\"Get validator info\"},\"getValidatorTokens(address)\":{\"notice\":\"Get validator info\"},\"hasMinRequiredTokens(address,bool)\":{\"notice\":\"Check if min token requirements are met\"},\"initializeValidator(address,uint256,uint64)\":{\"notice\":\"Initialize a validator candidate\"},\"isBondedValidator(address)\":{\"notice\":\"Check the given address is a validator or not\"},\"removeWhitelisted(address)\":{\"notice\":\"Remove an account from whitelist\"},\"setMaxSlashFactor(uint256)\":{\"notice\":\"Set max slash factor\"},\"setWhitelistEnabled(bool)\":{\"notice\":\"Set whitelistEnabled\"},\"slash(bytes,bytes[])\":{\"notice\":\"Slash a validator and its delegators\"},\"undelegateShares(address,uint256)\":{\"notice\":\"Undelegate shares from a validator\"},\"undelegateTokens(address,uint256)\":{\"notice\":\"Undelegate shares from a validator\"},\"updateCommissionRate(uint64)\":{\"notice\":\"Update commission rate\"},\"updateMinSelfDelegation(uint256)\":{\"notice\":\"Update minimal self delegation value\"},\"updateValidatorSigner(address)\":{\"notice\":\"Update validator signer address\"},\"validatorNotice(address,string,bytes)\":{\"notice\":\"Validator notice event, could be triggered by anyone\"},\"verifySignatures(bytes,bytes[])\":{\"notice\":\"Validate if a message is signed by quorum tokens\"},\"verifySigs(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Verifies that a message is signed by a quorum among the validators.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {DataTypes as dt} from \\\"./libraries/DataTypes.sol\\\";\\nimport \\\"./interfaces/ISigsVerifier.sol\\\";\\nimport \\\"./libraries/PbStaking.sol\\\";\\nimport \\\"./safeguard/Pauser.sol\\\";\\nimport \\\"./safeguard/Whitelist.sol\\\";\\n\\n/**\\n * @title A Staking contract shared by all external sidechains and apps\\n */\\ncontract Staking is ISigsVerifier, Pauser, Whitelist {\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    IERC20 public immutable CELER_TOKEN;\\n\\n    uint256 public bondedTokens;\\n    uint256 public nextBondBlock;\\n    address[] public valAddrs;\\n    address[] public bondedValAddrs;\\n    mapping(address => dt.Validator) public validators; // key is valAddr\\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\\n    mapping(uint256 => bool) public slashNonces;\\n\\n    mapping(dt.ParamName => uint256) public params;\\n    address public govContract;\\n    address public rewardContract;\\n    uint256 public forfeiture;\\n\\n    /* Events */\\n    event ValidatorNotice(address indexed valAddr, string key, bytes data, address from);\\n    event ValidatorStatusUpdate(address indexed valAddr, dt.ValidatorStatus indexed status);\\n    event DelegationUpdate(\\n        address indexed valAddr,\\n        address indexed delAddr,\\n        uint256 valTokens,\\n        uint256 delShares,\\n        int256 tokenDiff\\n    );\\n    event Undelegated(address indexed valAddr, address indexed delAddr, uint256 amount);\\n    event Slash(address indexed valAddr, uint64 nonce, uint256 slashAmt);\\n    event SlashAmtCollected(address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Staking constructor\\n     * @param _celerTokenAddress address of Celer Token Contract\\n     * @param _proposalDeposit required deposit amount for a governance proposal\\n     * @param _votingPeriod voting timeout for a governance proposal\\n     * @param _unbondingPeriod the locking time for funds locked before withdrawn\\n     * @param _maxBondedValidators the maximum number of bonded validators\\n     * @param _minValidatorTokens the global minimum token amount requirement for bonded validator\\n     * @param _minSelfDelegation minimal amount of self-delegated tokens\\n     * @param _advanceNoticePeriod the wait time after the announcement and prior to the effective date of an update\\n     * @param _validatorBondInterval min interval between bondValidator\\n     * @param _maxSlashFactor maximal slashing factor (1e6 = 100%)\\n     */\\n    constructor(\\n        address _celerTokenAddress,\\n        uint256 _proposalDeposit,\\n        uint256 _votingPeriod,\\n        uint256 _unbondingPeriod,\\n        uint256 _maxBondedValidators,\\n        uint256 _minValidatorTokens,\\n        uint256 _minSelfDelegation,\\n        uint256 _advanceNoticePeriod,\\n        uint256 _validatorBondInterval,\\n        uint256 _maxSlashFactor\\n    ) {\\n        CELER_TOKEN = IERC20(_celerTokenAddress);\\n\\n        params[dt.ParamName.ProposalDeposit] = _proposalDeposit;\\n        params[dt.ParamName.VotingPeriod] = _votingPeriod;\\n        params[dt.ParamName.UnbondingPeriod] = _unbondingPeriod;\\n        params[dt.ParamName.MaxBondedValidators] = _maxBondedValidators;\\n        params[dt.ParamName.MinValidatorTokens] = _minValidatorTokens;\\n        params[dt.ParamName.MinSelfDelegation] = _minSelfDelegation;\\n        params[dt.ParamName.AdvanceNoticePeriod] = _advanceNoticePeriod;\\n        params[dt.ParamName.ValidatorBondInterval] = _validatorBondInterval;\\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\\n    }\\n\\n    receive() external payable {}\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    /**\\n     * @notice Initialize a validator candidate\\n     * @param _signer signer address\\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\\n     * @param _commissionRate the self-declaimed commission rate\\n     */\\n    function initializeValidator(\\n        address _signer,\\n        uint256 _minSelfDelegation,\\n        uint64 _commissionRate\\n    ) external whenNotPaused onlyWhitelisted {\\n        address valAddr = msg.sender;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(validator.status == dt.ValidatorStatus.Null, \\\"Validator is initialized\\\");\\n        require(validators[_signer].status == dt.ValidatorStatus.Null, \\\"Signer is other validator\\\");\\n        require(signerVals[valAddr] == address(0), \\\"Validator is other signer\\\");\\n        require(signerVals[_signer] == address(0), \\\"Signer already used\\\");\\n        require(_commissionRate <= dt.COMMISSION_RATE_BASE, \\\"Invalid commission rate\\\");\\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \\\"Insufficient min self delegation\\\");\\n        validator.signer = _signer;\\n        validator.status = dt.ValidatorStatus.Unbonded;\\n        validator.minSelfDelegation = _minSelfDelegation;\\n        validator.commissionRate = _commissionRate;\\n        valAddrs.push(valAddr);\\n        signerVals[_signer] = valAddr;\\n\\n        delegate(valAddr, _minSelfDelegation);\\n        emit ValidatorNotice(valAddr, \\\"init\\\", abi.encode(_signer, _minSelfDelegation, _commissionRate), address(0));\\n    }\\n\\n    /**\\n     * @notice Update validator signer address\\n     * @param _signer signer address\\n     */\\n    function updateValidatorSigner(address _signer) external {\\n        address valAddr = msg.sender;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator not initialized\\\");\\n        require(signerVals[_signer] == address(0), \\\"Signer already used\\\");\\n        if (_signer != valAddr) {\\n            require(validators[_signer].status == dt.ValidatorStatus.Null, \\\"Signer is other validator\\\");\\n        }\\n\\n        delete signerVals[validator.signer];\\n        validator.signer = _signer;\\n        signerVals[_signer] = valAddr;\\n\\n        emit ValidatorNotice(valAddr, \\\"signer\\\", abi.encode(_signer), address(0));\\n    }\\n\\n    /**\\n     * @notice Candidate claims to become a bonded validator\\n     * @dev caller can be either validator owner or signer\\n     */\\n    function bondValidator() external {\\n        address valAddr = msg.sender;\\n        if (signerVals[msg.sender] != address(0)) {\\n            valAddr = signerVals[msg.sender];\\n        }\\n        dt.Validator storage validator = validators[valAddr];\\n        require(\\n            validator.status == dt.ValidatorStatus.Unbonded || validator.status == dt.ValidatorStatus.Unbonding,\\n            \\\"Invalid validator status\\\"\\n        );\\n        require(block.number >= validator.bondBlock, \\\"Bond block not reached\\\");\\n        require(block.number >= nextBondBlock, \\\"Too frequent validator bond\\\");\\n        nextBondBlock = block.number + params[dt.ParamName.ValidatorBondInterval];\\n        require(hasMinRequiredTokens(valAddr, true), \\\"Not have min tokens\\\");\\n\\n        uint256 maxBondedValidators = params[dt.ParamName.MaxBondedValidators];\\n        // if the number of validators has not reached the max_validator_num,\\n        // add validator directly\\n        if (bondedValAddrs.length < maxBondedValidators) {\\n            _bondValidator(valAddr);\\n            _decentralizationCheck(validator.tokens);\\n            return;\\n        }\\n        // if the number of validators has already reached the max_validator_num,\\n        // add validator only if its tokens is more than the current least bonded validator tokens\\n        uint256 minTokens = dt.MAX_INT;\\n        uint256 minTokensIndex;\\n        for (uint256 i = 0; i < maxBondedValidators; i++) {\\n            if (validators[bondedValAddrs[i]].tokens < minTokens) {\\n                minTokensIndex = i;\\n                minTokens = validators[bondedValAddrs[i]].tokens;\\n                if (minTokens == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n        require(validator.tokens > minTokens, \\\"Insufficient tokens\\\");\\n        _replaceBondedValidator(valAddr, minTokensIndex);\\n        _decentralizationCheck(validator.tokens);\\n    }\\n\\n    /**\\n     * @notice Confirm validator status from Unbonding to Unbonded\\n     * @param _valAddr the address of the validator\\n     */\\n    function confirmUnbondedValidator(address _valAddr) external {\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status == dt.ValidatorStatus.Unbonding, \\\"Validator not unbonding\\\");\\n        require(block.number >= validator.unbondBlock, \\\"Unbond block not reached\\\");\\n\\n        validator.status = dt.ValidatorStatus.Unbonded;\\n        delete validator.unbondBlock;\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonded);\\n    }\\n\\n    /**\\n     * @notice Delegate CELR tokens to a validator\\n     * @dev Minimal amount per delegate operation is 1 CELR\\n     * @param _valAddr validator to delegate\\n     * @param _tokens the amount of delegated CELR tokens\\n     */\\n    function delegate(address _valAddr, uint256 _tokens) public whenNotPaused {\\n        address delAddr = msg.sender;\\n        require(_tokens >= dt.CELR_DECIMAL, \\\"Minimal amount is 1 CELR\\\");\\n\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\\n\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\n        delegator.shares += shares;\\n        validator.shares += shares;\\n        validator.tokens += _tokens;\\n        if (validator.status == dt.ValidatorStatus.Bonded) {\\n            bondedTokens += _tokens;\\n            _decentralizationCheck(validator.tokens);\\n        }\\n        CELER_TOKEN.safeTransferFrom(delAddr, address(this), _tokens);\\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, int256(_tokens));\\n    }\\n\\n    /**\\n     * @notice Undelegate shares from a validator\\n     * @dev Tokens are delegated by the msgSender to the validator\\n     * @param _valAddr the address of the validator\\n     * @param _shares undelegate shares\\n     */\\n    function undelegateShares(address _valAddr, uint256 _shares) external {\\n        require(_shares >= dt.CELR_DECIMAL, \\\"Minimal amount is 1 share\\\");\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        uint256 tokens = _shareToToken(_shares, validator.tokens, validator.shares);\\n        _undelegate(validator, _valAddr, tokens, _shares);\\n    }\\n\\n    /**\\n     * @notice Undelegate shares from a validator\\n     * @dev Tokens are delegated by the msgSender to the validator\\n     * @param _valAddr the address of the validator\\n     * @param _tokens undelegate tokens\\n     */\\n    function undelegateTokens(address _valAddr, uint256 _tokens) external {\\n        require(_tokens >= dt.CELR_DECIMAL, \\\"Minimal amount is 1 CELR\\\");\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\\n        _undelegate(validator, _valAddr, _tokens, shares);\\n    }\\n\\n    /**\\n     * @notice Complete pending undelegations from a validator\\n     * @param _valAddr the address of the validator\\n     */\\n    function completeUndelegate(address _valAddr) external {\\n        address delAddr = msg.sender;\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\n\\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\\n        // for all pending undelegations\\n        uint32 i;\\n        uint256 undelegationShares;\\n        for (i = delegator.undelegations.head; i < delegator.undelegations.tail; i++) {\\n            if (isUnbonded || delegator.undelegations.queue[i].creationBlock + unbondingPeriod <= block.number) {\\n                // complete undelegation when the validator becomes unbonded or\\n                // the unbondingPeriod for the pending undelegation is up.\\n                undelegationShares += delegator.undelegations.queue[i].shares;\\n                delete delegator.undelegations.queue[i];\\n                continue;\\n            }\\n            break;\\n        }\\n        delegator.undelegations.head = i;\\n\\n        require(undelegationShares > 0, \\\"No undelegation ready to be completed\\\");\\n        uint256 tokens = _shareToToken(undelegationShares, validator.undelegationTokens, validator.undelegationShares);\\n        validator.undelegationShares -= undelegationShares;\\n        validator.undelegationTokens -= tokens;\\n        CELER_TOKEN.safeTransfer(delAddr, tokens);\\n        emit Undelegated(_valAddr, delAddr, tokens);\\n    }\\n\\n    /**\\n     * @notice Update commission rate\\n     * @param _newRate new commission rate\\n     */\\n    function updateCommissionRate(uint64 _newRate) external {\\n        address valAddr = msg.sender;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        require(_newRate <= dt.COMMISSION_RATE_BASE, \\\"Invalid new rate\\\");\\n        validator.commissionRate = _newRate;\\n        emit ValidatorNotice(valAddr, \\\"commission\\\", abi.encode(_newRate), address(0));\\n    }\\n\\n    /**\\n     * @notice Update minimal self delegation value\\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\\n     */\\n    function updateMinSelfDelegation(uint256 _minSelfDelegation) external {\\n        address valAddr = msg.sender;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \\\"Insufficient min self delegation\\\");\\n        if (_minSelfDelegation < validator.minSelfDelegation) {\\n            require(validator.status != dt.ValidatorStatus.Bonded, \\\"Validator is bonded\\\");\\n            validator.bondBlock = uint64(block.number + params[dt.ParamName.AdvanceNoticePeriod]);\\n        }\\n        validator.minSelfDelegation = _minSelfDelegation;\\n        emit ValidatorNotice(valAddr, \\\"min-self-delegation\\\", abi.encode(_minSelfDelegation), address(0));\\n    }\\n\\n    /**\\n     * @notice Slash a validator and its delegators\\n     * @param _slashRequest slash request bytes coded in protobuf\\n     * @param _sigs list of validator signatures\\n     */\\n    function slash(bytes calldata _slashRequest, bytes[] calldata _sigs) external whenNotPaused {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Slash\\\"));\\n        verifySignatures(abi.encodePacked(domain, _slashRequest), _sigs);\\n\\n        PbStaking.Slash memory request = PbStaking.decSlash(_slashRequest);\\n        require(block.timestamp < request.expireTime, \\\"Slash expired\\\");\\n        require(request.slashFactor <= dt.SLASH_FACTOR_DECIMAL, \\\"Invalid slash factor\\\");\\n        require(request.slashFactor <= params[dt.ParamName.MaxSlashFactor], \\\"Exceed max slash factor\\\");\\n        require(!slashNonces[request.nonce], \\\"Used slash nonce\\\");\\n        slashNonces[request.nonce] = true;\\n\\n        address valAddr = request.validator;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(\\n            validator.status == dt.ValidatorStatus.Bonded || validator.status == dt.ValidatorStatus.Unbonding,\\n            \\\"Invalid validator status\\\"\\n        );\\n\\n        // slash delegated tokens\\n        uint256 slashAmt = (validator.tokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\\n        validator.tokens -= slashAmt;\\n        if (validator.status == dt.ValidatorStatus.Bonded) {\\n            bondedTokens -= slashAmt;\\n            if (request.jailPeriod > 0 || !hasMinRequiredTokens(valAddr, true)) {\\n                _unbondValidator(valAddr);\\n            }\\n        }\\n        if (validator.status == dt.ValidatorStatus.Unbonding && request.jailPeriod > 0) {\\n            validator.bondBlock = uint64(block.number + request.jailPeriod);\\n        }\\n        emit DelegationUpdate(valAddr, address(0), validator.tokens, 0, -int256(slashAmt));\\n\\n        // slash pending undelegations\\n        uint256 slashUndelegation = (validator.undelegationTokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\\n        validator.undelegationTokens -= slashUndelegation;\\n        slashAmt += slashUndelegation;\\n\\n        uint256 collectAmt;\\n        for (uint256 i = 0; i < request.collectors.length; i++) {\\n            PbStaking.AcctAmtPair memory collector = request.collectors[i];\\n            if (collectAmt + collector.amount > slashAmt) {\\n                collector.amount = slashAmt - collectAmt;\\n            }\\n            if (collector.amount > 0) {\\n                collectAmt += collector.amount;\\n                if (collector.account == address(0)) {\\n                    CELER_TOKEN.safeTransfer(msg.sender, collector.amount);\\n                    emit SlashAmtCollected(msg.sender, collector.amount);\\n                } else {\\n                    CELER_TOKEN.safeTransfer(collector.account, collector.amount);\\n                    emit SlashAmtCollected(collector.account, collector.amount);\\n                }\\n            }\\n        }\\n        forfeiture += slashAmt - collectAmt;\\n        emit Slash(valAddr, request.nonce, slashAmt);\\n    }\\n\\n    function collectForfeiture() external {\\n        require(forfeiture > 0, \\\"Nothing to collect\\\");\\n        CELER_TOKEN.safeTransfer(rewardContract, forfeiture);\\n        forfeiture = 0;\\n    }\\n\\n    /**\\n     * @notice Validator notice event, could be triggered by anyone\\n     */\\n    function validatorNotice(\\n        address _valAddr,\\n        string calldata _key,\\n        bytes calldata _data\\n    ) external {\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        emit ValidatorNotice(_valAddr, _key, _data, msg.sender);\\n    }\\n\\n    function setParamValue(dt.ParamName _name, uint256 _value) external {\\n        require(msg.sender == govContract, \\\"Caller is not gov contract\\\");\\n        if (_name == dt.ParamName.MaxBondedValidators) {\\n            require(bondedValAddrs.length <= _value, \\\"invalid value\\\");\\n        }\\n        params[_name] = _value;\\n    }\\n\\n    function setGovContract(address _addr) external onlyOwner {\\n        govContract = _addr;\\n    }\\n\\n    function setRewardContract(address _addr) external onlyOwner {\\n        rewardContract = _addr;\\n    }\\n\\n    /**\\n     * @notice Set max slash factor\\n     */\\n    function setMaxSlashFactor(uint256 _maxSlashFactor) external onlyOwner {\\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\\n    }\\n\\n    /**\\n     * @notice Owner drains tokens when the contract is paused\\n     * @dev emergency use only\\n     * @param _amount drained token amount\\n     */\\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\\n        CELER_TOKEN.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**************************\\n     *  Public View Functions *\\n     **************************/\\n\\n    /**\\n     * @notice Validate if a message is signed by quorum tokens\\n     * @param _msg signed message\\n     * @param _sigs list of validator signatures\\n     */\\n    function verifySignatures(bytes memory _msg, bytes[] memory _sigs) public view returns (bool) {\\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\\n        uint256 signedTokens;\\n        address prev = address(0);\\n        uint256 quorum = getQuorumTokens();\\n        for (uint256 i = 0; i < _sigs.length; i++) {\\n            address signer = hash.recover(_sigs[i]);\\n            require(signer > prev, \\\"Signers not in ascending order\\\");\\n            prev = signer;\\n            dt.Validator storage validator = validators[signerVals[signer]];\\n            if (validator.status != dt.ValidatorStatus.Bonded) {\\n                continue;\\n            }\\n            signedTokens += validator.tokens;\\n            if (signedTokens >= quorum) {\\n                return true;\\n            }\\n        }\\n        revert(\\\"Quorum not reached\\\");\\n    }\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the validators.\\n     * @param _msg signed message\\n     * @param _sigs the list of signatures\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata,\\n        uint256[] calldata\\n    ) public view override {\\n        require(verifySignatures(_msg, _sigs), \\\"Failed to verify sigs\\\");\\n    }\\n\\n    /**\\n     * @notice Get quorum amount of tokens\\n     * @return the quorum amount\\n     */\\n    function getQuorumTokens() public view returns (uint256) {\\n        return (bondedTokens * 2) / 3 + 1;\\n    }\\n\\n    /**\\n     * @notice Get validator info\\n     * @param _valAddr the address of the validator\\n     * @return Validator token amount\\n     */\\n    function getValidatorTokens(address _valAddr) public view returns (uint256) {\\n        return validators[_valAddr].tokens;\\n    }\\n\\n    /**\\n     * @notice Get validator info\\n     * @param _valAddr the address of the validator\\n     * @return Validator status\\n     */\\n    function getValidatorStatus(address _valAddr) public view returns (dt.ValidatorStatus) {\\n        return validators[_valAddr].status;\\n    }\\n\\n    /**\\n     * @notice Check the given address is a validator or not\\n     * @param _addr the address to check\\n     * @return the given address is a validator or not\\n     */\\n    function isBondedValidator(address _addr) public view returns (bool) {\\n        return validators[_addr].status == dt.ValidatorStatus.Bonded;\\n    }\\n\\n    /**\\n     * @notice Get the number of validators\\n     * @return the number of validators\\n     */\\n    function getValidatorNum() public view returns (uint256) {\\n        return valAddrs.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of bonded validators\\n     * @return the number of bonded validators\\n     */\\n    function getBondedValidatorNum() public view returns (uint256) {\\n        return bondedValAddrs.length;\\n    }\\n\\n    /**\\n     * @return addresses and token amounts of bonded validators\\n     */\\n    function getBondedValidatorsTokens() public view returns (dt.ValidatorTokens[] memory) {\\n        dt.ValidatorTokens[] memory infos = new dt.ValidatorTokens[](bondedValAddrs.length);\\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\\n            address valAddr = bondedValAddrs[i];\\n            infos[i] = dt.ValidatorTokens(valAddr, validators[valAddr].tokens);\\n        }\\n        return infos;\\n    }\\n\\n    /**\\n     * @notice Check if min token requirements are met\\n     * @param _valAddr the address of the validator\\n     * @param _checkSelfDelegation check self delegation\\n     */\\n    function hasMinRequiredTokens(address _valAddr, bool _checkSelfDelegation) public view returns (bool) {\\n        dt.Validator storage v = validators[_valAddr];\\n        uint256 valTokens = v.tokens;\\n        if (valTokens < params[dt.ParamName.MinValidatorTokens]) {\\n            return false;\\n        }\\n        if (_checkSelfDelegation) {\\n            uint256 selfDelegation = _shareToToken(v.delegators[_valAddr].shares, valTokens, v.shares);\\n            if (selfDelegation < v.minSelfDelegation) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the delegator info of a specific validator\\n     * @param _valAddr the address of the validator\\n     * @param _delAddr the address of the delegator\\n     * @return DelegatorInfo from the given validator\\n     */\\n    function getDelegatorInfo(address _valAddr, address _delAddr) public view returns (dt.DelegatorInfo memory) {\\n        dt.Validator storage validator = validators[_valAddr];\\n        dt.Delegator storage d = validator.delegators[_delAddr];\\n        uint256 tokens = _shareToToken(d.shares, validator.tokens, validator.shares);\\n\\n        uint256 undelegationShares;\\n        uint256 withdrawableUndelegationShares;\\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\\n        uint256 len = d.undelegations.tail - d.undelegations.head;\\n        dt.Undelegation[] memory undelegations = new dt.Undelegation[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            undelegations[i] = d.undelegations.queue[i + d.undelegations.head];\\n            undelegationShares += undelegations[i].shares;\\n            if (isUnbonded || undelegations[i].creationBlock + unbondingPeriod <= block.number) {\\n                withdrawableUndelegationShares += undelegations[i].shares;\\n            }\\n        }\\n        uint256 undelegationTokens = _shareToToken(\\n            undelegationShares,\\n            validator.undelegationTokens,\\n            validator.undelegationShares\\n        );\\n        uint256 withdrawableUndelegationTokens = _shareToToken(\\n            withdrawableUndelegationShares,\\n            validator.undelegationTokens,\\n            validator.undelegationShares\\n        );\\n\\n        return\\n            dt.DelegatorInfo(\\n                _valAddr,\\n                tokens,\\n                d.shares,\\n                undelegations,\\n                undelegationTokens,\\n                withdrawableUndelegationTokens\\n            );\\n    }\\n\\n    /**\\n     * @notice Get the value of a specific uint parameter\\n     * @param _name the key of this parameter\\n     * @return the value of this parameter\\n     */\\n    function getParamValue(dt.ParamName _name) public view returns (uint256) {\\n        return params[_name];\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    function _undelegate(\\n        dt.Validator storage validator,\\n        address _valAddr,\\n        uint256 _tokens,\\n        uint256 _shares\\n    ) private {\\n        address delAddr = msg.sender;\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\n        delegator.shares -= _shares;\\n        validator.shares -= _shares;\\n        validator.tokens -= _tokens;\\n        if (validator.tokens != validator.shares && delegator.shares <= 2) {\\n            // Remove residual share caused by rounding error when total shares and tokens are not equal\\n            validator.shares -= delegator.shares;\\n            delegator.shares = 0;\\n        }\\n        require(delegator.shares == 0 || delegator.shares >= dt.CELR_DECIMAL, \\\"not enough remaining shares\\\");\\n\\n        if (validator.status == dt.ValidatorStatus.Unbonded) {\\n            CELER_TOKEN.safeTransfer(delAddr, _tokens);\\n            emit Undelegated(_valAddr, delAddr, _tokens);\\n            return;\\n        } else if (validator.status == dt.ValidatorStatus.Bonded) {\\n            bondedTokens -= _tokens;\\n            if (!hasMinRequiredTokens(_valAddr, delAddr == _valAddr)) {\\n                _unbondValidator(_valAddr);\\n            }\\n        }\\n        require(\\n            delegator.undelegations.tail - delegator.undelegations.head < dt.MAX_UNDELEGATION_ENTRIES,\\n            \\\"Exceed max undelegation entries\\\"\\n        );\\n\\n        uint256 undelegationShares = _tokenToShare(_tokens, validator.undelegationTokens, validator.undelegationShares);\\n        validator.undelegationShares += undelegationShares;\\n        validator.undelegationTokens += _tokens;\\n        dt.Undelegation storage undelegation = delegator.undelegations.queue[delegator.undelegations.tail];\\n        undelegation.shares = undelegationShares;\\n        undelegation.creationBlock = block.number;\\n        delegator.undelegations.tail++;\\n\\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, -int256(_tokens));\\n    }\\n\\n    /**\\n     * @notice Set validator to bonded\\n     * @param _valAddr the address of the validator\\n     */\\n    function _setBondedValidator(address _valAddr) private {\\n        dt.Validator storage validator = validators[_valAddr];\\n        validator.status = dt.ValidatorStatus.Bonded;\\n        delete validator.unbondBlock;\\n        bondedTokens += validator.tokens;\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Bonded);\\n    }\\n\\n    /**\\n     * @notice Set validator to unbonding\\n     * @param _valAddr the address of the validator\\n     */\\n    function _setUnbondingValidator(address _valAddr) private {\\n        dt.Validator storage validator = validators[_valAddr];\\n        validator.status = dt.ValidatorStatus.Unbonding;\\n        validator.unbondBlock = uint64(block.number + params[dt.ParamName.UnbondingPeriod]);\\n        bondedTokens -= validator.tokens;\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonding);\\n    }\\n\\n    /**\\n     * @notice Bond a validator\\n     * @param _valAddr the address of the validator\\n     */\\n    function _bondValidator(address _valAddr) private {\\n        bondedValAddrs.push(_valAddr);\\n        _setBondedValidator(_valAddr);\\n    }\\n\\n    /**\\n     * @notice Replace a bonded validator\\n     * @param _valAddr the address of the new validator\\n     * @param _index the index of the validator to be replaced\\n     */\\n    function _replaceBondedValidator(address _valAddr, uint256 _index) private {\\n        _setUnbondingValidator(bondedValAddrs[_index]);\\n        bondedValAddrs[_index] = _valAddr;\\n        _setBondedValidator(_valAddr);\\n    }\\n\\n    /**\\n     * @notice Unbond a validator\\n     * @param _valAddr validator to be removed\\n     */\\n    function _unbondValidator(address _valAddr) private {\\n        uint256 lastIndex = bondedValAddrs.length - 1;\\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\\n            if (bondedValAddrs[i] == _valAddr) {\\n                if (i < lastIndex) {\\n                    bondedValAddrs[i] = bondedValAddrs[lastIndex];\\n                }\\n                bondedValAddrs.pop();\\n                _setUnbondingValidator(_valAddr);\\n                return;\\n            }\\n        }\\n        revert(\\\"Not bonded validator\\\");\\n    }\\n\\n    /**\\n     * @notice Check if one validator as too much power\\n     * @param _valTokens token amounts of the validator\\n     */\\n    function _decentralizationCheck(uint256 _valTokens) private view {\\n        uint256 bondedValNum = bondedValAddrs.length;\\n        if (bondedValNum == 2 || bondedValNum == 3) {\\n            require(_valTokens < getQuorumTokens(), \\\"Single validator should not have quorum tokens\\\");\\n        } else if (bondedValNum > 3) {\\n            require(_valTokens < bondedTokens / 3, \\\"Single validator should not have 1/3 tokens\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert token to share\\n     */\\n    function _tokenToShare(\\n        uint256 tokens,\\n        uint256 totalTokens,\\n        uint256 totalShares\\n    ) private pure returns (uint256) {\\n        if (totalTokens == 0) {\\n            return tokens;\\n        }\\n        return (tokens * totalShares) / totalTokens;\\n    }\\n\\n    /**\\n     * @notice Convert share to token\\n     */\\n    function _shareToToken(\\n        uint256 shares,\\n        uint256 totalTokens,\\n        uint256 totalShares\\n    ) private pure returns (uint256) {\\n        if (totalShares == 0) {\\n            return shares;\\n        }\\n        return (shares * totalTokens) / totalShares;\\n    }\\n}\\n\",\"keccak256\":\"0x5f279135cd54809b820d1839faf3d7d47b1a595cf4d7e197063354481e911680\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xbc3887db62a3dfc74137f8d5d8236533b035501929772aa8e512d3df0bc85341\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    uint256 constant CELR_DECIMAL = 1e18;\\n    uint256 constant MAX_INT = 2**256 - 1;\\n    uint256 constant COMMISSION_RATE_BASE = 10000; // 1 commissionRate means 0.01%\\n    uint256 constant MAX_UNDELEGATION_ENTRIES = 10;\\n    uint256 constant SLASH_FACTOR_DECIMAL = 1e6;\\n\\n    enum ValidatorStatus {\\n        Null,\\n        Unbonded,\\n        Unbonding,\\n        Bonded\\n    }\\n\\n    enum ParamName {\\n        ProposalDeposit,\\n        VotingPeriod,\\n        UnbondingPeriod,\\n        MaxBondedValidators,\\n        MinValidatorTokens,\\n        MinSelfDelegation,\\n        AdvanceNoticePeriod,\\n        ValidatorBondInterval,\\n        MaxSlashFactor\\n    }\\n\\n    struct Undelegation {\\n        uint256 shares;\\n        uint256 creationBlock;\\n    }\\n\\n    struct Undelegations {\\n        mapping(uint256 => Undelegation) queue;\\n        uint32 head;\\n        uint32 tail;\\n    }\\n\\n    struct Delegator {\\n        uint256 shares;\\n        Undelegations undelegations;\\n    }\\n\\n    struct Validator {\\n        ValidatorStatus status;\\n        address signer;\\n        uint256 tokens; // sum of all tokens delegated to this validator\\n        uint256 shares; // sum of all delegation shares\\n        uint256 undelegationTokens; // tokens being undelegated\\n        uint256 undelegationShares; // shares of tokens being undelegated\\n        mapping(address => Delegator) delegators;\\n        uint256 minSelfDelegation;\\n        uint64 bondBlock; // cannot become bonded before this block\\n        uint64 unbondBlock; // cannot become unbonded before this block\\n        uint64 commissionRate; // equal to real commission rate * COMMISSION_RATE_BASE\\n    }\\n\\n    // used for external view output\\n    struct ValidatorTokens {\\n        address valAddr;\\n        uint256 tokens;\\n    }\\n\\n    // used for external view output\\n    struct ValidatorInfo {\\n        address valAddr;\\n        ValidatorStatus status;\\n        address signer;\\n        uint256 tokens;\\n        uint256 shares;\\n        uint256 minSelfDelegation;\\n        uint64 commissionRate;\\n    }\\n\\n    // used for external view output\\n    struct DelegatorInfo {\\n        address valAddr;\\n        uint256 tokens;\\n        uint256 shares;\\n        Undelegation[] undelegations;\\n        uint256 undelegationTokens;\\n        uint256 withdrawableUndelegationTokens;\\n    }\\n}\\n\",\"keccak256\":\"0x8cc21f05d59b03022d985c5e61adecc27c8fc986ab127c044e9b8615d3830464\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\n// runtime proto sol library\\nlibrary Pb {\\n    enum WireType {\\n        Varint,\\n        Fixed64,\\n        LengthDelim,\\n        StartGroup,\\n        EndGroup,\\n        Fixed32\\n    }\\n\\n    struct Buffer {\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\n        bytes b; // hold serialized proto msg, readonly\\n    }\\n\\n    // create a new in-memory Buffer object from raw msg bytes\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\n        buf.b = raw;\\n        buf.idx = 0;\\n    }\\n\\n    // whether there are unread bytes\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\n        return buf.idx < buf.b.length;\\n    }\\n\\n    // decode current field number and wiretype\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\n        uint256 v = decVarint(buf);\\n        tag = v / 8;\\n        wiretype = WireType(v & 7);\\n    }\\n\\n    // count tag occurrences, return an array due to no memory map support\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\n    // should keep buf.idx unchanged because this is only a count function\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\n        uint256 originalIdx = buf.idx;\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\n        uint256 tag;\\n        WireType wire;\\n        while (hasMore(buf)) {\\n            (tag, wire) = decKey(buf);\\n            cnts[tag] += 1;\\n            skipValue(buf, wire);\\n        }\\n        buf.idx = originalIdx;\\n    }\\n\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\n        v = buf.idx; // use v to save one additional uint variable\\n        assembly {\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\n        }\\n        uint256 b; // store current byte content\\n        v = 0; // reset to 0 for return value\\n        for (uint256 i = 0; i < 10; i++) {\\n            assembly {\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\n            }\\n            v |= (b & 0x7F) << (i * 7);\\n            if (b & 0x80 == 0) {\\n                buf.idx += i + 1;\\n                return v;\\n            }\\n        }\\n        revert(); // i=10, invalid varint stream\\n    }\\n\\n    // read length delimited field and return bytes\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        b = new bytes(len);\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\n        uint256 bStart;\\n        uint256 bufBStart = buf.idx;\\n        assembly {\\n            bStart := add(b, 32)\\n            bufBStart := add(add(bufB, 32), bufBStart)\\n        }\\n        for (uint256 i = 0; i < len; i += 32) {\\n            assembly {\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\n            }\\n        }\\n        buf.idx = end;\\n    }\\n\\n    // return packed ints\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        // array in memory must be init w/ known length\\n        // so we have to create a tmp array w/ max possible len first\\n        uint256[] memory tmp = new uint256[](len);\\n        uint256 i = 0; // count how many ints are there\\n        while (buf.idx < end) {\\n            tmp[i] = decVarint(buf);\\n            i++;\\n        }\\n        t = new uint256[](i); // init t with correct length\\n        for (uint256 j = 0; j < i; j++) {\\n            t[j] = tmp[j];\\n        }\\n        return t;\\n    }\\n\\n    // move idx pass current value field, to beginning of next tag or msg end\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\n        if (wire == WireType.Varint) {\\n            decVarint(buf);\\n        } else if (wire == WireType.LengthDelim) {\\n            uint256 len = decVarint(buf);\\n            buf.idx += len; // skip len bytes value data\\n            require(buf.idx <= buf.b.length); // avoid overflow\\n        } else {\\n            revert();\\n        } // unsupported wiretype\\n    }\\n\\n    // type conversion help utils\\n    function _bool(uint256 x) internal pure returns (bool v) {\\n        return x != 0;\\n    }\\n\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\n        assembly {\\n            v := mload(add(b, 32))\\n        } // load all 32bytes to v\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\n    }\\n\\n    function _address(bytes memory b) internal pure returns (address v) {\\n        v = _addressPayable(b);\\n    }\\n\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\n        require(b.length == 20);\\n        //load 32bytes then shift right 12 bytes\\n        assembly {\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\n        require(b.length == 32);\\n        assembly {\\n            v := mload(add(b, 32))\\n        }\\n    }\\n\\n    // uint[] to uint8[]\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\n        t = new uint8[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint8(arr[i]);\\n        }\\n    }\\n\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\n        t = new uint32[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint32(arr[i]);\\n        }\\n    }\\n\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\n        t = new uint64[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint64(arr[i]);\\n        }\\n    }\\n\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\n        t = new bool[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = arr[i] != 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66fd8c7045b0794eca747bd534928197604a8f9c9ecadb1cfded2b45d4de5fb3\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/staking.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbStaking {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct StakingReward {\\n        address recipient; // tag: 1\\n        uint256 cumulativeRewardAmount; // tag: 2\\n    } // end struct StakingReward\\n\\n    function decStakingReward(bytes memory raw) internal pure returns (StakingReward memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.recipient = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.cumulativeRewardAmount = Pb._uint256(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder StakingReward\\n\\n    struct Slash {\\n        address validator; // tag: 1\\n        uint64 nonce; // tag: 2\\n        uint64 slashFactor; // tag: 3\\n        uint64 expireTime; // tag: 4\\n        uint64 jailPeriod; // tag: 5\\n        AcctAmtPair[] collectors; // tag: 6\\n    } // end struct Slash\\n\\n    function decSlash(bytes memory raw) internal pure returns (Slash memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256[] memory cnts = buf.cntTags(6);\\n        m.collectors = new AcctAmtPair[](cnts[6]);\\n        cnts[6] = 0; // reset counter for later use\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.validator = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.nonce = uint64(buf.decVarint());\\n            } else if (tag == 3) {\\n                m.slashFactor = uint64(buf.decVarint());\\n            } else if (tag == 4) {\\n                m.expireTime = uint64(buf.decVarint());\\n            } else if (tag == 5) {\\n                m.jailPeriod = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.collectors[cnts[6]] = decAcctAmtPair(buf.decBytes());\\n                cnts[6]++;\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Slash\\n\\n    struct AcctAmtPair {\\n        address account; // tag: 1\\n        uint256 amount; // tag: 2\\n    } // end struct AcctAmtPair\\n\\n    function decAcctAmtPair(bytes memory raw) internal pure returns (AcctAmtPair memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.account = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder AcctAmtPair\\n}\\n\",\"keccak256\":\"0x0a73682ff6de7d31b8960516a358f0877cdce8efd03a420365af87f63d152097\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        pausers[account] = false;\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xa287f1f4e16a67737cc06dbeacb5e856d411125f51fca528a06d161cc26e2579\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Whitelist is Ownable {\\n    mapping(address => bool) public whitelist;\\n    bool public whitelistEnabled;\\n\\n    event WhitelistedAdded(address account);\\n    event WhitelistedRemoved(address account);\\n\\n    modifier onlyWhitelisted() {\\n        if (whitelistEnabled) {\\n            require(isWhitelisted(msg.sender), \\\"Caller is not whitelisted\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set whitelistEnabled\\n     */\\n    function setWhitelistEnabled(bool _whitelistEnabled) external onlyOwner {\\n        whitelistEnabled = _whitelistEnabled;\\n    }\\n\\n    /**\\n     * @notice Add an account to whitelist\\n     */\\n    function addWhitelisted(address account) external onlyOwner {\\n        require(!isWhitelisted(account), \\\"Already whitelisted\\\");\\n        whitelist[account] = true;\\n        emit WhitelistedAdded(account);\\n    }\\n\\n    /**\\n     * @notice Remove an account from whitelist\\n     */\\n    function removeWhitelisted(address account) external onlyOwner {\\n        require(isWhitelisted(account), \\\"Not whitelisted\\\");\\n        whitelist[account] = false;\\n        emit WhitelistedRemoved(account);\\n    }\\n\\n    /**\\n     * @return is account whitelisted\\n     */\\n    function isWhitelisted(address account) public view returns (bool) {\\n        return whitelist[account];\\n    }\\n}\\n\",\"keccak256\":\"0xb4add4fe333c2527d46b476efcca5978c3698b58fbdf1b4263c36d1015dec1f4\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620061ca380380620061ca8339810160408190526200003491620002cd565b6200003f33620001b4565b6000805460ff60a01b19169055620000573362000204565b6001600160a01b0399909916608052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76979097557f72c6bfb7988af3a1efa6568f02a999bc52252641c659d85961ca3d372b57d5cf959095557fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba91634939093557f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e919091557f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c784557febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f4557f0387e9d1203691d8e3362a7e4c6723de358a4010d7f31ecbec3fbfc61d1c75fc557ff5559028dc9ba50d75343c779b2f75e13a84a14662932fc67a486f263ca31a965560086000527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec98569358556200035a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001602052604090205460ff1615620002725760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c72656164792070617573657200000000000000604482015260640160405180910390fd5b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8910160405180910390a150565b6000806000806000806000806000806101408b8d031215620002ee57600080fd5b8a516001600160a01b03811681146200030657600080fd5b809a505060208b0151985060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506101008b015191506101208b015190509295989b9194979a5092959850565b608051615e23620003a7600039600081816109a701528181610e08015281816110a501528181611c2501528181611ca0015281816121d9015281816130f201526146b80152615e236000f3fe6080604052600436106103905760003560e01c80636ea69d62116101dc57806390e360f811610102578063b4f7fa34116100a0578063eb505dd51161006f578063eb505dd514610af8578063eecefef814610b25578063f2fde38b14610b52578063fa52c7d814610b7257600080fd5b8063b4f7fa3414610a5f578063c8f9f98414610a7f578063dcfdc1e114610ab8578063e909156d14610ad857600080fd5b8063960dc08a116100dc578063960dc08a146109955780639b19251a146109c9578063a310624f146109f9578063acc62ccf14610a3f57600080fd5b806390e360f8146109255780639146f1101461095557806392bb243c1461097557600080fd5b806382dc1ec41161017a57806388d996e81161014957806388d996e8146108b257806389f9aab5146108d25780638a74d5fe146108e75780638da5cb5b1461090757600080fd5b806382dc1ec4146108515780638338f0e51461087157806383cfb318146108875780638456cb591461089d57600080fd5b806371bc0216116101b657806371bc0216146107cc5780637a50dbd2146107ec57806380f51c121461080c57806382d7b4b81461083c57600080fd5b80636ea69d62146107825780636ef8d66d146107a2578063715018a6146107b757600080fd5b8063410ae02c116102c1578063525eba211161025f578063682dbc221161022e578063682dbc22146106ec57806368706e541461070c5780636b2c0f551461072c5780636d3087831461074c57600080fd5b8063525eba21146106775780635c975abb146106975780635e593eff146106b657806365d5d420146106d657600080fd5b806347abfdbf1161029b57806347abfdbf146105fd57806349955e391461061d57806351508f0a1461063d57806351fb012d1461065d57600080fd5b8063410ae02c1461058457806346fbf68e146105a4578063473849bd146105dd57600080fd5b80632fa4d12b1161032e5780633985c4e6116103085780633985c4e6146104e45780633af32abf146105045780633f4ba83a1461054d5780634021d4d51461056257600080fd5b80632fa4d12b1461048257806336f1635f146104ba578063386c024a146104cf57600080fd5b8063145aa1161161036a578063145aa116146103fe5780631a2032571461041e5780631cfe4f0b1461043e578063291d95491461046257600080fd5b8063026e402b1461039c578063052d9e7e146103be57806310154bad146103de57600080fd5b3661039757005b600080fd5b3480156103a857600080fd5b506103bc6103b7366004615309565b610c10565b005b3480156103ca57600080fd5b506103bc6103d9366004615341565b610e90565b3480156103ea57600080fd5b506103bc6103f936600461535e565b610eeb565b34801561040a57600080fd5b506103bc610419366004615379565b610ff7565b34801561042a57600080fd5b506103bc610439366004615379565b6110cf565b34801561044a57600080fd5b506006545b6040519081526020015b60405180910390f35b34801561046e57600080fd5b506103bc61047d36600461535e565b611145565b34801561048e57600080fd5b50600c546104a2906001600160a01b031681565b6040516001600160a01b039091168152602001610459565b3480156104c657600080fd5b506103bc611246565b3480156104db57600080fd5b5061044f6115d4565b3480156104f057600080fd5b506103bc6104ff366004615420565b611601565b34801561051057600080fd5b5061053d61051f36600461535e565b6001600160a01b031660009081526002602052604090205460ff1690565b6040519015158152602001610459565b34801561055957600080fd5b506103bc611da7565b34801561056e57600080fd5b50610577611e10565b604051610459919061548c565b34801561059057600080fd5b5061044f61059f3660046154f3565b611f11565b3480156105b057600080fd5b5061053d6105bf36600461535e565b6001600160a01b031660009081526001602052604090205460ff1690565b3480156105e957600080fd5b506103bc6105f836600461535e565b611f50565b34801561060957600080fd5b5061053d61061836600461550e565b612258565b34801561062957600080fd5b506103bc61063836600461555d565b612312565b34801561064957600080fd5b506103bc61065836600461535e565b612474565b34801561066957600080fd5b5060035461053d9060ff1681565b34801561068357600080fd5b506103bc610692366004615578565b6124de565b3480156106a357600080fd5b50600054600160a01b900460ff1661053d565b3480156106c257600080fd5b506103bc6106d1366004615379565b612980565b3480156106e257600080fd5b5061044f60045481565b3480156106f857600080fd5b506103bc61070736600461566b565b612b99565b34801561071857600080fd5b506103bc61072736600461535e565b612bfc565b34801561073857600080fd5b506103bc61074736600461535e565b612c66565b34801561075857600080fd5b506104a261076736600461535e565b6009602052600090815260409020546001600160a01b031681565b34801561078e57600080fd5b50600d546104a2906001600160a01b031681565b3480156107ae57600080fd5b506103bc612cb7565b3480156107c357600080fd5b506103bc612cc0565b3480156107d857600080fd5b506103bc6107e736600461535e565b612d12565b3480156107f857600080fd5b506103bc61080736600461535e565b612e5a565b34801561081857600080fd5b5061053d61082736600461535e565b60016020526000908152604090205460ff1681565b34801561084857600080fd5b506103bc61308c565b34801561085d57600080fd5b506103bc61086c36600461535e565b613123565b34801561087d57600080fd5b5061044f600e5481565b34801561089357600080fd5b5061044f60055481565b3480156108a957600080fd5b506103bc613174565b3480156108be57600080fd5b506103bc6108cd366004615309565b6131db565b3480156108de57600080fd5b5060075461044f565b3480156108f357600080fd5b5061053d6109023660046157af565b6132d9565b34801561091357600080fd5b506000546001600160a01b03166104a2565b34801561093157600080fd5b5061053d610940366004615379565b600a6020526000908152604090205460ff1681565b34801561096157600080fd5b506103bc610970366004615827565b6134bd565b34801561098157600080fd5b506104a2610990366004615379565b61358b565b3480156109a157600080fd5b506104a27f000000000000000000000000000000000000000000000000000000000000000081565b3480156109d557600080fd5b5061053d6109e436600461535e565b60026020526000908152604090205460ff1681565b348015610a0557600080fd5b50610a32610a1436600461535e565b6001600160a01b031660009081526008602052604090205460ff1690565b60405161045991906158e0565b348015610a4b57600080fd5b506104a2610a5a366004615379565b6135b5565b348015610a6b57600080fd5b5061053d610a7a36600461535e565b6135c5565b348015610a8b57600080fd5b5061044f610a9a36600461535e565b6001600160a01b031660009081526008602052604090206001015490565b348015610ac457600080fd5b506103bc610ad3366004615309565b6135fd565b348015610ae457600080fd5b506103bc610af33660046158ee565b6136f5565b348015610b0457600080fd5b5061044f610b133660046154f3565b600b6020526000908152604090205481565b348015610b3157600080fd5b50610b45610b4036600461590a565b6137f8565b604051610459919061593d565b348015610b5e57600080fd5b506103bc610b6d36600461535e565b613af1565b348015610b7e57600080fd5b50610bfa610b8d36600461535e565b600860205260009081526040902080546001820154600283015460038401546004850154600686015460079096015460ff8616966101009096046001600160a01b0316959067ffffffffffffffff80821691680100000000000000008104821691600160801b909104168a565b6040516104599a999897969594939291906159dc565b600054600160a01b900460ff1615610c625760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b33670de0b6b3a7640000821015610cbb5760405162461bcd60e51b815260206004820152601860248201527f4d696e696d616c20616d6f756e7420697320312043454c5200000000000000006044820152606401610c59565b6001600160a01b038316600090815260086020526040812090815460ff166003811115610cea57610cea6158a8565b1415610d385760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b6000610d4d8483600101548460020154613bbe565b6001600160a01b0384166000908152600584016020526040812080549293509183918391610d7c908490615a5e565b9250508190555081836002016000828254610d979190615a5e565b9250508190555084836001016000828254610db29190615a5e565b9091555060039050835460ff166003811115610dd057610dd06158a8565b1415610dfb578460046000828254610de89190615a5e565b90915550506001830154610dfb90613beb565b610e306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853088613d0e565b6001830154815460408051928352602083019190915281018690526001600160a01b0380861691908816907f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea9060600160405180910390a3505050505050565b6000546001600160a01b03163314610ed85760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6003805460ff1916911515919091179055565b6000546001600160a01b03163314610f335760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6001600160a01b03811660009081526002602052604090205460ff1615610f9c5760405162461bcd60e51b815260206004820152601360248201527f416c72656164792077686974656c6973746564000000000000000000000000006044820152606401610c59565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527fee1504a83b6d4a361f4c1dc78ab59bfa30d6a3b6612c403e86bb01ef2984295f91015b60405180910390a150565b600054600160a01b900460ff166110505760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c59565b6000546001600160a01b031633146110985760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6110cc6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383613da6565b50565b6000546001600160a01b031633146111175760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6008600052600b6020527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec9856935855565b6000546001600160a01b0316331461118d5760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6001600160a01b03811660009081526002602052604090205460ff166111f55760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c697374656400000000000000000000000000000000006044820152606401610c59565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f270d9b30cf5b0793bbfd54c9d5b94aeb49462b8148399000265144a8722da6b69101610fec565b336000818152600960205260409020546001600160a01b03161561127f5750336000908152600960205260409020546001600160a01b03165b6001600160a01b03811660009081526008602052604090206001815460ff1660038111156112af576112af6158a8565b14806112d057506002815460ff1660038111156112ce576112ce6158a8565b145b61131c5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076616c696461746f722073746174757300000000000000006044820152606401610c59565b600781015467ffffffffffffffff1643101561137a5760405162461bcd60e51b815260206004820152601660248201527f426f6e6420626c6f636b206e6f742072656163686564000000000000000000006044820152606401610c59565b6005544310156113cc5760405162461bcd60e51b815260206004820152601b60248201527f546f6f206672657175656e742076616c696461746f7220626f6e6400000000006044820152606401610c59565b6007600052600b6020527ff5559028dc9ba50d75343c779b2f75e13a84a14662932fc67a486f263ca31a96546114029043615a5e565b600555611410826001612258565b61145c5760405162461bcd60e51b815260206004820152601360248201527f4e6f742068617665206d696e20746f6b656e73000000000000000000000000006044820152606401610c59565b6003600052600b6020527f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e546007548111156114ad5761149b83613dd6565b6114a88260010154613beb565b505050565b6000196000805b83811015611562578260086000600784815481106114d4576114d4615a76565b60009182526020808320909101546001600160a01b03168352820192909252604001902060010154101561155057809150600860006007838154811061151c5761151c615a76565b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015492508261155057611562565b8061155a81615a8c565b9150506114b4565b50818460010154116115b65760405162461bcd60e51b815260206004820152601360248201527f496e73756666696369656e7420746f6b656e73000000000000000000000000006044820152606401610c59565b6115c08582613e2a565b6115cd8460010154613beb565b5050505050565b6000600360045460026115e79190615aa7565b6115f19190615ac6565b6115fc906001615a5e565b905090565b600054600160a01b900460ff161561164e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c59565b600046306040516020016116a492919091825260601b6bffffffffffffffffffffffff191660208201527f536c617368000000000000000000000000000000000000000000000000000000603482015260390190565b6040516020818303038152906040528051906020012090506116ee8186866040516020016116d493929190615ae8565b60408051601f198184030181529190526109028486615b02565b50600061173086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613ea592505050565b9050806060015167ffffffffffffffff16421061178f5760405162461bcd60e51b815260206004820152600d60248201527f536c6173682065787069726564000000000000000000000000000000000000006044820152606401610c59565b620f4240816040015167ffffffffffffffff1611156117f05760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420736c61736820666163746f720000000000000000000000006044820152606401610c59565b6008600052600b6020527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec9856935854604082015167ffffffffffffffff1611156118795760405162461bcd60e51b815260206004820152601760248201527f457863656564206d617820736c61736820666163746f720000000000000000006044820152606401610c59565b60208082015167ffffffffffffffff166000908152600a909152604090205460ff16156118e85760405162461bcd60e51b815260206004820152601060248201527f5573656420736c617368206e6f6e6365000000000000000000000000000000006044820152606401610c59565b60208082015167ffffffffffffffff166000908152600a82526040808220805460ff1916600117905583516001600160a01b0381168352600890935290206003815460ff16600381111561193e5761193e6158a8565b148061195f57506002815460ff16600381111561195d5761195d6158a8565b145b6119ab5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076616c696461746f722073746174757300000000000000006044820152606401610c59565b6000620f4240846040015167ffffffffffffffff1683600101546119cf9190615aa7565b6119d99190615ac6565b9050808260010160008282546119ef9190615b0f565b9091555060039050825460ff166003811115611a0d57611a0d6158a8565b1415611a5c578060046000828254611a259190615b0f565b9091555050608084015167ffffffffffffffff16151580611a4e5750611a4c836001612258565b155b15611a5c57611a5c83614117565b6002825460ff166003811115611a7457611a746158a8565b148015611a8f57506000846080015167ffffffffffffffff16115b15611ad2576080840151611aad9067ffffffffffffffff1643615a5e565b60078301805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b60006001600160a01b0316836001600160a01b03167f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea8460010154600085611b1990615b26565b6040805193845260208401929092529082015260600160405180910390a36000620f4240856040015167ffffffffffffffff168460030154611b5b9190615aa7565b611b659190615ac6565b905080836003016000828254611b7b9190615b0f565b90915550611b8b90508183615a5e565b91506000805b8660a0015151811015611d255760008760a001518281518110611bb657611bb6615a76565b6020026020010151905084816020015184611bd19190615a5e565b1115611be757611be18386615b0f565b60208201525b602081015115611d12576020810151611c009084615a5e565b81519093506001600160a01b0316611c8b576020810151611c4d906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903390613da6565b60208082015160405190815233917fb1375221b23a15d2f6887c7dbdc6745a07d9a5245076d51fb41879590ebbd2a3910160405180910390a2611d12565b80516020820151611cc6916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691613da6565b80600001516001600160a01b03167fb1375221b23a15d2f6887c7dbdc6745a07d9a5245076d51fb41879590ebbd2a38260200151604051611d0991815260200190565b60405180910390a25b5080611d1d81615a8c565b915050611b91565b50611d308184615b0f565b600e6000828254611d419190615a5e565b90915550506020808701516040805167ffffffffffffffff90921682529181018590526001600160a01b038716917f10863f35bc5db9fda133333468bf7b1ceaaa88cb4263c061f890f97b79bf9008910160405180910390a25050505050505050505050565b3360009081526001602052604090205460ff16611e065760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610c59565b611e0e61427d565b565b60075460609060009067ffffffffffffffff811115611e3157611e316155b4565b604051908082528060200260200182016040528015611e7657816020015b6040805180820190915260008082526020820152815260200190600190039081611e4f5790505b50905060005b600754811015611f0b57600060078281548110611e9b57611e9b615a76565b60009182526020808320909101546040805180820182526001600160a01b039092168083528085526008845293206001015491810191909152845191925090849084908110611eec57611eec615a76565b6020026020010181905250508080611f0390615a8c565b915050611e7c565b50919050565b6000600b6000836008811115611f2957611f296158a8565b6008811115611f3a57611f3a6158a8565b8152602001908152602001600020549050919050565b6001600160a01b03811660009081526008602052604081203391815460ff166003811115611f8057611f806158a8565b1415611fce5760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b6001600160a01b03821660009081526005820160209081526040822060028352600b9091527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba916345483549192909160019060ff166003811115612032576120326158a8565b60028501549114915063ffffffff1660005b600285015463ffffffff640100000000909104811690831610156120f6578280612094575063ffffffff821660009081526001808701602052604090912001544390612091908690615a5e565b11155b156120df5763ffffffff821660009081526001860160205260409020546120bb9082615a5e565b63ffffffff83166000908152600180880160205260408220828155015590506120e4565b6120f6565b816120ee81615b43565b925050612044565b60028501805463ffffffff191663ffffffff8416179055806121805760405162461bcd60e51b815260206004820152602560248201527f4e6f20756e64656c65676174696f6e20726561647920746f20626520636f6d7060448201527f6c657465640000000000000000000000000000000000000000000000000000006064820152608401610c59565b60006121958288600301548960040154614323565b9050818760040160008282546121ab9190615b0f565b92505081905550808760030160008282546121c69190615b0f565b9091555061220090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168983613da6565b876001600160a01b0316896001600160a01b03167f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c8360405161224591815260200190565b60405180910390a3505050505050505050565b6001600160a01b03821660009081526008602090815260408220600181015460048452600b9092527f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c784549091908110156122b75760009250505061230c565b8315612305576001600160a01b038516600090815260058301602052604081205460028401546122e991908490614323565b90508260060154811015612303576000935050505061230c565b505b6001925050505b92915050565b33600081815260086020526040812090815460ff166003811115612338576123386158a8565b14156123865760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b6127108367ffffffffffffffff1611156123e25760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964206e65772072617465000000000000000000000000000000006044820152606401610c59565b60078101805467ffffffffffffffff60801b1916600160801b67ffffffffffffffff8616908102919091179091556040805160208101929092526001600160a01b038416917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261246791600090615bbf565b60405180910390a2505050565b6000546001600160a01b031633146124bc5760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff161561252b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c59565b60035460ff1615612595573360009081526002602052604090205460ff166125955760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742077686974656c6973746564000000000000006044820152606401610c59565b33600081815260086020526040812090815460ff1660038111156125bb576125bb6158a8565b146126085760405162461bcd60e51b815260206004820152601860248201527f56616c696461746f7220697320696e697469616c697a656400000000000000006044820152606401610c59565b6001600160a01b03851660009081526008602052604081205460ff166003811115612635576126356158a8565b146126825760405162461bcd60e51b815260206004820152601960248201527f5369676e6572206973206f746865722076616c696461746f72000000000000006044820152606401610c59565b6001600160a01b0382811660009081526009602052604090205416156126ea5760405162461bcd60e51b815260206004820152601960248201527f56616c696461746f72206973206f74686572207369676e6572000000000000006044820152606401610c59565b6001600160a01b0385811660009081526009602052604090205416156127525760405162461bcd60e51b815260206004820152601360248201527f5369676e657220616c72656164792075736564000000000000000000000000006044820152606401610c59565b6127108367ffffffffffffffff1611156127ae5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420636f6d6d697373696f6e20726174650000000000000000006044820152606401610c59565b6005600052600b6020527febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f4548410156128295760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74206d696e2073656c662064656c65676174696f6e6044820152606401610c59565b80547fffffffffffffffffffffff0000000000000000000000000000000000000000001660ff196101006001600160a01b03888116918202929092169290921760019081178455600680850188905560078501805467ffffffffffffffff60801b1916600160801b67ffffffffffffffff8a1602179055805491820190557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031990811692861692831790915560009283526009602052604090922080549092161790556129018285610c10565b604080516001600160a01b03878116602083015291810186905267ffffffffffffffff85166060820152908316907f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c9060800160408051601f198184030181529082905261297191600090615c1e565b60405180910390a25050505050565b33600081815260086020526040812090815460ff1660038111156129a6576129a66158a8565b14156129f45760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b6005600052600b6020527febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f454831015612a6f5760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74206d696e2073656c662064656c65676174696f6e6044820152606401610c59565b8060060154831015612b3c576003815460ff166003811115612a9357612a936158a8565b1415612ae15760405162461bcd60e51b815260206004820152601360248201527f56616c696461746f7220697320626f6e646564000000000000000000000000006044820152606401610c59565b6006600052600b6020527f0387e9d1203691d8e3362a7e4c6723de358a4010d7f31ecbec3fbfc61d1c75fc54612b179043615a5e565b60078201805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b6006810183905560408051602081018590526001600160a01b038416917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261246791600090615c4c565b612ba7876109028789615b02565b612bf35760405162461bcd60e51b815260206004820152601560248201527f4661696c656420746f20766572696679207369677300000000000000000000006044820152606401610c59565b50505050505050565b6000546001600160a01b03163314612c445760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314612cae5760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6110cc8161433c565b611e0e3361433c565b6000546001600160a01b03163314612d085760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b611e0e60006143f5565b6001600160a01b03811660009081526008602052604090206002815460ff166003811115612d4257612d426158a8565b14612d8f5760405162461bcd60e51b815260206004820152601760248201527f56616c696461746f72206e6f7420756e626f6e64696e670000000000000000006044820152606401610c59565b600781015468010000000000000000900467ffffffffffffffff16431015612df95760405162461bcd60e51b815260206004820152601860248201527f556e626f6e6420626c6f636b206e6f74207265616368656400000000000000006044820152606401610c59565b805460ff1916600190811782556007820180546fffffffffffffffff0000000000000000191690555b6040516001600160a01b038416907fd5e59fa85493a77fb57f6bf9080f2f71fde9de0eadc62b27b43b6263f3f1f59a90600090a35050565b33600081815260086020526040812090815460ff166003811115612e8057612e806158a8565b1415612ece5760405162461bcd60e51b815260206004820152601960248201527f56616c696461746f72206e6f7420696e697469616c697a6564000000000000006044820152606401610c59565b6001600160a01b038381166000908152600960205260409020541615612f365760405162461bcd60e51b815260206004820152601360248201527f5369676e657220616c72656164792075736564000000000000000000000000006044820152606401610c59565b816001600160a01b0316836001600160a01b031614612fc9576001600160a01b03831660009081526008602052604081205460ff166003811115612f7c57612f7c6158a8565b14612fc95760405162461bcd60e51b815260206004820152601960248201527f5369676e6572206973206f746865722076616c696461746f72000000000000006044820152606401610c59565b8054610100908190046001600160a01b03908116600090815260096020908152604080832080546001600160a01b031990811690915586547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1689861696870217875585845292819020805490931693871693841790925581519081019390935290917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261246791600090615c93565b6000600e54116130de5760405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f20636f6c6c65637400000000000000000000000000006044820152606401610c59565b600d54600e5461311c916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690613da6565b6000600e55565b6000546001600160a01b0316331461316b5760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6110cc81614445565b3360009081526001602052604090205460ff166131d35760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610c59565b611e0e614503565b670de0b6b3a76400008110156132335760405162461bcd60e51b815260206004820152601960248201527f4d696e696d616c20616d6f756e742069732031207368617265000000000000006044820152606401610c59565b6001600160a01b038216600090815260086020526040812090815460ff166003811115613262576132626158a8565b14156132b05760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b60006132c58383600101548460020154614323565b90506132d38285838661458b565b50505050565b60008061333a84805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050600080806133486115d4565b905060005b865181101561347457600061338488838151811061336d5761336d615a76565b60200260200101518761492e90919063ffffffff16565b9050836001600160a01b0316816001600160a01b0316116133e75760405162461bcd60e51b815260206004820152601e60248201527f5369676e657273206e6f7420696e20617363656e64696e67206f7264657200006044820152606401610c59565b6001600160a01b038082166000908152600960209081526040808320549093168252600890522090935083906003815460ff16600381111561342b5761342b6158a8565b14613437575050613462565b60018101546134469087615a5e565b955083861061345f57600197505050505050505061230c565b50505b8061346c81615a8c565b91505061334d565b5060405162461bcd60e51b815260206004820152601260248201527f51756f72756d206e6f74207265616368656400000000000000000000000000006044820152606401610c59565b6001600160a01b038516600090815260086020526040812090815460ff1660038111156134ec576134ec6158a8565b141561353a5760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b856001600160a01b03167f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c868686863360405161357b959493929190615d03565b60405180910390a2505050505050565b6006818154811061359b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6007818154811061359b57600080fd5b600060036001600160a01b03831660009081526008602052604090205460ff1660038111156135f6576135f66158a8565b1492915050565b670de0b6b3a76400008110156136555760405162461bcd60e51b815260206004820152601860248201527f4d696e696d616c20616d6f756e7420697320312043454c5200000000000000006044820152606401610c59565b6001600160a01b038216600090815260086020526040812090815460ff166003811115613684576136846158a8565b14156136d25760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b60006136e78383600101548460020154613bbe565b90506132d38285858461458b565b600c546001600160a01b0316331461374f5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420676f7620636f6e74726163740000000000006044820152606401610c59565b6003826008811115613763576137636158a8565b14156137bb576007548110156137bb5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642076616c7565000000000000000000000000000000000000006044820152606401610c59565b80600b60008460088111156137d2576137d26158a8565b60088111156137e3576137e36158a8565b81526020810191909152604001600020555050565b61383a6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016060815260200160008152602001600081525090565b6001600160a01b038084166000908152600860209081526040808320938616835260058401909152812080546001840154600285015492939261387e929190614323565b60026000908152600b6020527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba916345485549293509091829190829060019060ff1660038111156138cf576138cf6158a8565b6002880154911491506000906138f69063ffffffff80821691640100000000900416615d46565b63ffffffff16905060008167ffffffffffffffff811115613919576139196155b4565b60405190808252806020026020018201604052801561395e57816020015b60408051808201909152600080825260208201528152602001906001900390816139375790505b50905060005b82811015613a7557600289015460018a01906000906139899063ffffffff1684615a5e565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250508282815181106139c8576139c8615a76565b60200260200101819052508181815181106139e5576139e5615a76565b602002602001015160000151876139fc9190615a5e565b96508380613a3257504385838381518110613a1957613a19615a76565b602002602001015160200151613a2f9190615a5e565b11155b15613a6357818181518110613a4957613a49615a76565b60200260200101516000015186613a609190615a5e565b95505b80613a6d81615a8c565b915050613964565b506000613a8b878b600301548c60040154614323565b90506000613aa2878c600301548d60040154614323565b90506040518060c001604052808f6001600160a01b031681526020018a81526020018b600001548152602001848152602001838152602001828152509b50505050505050505050505092915050565b6000546001600160a01b03163314613b395760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6001600160a01b038116613bb55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c59565b6110cc816143f5565b600082613bcc575082613be4565b82613bd78386615aa7565b613be19190615ac6565b90505b9392505050565b6007546002811480613bfd5750806003145b15613c8257613c0a6115d4565b8210613c7e5760405162461bcd60e51b815260206004820152602e60248201527f53696e676c652076616c696461746f722073686f756c64206e6f74206861766560448201527f2071756f72756d20746f6b656e730000000000000000000000000000000000006064820152608401610c59565b5050565b6003811115613c7e576003600454613c9a9190615ac6565b8210613c7e5760405162461bcd60e51b815260206004820152602b60248201527f53696e676c652076616c696461746f722073686f756c64206e6f74206861766560448201527f20312f3320746f6b656e730000000000000000000000000000000000000000006064820152608401610c59565b6040516001600160a01b03808516602483015283166044820152606481018290526132d39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526149d2565b6040516001600160a01b0383166024820152604481018290526114a890849063a9059cbb60e01b90606401613d42565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0383161790556110cc81614ab7565b613e5a60078281548110613e4057613e40615a76565b6000918252602090912001546001600160a01b0316614b1d565b8160078281548110613e6e57613e6e615a76565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550613c7e82614ab7565b6040805160c0810182526000808252602080830182905282840182905260608084018390526080840183905260a084015283518085019094528184528301849052909190613ef4826006614bc4565b905080600681518110613f0957613f09615a76565b602002602001015167ffffffffffffffff811115613f2957613f296155b4565b604051908082528060200260200182016040528015613f6e57816020015b6040805180820190915260008082526020820152815260200190600190039081613f475790505b508360a00181905250600081600681518110613f8c57613f8c615a76565b6020026020010181815250506000805b6020840151518451101561410e57613fb384614c7e565b90925090508160011415613fe257613fd2613fcd85614cb8565b614d75565b6001600160a01b03168552613f9c565b816002141561400857613ff484614d80565b67ffffffffffffffff166020860152613f9c565b816003141561402e5761401a84614d80565b67ffffffffffffffff166040860152613f9c565b81600414156140545761404084614d80565b67ffffffffffffffff166060860152613f9c565b816005141561407a5761406684614d80565b67ffffffffffffffff166080860152613f9c565b81600614156140ff5761409461408f85614cb8565b614e02565b8560a00151846006815181106140ac576140ac615a76565b6020026020010151815181106140c4576140c4615a76565b6020026020010181905250826006815181106140e2576140e2615a76565b6020026020010180518091906140f790615a8c565b905250613f9c565b6141098482614ea9565b613f9c565b50505050919050565b60075460009061412990600190615b0f565b905060005b60075481101561423457826001600160a01b03166007828154811061415557614155615a76565b6000918252602090912001546001600160a01b0316141561422257818110156141e6576007828154811061418b5761418b615a76565b600091825260209091200154600780546001600160a01b0390921691839081106141b7576141b7615a76565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60078054806141f7576141f7615d6b565b600082815260209020810160001990810180546001600160a01b03191690550190556114a883614b1d565b8061422c81615a8c565b91505061412e565b5060405162461bcd60e51b815260206004820152601460248201527f4e6f7420626f6e6465642076616c696461746f720000000000000000000000006044820152606401610c59565b600054600160a01b900460ff166142d65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c59565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081614331575082613be4565b81613bd78486615aa7565b6001600160a01b03811660009081526001602052604090205460ff166143a45760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610c59565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610fec565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001602052604090205460ff16156144ae5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610c59565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610fec565b600054600160a01b900460ff16156145505760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c59565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586143063390565b33600081815260058601602052604081208054909184918391906145b0908490615b0f565b92505081905550828660020160008282546145cb9190615b0f565b92505081905550838660010160008282546145e69190615b0f565b9091555050600286015460018701541480159061460557508054600210155b1561462a578054600287018054600090614620908490615b0f565b9091555050600081555b8054158061464157508054670de0b6b3a764000011155b61468d5760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f7567682072656d61696e696e672073686172657300000000006044820152606401610c59565b6001865460ff1660038111156146a5576146a56158a8565b1415614733576146df6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168386613da6565b816001600160a01b0316856001600160a01b03167f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c8660405161472491815260200190565b60405180910390a350506132d3565b6003865460ff16600381111561474b5761474b6158a8565b14156147955783600460008282546147639190615b0f565b9250508190555061478885866001600160a01b0316846001600160a01b031614612258565b6147955761479585614117565b6002810154600a906147b89063ffffffff80821691640100000000900416615d46565b63ffffffff161061480b5760405162461bcd60e51b815260206004820152601f60248201527f457863656564206d617820756e64656c65676174696f6e20656e7472696573006044820152606401610c59565b60006148208588600301548960040154613bbe565b9050808760040160008282546148369190615a5e565b92505081905550848760030160008282546148519190615a5e565b909155505060028201805463ffffffff6401000000009182900481166000908152600180870160205260409091208581554391810191909155835490939290041690600461489e83615b43565b91906101000a81548163ffffffff021916908363ffffffff16021790555050836001600160a01b0316876001600160a01b03167f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea8a6001015486600001548a61490690615b26565b6040805193845260208401929092529082015260600160405180910390a35050505050505050565b60008151604114156149625760208201516040830151606084015160001a61495886828585614f1b565b935050505061230c565b81516040141561498a57602082015160408301516149818583836150c4565b9250505061230c565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c59565b6000614a27826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166151079092919063ffffffff16565b8051909150156114a85780806020019051810190614a459190615d81565b6114a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c59565b6001600160a01b0381166000908152600860205260408120805460ff191660031781556007810180546fffffffffffffffff00000000000000001916905560018101546004805492939192909190614b10908490615a5e565b9091555060039050612e22565b6001600160a01b03811660009081526008602090815260408220805460ff191660029081178255909252600b90527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba9163454614b779043615a5e565b8160070160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550806001015460046000828254614bb79190615b0f565b9091555060029050612e22565b8151606090614bd4836001615a5e565b67ffffffffffffffff811115614bec57614bec6155b4565b604051908082528060200260200182016040528015614c15578160200160208202803683370190505b5091506000805b60208601515186511015614c7557614c3386614c7e565b80925081935050506001848381518110614c4f57614c4f615a76565b60200260200101818151614c639190615a5e565b905250614c708682614ea9565b614c1c565b50509092525090565b6000806000614c8c84614d80565b9050614c99600882615ac6565b9250806007166005811115614cb057614cb06158a8565b915050915091565b60606000614cc583614d80565b90506000818460000151614cd99190615a5e565b9050836020015151811115614ced57600080fd5b8167ffffffffffffffff811115614d0657614d066155b4565b6040519080825280601f01601f191660200182016040528015614d30576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015614d6a578181015183820152614d63602082615a5e565b9050614d48565b505050935250919050565b600061230c82615116565b602080820151825181019091015160009182805b600a811015614dfc5783811a9150614dad816007615aa7565b82607f16901b851794508160801660001415614dea57614dce816001615a5e565b86518790614ddd908390615a5e565b9052509395945050505050565b80614df481615a8c565b915050614d94565b50600080fd5b6040805180820182526000808252602080830182905283518085019094528184528301849052909190805b60208301515183511015614ea157614e4483614c7e565b90925090508160011415614e6e57614e5e613fcd84614cb8565b6001600160a01b03168452614e2d565b8160021415614e9257614e88614e8384614cb8565b61513e565b6020850152614e2d565b614e9c8382614ea9565b614e2d565b505050919050565b6000816005811115614ebd57614ebd6158a8565b1415614ecc576114a882614d80565b6002816005811115614ee057614ee06158a8565b1415610397576000614ef183614d80565b90508083600001818151614f059190615a5e565b905250602083015151835111156114a857600080fd5b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115614f985760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c59565b8360ff16601b1480614fad57508360ff16601c145b6150045760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c59565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015615058573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166150bb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c59565b95945050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821660ff83901c601b016150fd86828785614f1b565b9695505050505050565b6060613be18484600085615175565b6000815160141461512657600080fd5b50602001516c01000000000000000000000000900490565b600060208251111561514f57600080fd5b60208201519050815160206151649190615b0f565b61516f906008615aa7565b1c919050565b6060824710156151ed5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c59565b843b61523b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c59565b600080866001600160a01b031685876040516152579190615d9e565b60006040518083038185875af1925050503d8060008114615294576040519150601f19603f3d011682016040523d82523d6000602084013e615299565b606091505b50915091506152a98282866152b4565b979650505050505050565b606083156152c3575081613be4565b8251156152d35782518084602001fd5b8160405162461bcd60e51b8152600401610c599190615dba565b80356001600160a01b038116811461530457600080fd5b919050565b6000806040838503121561531c57600080fd5b615325836152ed565b946020939093013593505050565b80151581146110cc57600080fd5b60006020828403121561535357600080fd5b8135613be481615333565b60006020828403121561537057600080fd5b613be4826152ed565b60006020828403121561538b57600080fd5b5035919050565b60008083601f8401126153a457600080fd5b50813567ffffffffffffffff8111156153bc57600080fd5b6020830191508360208285010111156153d457600080fd5b9250929050565b60008083601f8401126153ed57600080fd5b50813567ffffffffffffffff81111561540557600080fd5b6020830191508360208260051b85010111156153d457600080fd5b6000806000806040858703121561543657600080fd5b843567ffffffffffffffff8082111561544e57600080fd5b61545a88838901615392565b9096509450602087013591508082111561547357600080fd5b50615480878288016153db565b95989497509550505050565b602080825282518282018190526000919060409081850190868401855b828110156154d757815180516001600160a01b031685528601518685015292840192908501906001016154a9565b5091979650505050505050565b80356009811061530457600080fd5b60006020828403121561550557600080fd5b613be4826154e4565b6000806040838503121561552157600080fd5b61552a836152ed565b9150602083013561553a81615333565b809150509250929050565b803567ffffffffffffffff8116811461530457600080fd5b60006020828403121561556f57600080fd5b613be482615545565b60008060006060848603121561558d57600080fd5b615596846152ed565b9250602084013591506155ab60408501615545565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156155f3576155f36155b4565b604052919050565b600082601f83011261560c57600080fd5b813567ffffffffffffffff811115615626576156266155b4565b615639601f8201601f19166020016155ca565b81815284602083860101111561564e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060006080888a03121561568657600080fd5b873567ffffffffffffffff8082111561569e57600080fd5b6156aa8b838c016155fb565b985060208a01359150808211156156c057600080fd5b6156cc8b838c016153db565b909850965060408a01359150808211156156e557600080fd5b6156f18b838c016153db565b909650945060608a013591508082111561570a57600080fd5b506157178a828b016153db565b989b979a50959850939692959293505050565b600067ffffffffffffffff80841115615745576157456155b4565b8360051b60206157568183016155ca565b8681529350908401908084018783111561576f57600080fd5b855b838110156157a3578035858111156157895760008081fd5b6157958a828a016155fb565b835250908201908201615771565b50505050509392505050565b600080604083850312156157c257600080fd5b823567ffffffffffffffff808211156157da57600080fd5b6157e6868387016155fb565b935060208501359150808211156157fc57600080fd5b508301601f8101851361580e57600080fd5b61581d8582356020840161572a565b9150509250929050565b60008060008060006060868803121561583f57600080fd5b615848866152ed565b9450602086013567ffffffffffffffff8082111561586557600080fd5b61587189838a01615392565b9096509450604088013591508082111561588a57600080fd5b5061589788828901615392565b969995985093965092949392505050565b634e487b7160e01b600052602160045260246000fd5b600481106158dc57634e487b7160e01b600052602160045260246000fd5b9052565b6020810161230c82846158be565b6000806040838503121561590157600080fd5b615325836154e4565b6000806040838503121561591d57600080fd5b615926836152ed565b9150615934602084016152ed565b90509250929050565b6000602080835260e083016001600160a01b038551168285015281850151604081818701528087015160608701526060870151915060c06080870152828251808552610100880191508584019450600093505b808410156159b95784518051835286015186830152938501936001939093019290820190615990565b50608088015160a088015260a088015160c0880152809550505050505092915050565b61014081016159eb828d6158be565b6001600160a01b039a909a16602082015260408101989098526060880196909652608087019490945260a086019290925260c085015267ffffffffffffffff90811660e08501529081166101008401521661012090910152919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115615a7157615a71615a48565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415615aa057615aa0615a48565b5060010190565b6000816000190483118215151615615ac157615ac1615a48565b500290565b600082615ae357634e487b7160e01b600052601260045260246000fd5b500490565b838152818360208301376000910160200190815292915050565b6000613be436848461572a565b600082821015615b2157615b21615a48565b500390565b6000600160ff1b821415615b3c57615b3c615a48565b5060000390565b600063ffffffff80831681811415615b5d57615b5d615a48565b6001019392505050565b60005b83811015615b82578181015183820152602001615b6a565b838111156132d35750506000910152565b60008151808452615bab816020860160208601615b67565b601f01601f19169290920160200192915050565b60608152600a60608201527f636f6d6d697373696f6e00000000000000000000000000000000000000000000608082015260a060208201526000615c0660a0830185615b93565b90506001600160a01b03831660408301529392505050565b6060815260046060820152631a5b9a5d60e21b608082015260a060208201526000615c0660a0830185615b93565b60608152601360608201527f6d696e2d73656c662d64656c65676174696f6e00000000000000000000000000608082015260a060208201526000615c0660a0830185615b93565b60608152600660608201527f7369676e65720000000000000000000000000000000000000000000000000000608082015260a060208201526000615c0660a0830185615b93565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000615d17606083018789615cda565b8281036020840152615d2a818688615cda565b9150506001600160a01b03831660408301529695505050505050565b600063ffffffff83811690831681811015615d6357615d63615a48565b039392505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615d9357600080fd5b8151613be481615333565b60008251615db0818460208701615b67565b9190910192915050565b602081526000613be46020830184615b9356fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212208112250cbc5e5384e152f5657479a415765ccce9f2514f662525ea8f512ac5b464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106103905760003560e01c80636ea69d62116101dc57806390e360f811610102578063b4f7fa34116100a0578063eb505dd51161006f578063eb505dd514610af8578063eecefef814610b25578063f2fde38b14610b52578063fa52c7d814610b7257600080fd5b8063b4f7fa3414610a5f578063c8f9f98414610a7f578063dcfdc1e114610ab8578063e909156d14610ad857600080fd5b8063960dc08a116100dc578063960dc08a146109955780639b19251a146109c9578063a310624f146109f9578063acc62ccf14610a3f57600080fd5b806390e360f8146109255780639146f1101461095557806392bb243c1461097557600080fd5b806382dc1ec41161017a57806388d996e81161014957806388d996e8146108b257806389f9aab5146108d25780638a74d5fe146108e75780638da5cb5b1461090757600080fd5b806382dc1ec4146108515780638338f0e51461087157806383cfb318146108875780638456cb591461089d57600080fd5b806371bc0216116101b657806371bc0216146107cc5780637a50dbd2146107ec57806380f51c121461080c57806382d7b4b81461083c57600080fd5b80636ea69d62146107825780636ef8d66d146107a2578063715018a6146107b757600080fd5b8063410ae02c116102c1578063525eba211161025f578063682dbc221161022e578063682dbc22146106ec57806368706e541461070c5780636b2c0f551461072c5780636d3087831461074c57600080fd5b8063525eba21146106775780635c975abb146106975780635e593eff146106b657806365d5d420146106d657600080fd5b806347abfdbf1161029b57806347abfdbf146105fd57806349955e391461061d57806351508f0a1461063d57806351fb012d1461065d57600080fd5b8063410ae02c1461058457806346fbf68e146105a4578063473849bd146105dd57600080fd5b80632fa4d12b1161032e5780633985c4e6116103085780633985c4e6146104e45780633af32abf146105045780633f4ba83a1461054d5780634021d4d51461056257600080fd5b80632fa4d12b1461048257806336f1635f146104ba578063386c024a146104cf57600080fd5b8063145aa1161161036a578063145aa116146103fe5780631a2032571461041e5780631cfe4f0b1461043e578063291d95491461046257600080fd5b8063026e402b1461039c578063052d9e7e146103be57806310154bad146103de57600080fd5b3661039757005b600080fd5b3480156103a857600080fd5b506103bc6103b7366004615309565b610c10565b005b3480156103ca57600080fd5b506103bc6103d9366004615341565b610e90565b3480156103ea57600080fd5b506103bc6103f936600461535e565b610eeb565b34801561040a57600080fd5b506103bc610419366004615379565b610ff7565b34801561042a57600080fd5b506103bc610439366004615379565b6110cf565b34801561044a57600080fd5b506006545b6040519081526020015b60405180910390f35b34801561046e57600080fd5b506103bc61047d36600461535e565b611145565b34801561048e57600080fd5b50600c546104a2906001600160a01b031681565b6040516001600160a01b039091168152602001610459565b3480156104c657600080fd5b506103bc611246565b3480156104db57600080fd5b5061044f6115d4565b3480156104f057600080fd5b506103bc6104ff366004615420565b611601565b34801561051057600080fd5b5061053d61051f36600461535e565b6001600160a01b031660009081526002602052604090205460ff1690565b6040519015158152602001610459565b34801561055957600080fd5b506103bc611da7565b34801561056e57600080fd5b50610577611e10565b604051610459919061548c565b34801561059057600080fd5b5061044f61059f3660046154f3565b611f11565b3480156105b057600080fd5b5061053d6105bf36600461535e565b6001600160a01b031660009081526001602052604090205460ff1690565b3480156105e957600080fd5b506103bc6105f836600461535e565b611f50565b34801561060957600080fd5b5061053d61061836600461550e565b612258565b34801561062957600080fd5b506103bc61063836600461555d565b612312565b34801561064957600080fd5b506103bc61065836600461535e565b612474565b34801561066957600080fd5b5060035461053d9060ff1681565b34801561068357600080fd5b506103bc610692366004615578565b6124de565b3480156106a357600080fd5b50600054600160a01b900460ff1661053d565b3480156106c257600080fd5b506103bc6106d1366004615379565b612980565b3480156106e257600080fd5b5061044f60045481565b3480156106f857600080fd5b506103bc61070736600461566b565b612b99565b34801561071857600080fd5b506103bc61072736600461535e565b612bfc565b34801561073857600080fd5b506103bc61074736600461535e565b612c66565b34801561075857600080fd5b506104a261076736600461535e565b6009602052600090815260409020546001600160a01b031681565b34801561078e57600080fd5b50600d546104a2906001600160a01b031681565b3480156107ae57600080fd5b506103bc612cb7565b3480156107c357600080fd5b506103bc612cc0565b3480156107d857600080fd5b506103bc6107e736600461535e565b612d12565b3480156107f857600080fd5b506103bc61080736600461535e565b612e5a565b34801561081857600080fd5b5061053d61082736600461535e565b60016020526000908152604090205460ff1681565b34801561084857600080fd5b506103bc61308c565b34801561085d57600080fd5b506103bc61086c36600461535e565b613123565b34801561087d57600080fd5b5061044f600e5481565b34801561089357600080fd5b5061044f60055481565b3480156108a957600080fd5b506103bc613174565b3480156108be57600080fd5b506103bc6108cd366004615309565b6131db565b3480156108de57600080fd5b5060075461044f565b3480156108f357600080fd5b5061053d6109023660046157af565b6132d9565b34801561091357600080fd5b506000546001600160a01b03166104a2565b34801561093157600080fd5b5061053d610940366004615379565b600a6020526000908152604090205460ff1681565b34801561096157600080fd5b506103bc610970366004615827565b6134bd565b34801561098157600080fd5b506104a2610990366004615379565b61358b565b3480156109a157600080fd5b506104a27f000000000000000000000000000000000000000000000000000000000000000081565b3480156109d557600080fd5b5061053d6109e436600461535e565b60026020526000908152604090205460ff1681565b348015610a0557600080fd5b50610a32610a1436600461535e565b6001600160a01b031660009081526008602052604090205460ff1690565b60405161045991906158e0565b348015610a4b57600080fd5b506104a2610a5a366004615379565b6135b5565b348015610a6b57600080fd5b5061053d610a7a36600461535e565b6135c5565b348015610a8b57600080fd5b5061044f610a9a36600461535e565b6001600160a01b031660009081526008602052604090206001015490565b348015610ac457600080fd5b506103bc610ad3366004615309565b6135fd565b348015610ae457600080fd5b506103bc610af33660046158ee565b6136f5565b348015610b0457600080fd5b5061044f610b133660046154f3565b600b6020526000908152604090205481565b348015610b3157600080fd5b50610b45610b4036600461590a565b6137f8565b604051610459919061593d565b348015610b5e57600080fd5b506103bc610b6d36600461535e565b613af1565b348015610b7e57600080fd5b50610bfa610b8d36600461535e565b600860205260009081526040902080546001820154600283015460038401546004850154600686015460079096015460ff8616966101009096046001600160a01b0316959067ffffffffffffffff80821691680100000000000000008104821691600160801b909104168a565b6040516104599a999897969594939291906159dc565b600054600160a01b900460ff1615610c625760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b33670de0b6b3a7640000821015610cbb5760405162461bcd60e51b815260206004820152601860248201527f4d696e696d616c20616d6f756e7420697320312043454c5200000000000000006044820152606401610c59565b6001600160a01b038316600090815260086020526040812090815460ff166003811115610cea57610cea6158a8565b1415610d385760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b6000610d4d8483600101548460020154613bbe565b6001600160a01b0384166000908152600584016020526040812080549293509183918391610d7c908490615a5e565b9250508190555081836002016000828254610d979190615a5e565b9250508190555084836001016000828254610db29190615a5e565b9091555060039050835460ff166003811115610dd057610dd06158a8565b1415610dfb578460046000828254610de89190615a5e565b90915550506001830154610dfb90613beb565b610e306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016853088613d0e565b6001830154815460408051928352602083019190915281018690526001600160a01b0380861691908816907f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea9060600160405180910390a3505050505050565b6000546001600160a01b03163314610ed85760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6003805460ff1916911515919091179055565b6000546001600160a01b03163314610f335760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6001600160a01b03811660009081526002602052604090205460ff1615610f9c5760405162461bcd60e51b815260206004820152601360248201527f416c72656164792077686974656c6973746564000000000000000000000000006044820152606401610c59565b6001600160a01b038116600081815260026020908152604091829020805460ff1916600117905590519182527fee1504a83b6d4a361f4c1dc78ab59bfa30d6a3b6612c403e86bb01ef2984295f91015b60405180910390a150565b600054600160a01b900460ff166110505760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c59565b6000546001600160a01b031633146110985760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6110cc6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383613da6565b50565b6000546001600160a01b031633146111175760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6008600052600b6020527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec9856935855565b6000546001600160a01b0316331461118d5760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6001600160a01b03811660009081526002602052604090205460ff166111f55760405162461bcd60e51b815260206004820152600f60248201527f4e6f742077686974656c697374656400000000000000000000000000000000006044820152606401610c59565b6001600160a01b038116600081815260026020908152604091829020805460ff1916905590519182527f270d9b30cf5b0793bbfd54c9d5b94aeb49462b8148399000265144a8722da6b69101610fec565b336000818152600960205260409020546001600160a01b03161561127f5750336000908152600960205260409020546001600160a01b03165b6001600160a01b03811660009081526008602052604090206001815460ff1660038111156112af576112af6158a8565b14806112d057506002815460ff1660038111156112ce576112ce6158a8565b145b61131c5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076616c696461746f722073746174757300000000000000006044820152606401610c59565b600781015467ffffffffffffffff1643101561137a5760405162461bcd60e51b815260206004820152601660248201527f426f6e6420626c6f636b206e6f742072656163686564000000000000000000006044820152606401610c59565b6005544310156113cc5760405162461bcd60e51b815260206004820152601b60248201527f546f6f206672657175656e742076616c696461746f7220626f6e6400000000006044820152606401610c59565b6007600052600b6020527ff5559028dc9ba50d75343c779b2f75e13a84a14662932fc67a486f263ca31a96546114029043615a5e565b600555611410826001612258565b61145c5760405162461bcd60e51b815260206004820152601360248201527f4e6f742068617665206d696e20746f6b656e73000000000000000000000000006044820152606401610c59565b6003600052600b6020527f64c15cc42be7899b001f818cf4433057002112c418d1d3a67cd5cb453051d33e546007548111156114ad5761149b83613dd6565b6114a88260010154613beb565b505050565b6000196000805b83811015611562578260086000600784815481106114d4576114d4615a76565b60009182526020808320909101546001600160a01b03168352820192909252604001902060010154101561155057809150600860006007838154811061151c5761151c615a76565b60009182526020808320909101546001600160a01b0316835282019290925260400190206001015492508261155057611562565b8061155a81615a8c565b9150506114b4565b50818460010154116115b65760405162461bcd60e51b815260206004820152601360248201527f496e73756666696369656e7420746f6b656e73000000000000000000000000006044820152606401610c59565b6115c08582613e2a565b6115cd8460010154613beb565b5050505050565b6000600360045460026115e79190615aa7565b6115f19190615ac6565b6115fc906001615a5e565b905090565b600054600160a01b900460ff161561164e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c59565b600046306040516020016116a492919091825260601b6bffffffffffffffffffffffff191660208201527f536c617368000000000000000000000000000000000000000000000000000000603482015260390190565b6040516020818303038152906040528051906020012090506116ee8186866040516020016116d493929190615ae8565b60408051601f198184030181529190526109028486615b02565b50600061173086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613ea592505050565b9050806060015167ffffffffffffffff16421061178f5760405162461bcd60e51b815260206004820152600d60248201527f536c6173682065787069726564000000000000000000000000000000000000006044820152606401610c59565b620f4240816040015167ffffffffffffffff1611156117f05760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420736c61736820666163746f720000000000000000000000006044820152606401610c59565b6008600052600b6020527f71f482bdabd1ea844d62c952b094e632959690d7448ca2aab34034ec9856935854604082015167ffffffffffffffff1611156118795760405162461bcd60e51b815260206004820152601760248201527f457863656564206d617820736c61736820666163746f720000000000000000006044820152606401610c59565b60208082015167ffffffffffffffff166000908152600a909152604090205460ff16156118e85760405162461bcd60e51b815260206004820152601060248201527f5573656420736c617368206e6f6e6365000000000000000000000000000000006044820152606401610c59565b60208082015167ffffffffffffffff166000908152600a82526040808220805460ff1916600117905583516001600160a01b0381168352600890935290206003815460ff16600381111561193e5761193e6158a8565b148061195f57506002815460ff16600381111561195d5761195d6158a8565b145b6119ab5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642076616c696461746f722073746174757300000000000000006044820152606401610c59565b6000620f4240846040015167ffffffffffffffff1683600101546119cf9190615aa7565b6119d99190615ac6565b9050808260010160008282546119ef9190615b0f565b9091555060039050825460ff166003811115611a0d57611a0d6158a8565b1415611a5c578060046000828254611a259190615b0f565b9091555050608084015167ffffffffffffffff16151580611a4e5750611a4c836001612258565b155b15611a5c57611a5c83614117565b6002825460ff166003811115611a7457611a746158a8565b148015611a8f57506000846080015167ffffffffffffffff16115b15611ad2576080840151611aad9067ffffffffffffffff1643615a5e565b60078301805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b60006001600160a01b0316836001600160a01b03167f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea8460010154600085611b1990615b26565b6040805193845260208401929092529082015260600160405180910390a36000620f4240856040015167ffffffffffffffff168460030154611b5b9190615aa7565b611b659190615ac6565b905080836003016000828254611b7b9190615b0f565b90915550611b8b90508183615a5e565b91506000805b8660a0015151811015611d255760008760a001518281518110611bb657611bb6615a76565b6020026020010151905084816020015184611bd19190615a5e565b1115611be757611be18386615b0f565b60208201525b602081015115611d12576020810151611c009084615a5e565b81519093506001600160a01b0316611c8b576020810151611c4d906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903390613da6565b60208082015160405190815233917fb1375221b23a15d2f6887c7dbdc6745a07d9a5245076d51fb41879590ebbd2a3910160405180910390a2611d12565b80516020820151611cc6916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691613da6565b80600001516001600160a01b03167fb1375221b23a15d2f6887c7dbdc6745a07d9a5245076d51fb41879590ebbd2a38260200151604051611d0991815260200190565b60405180910390a25b5080611d1d81615a8c565b915050611b91565b50611d308184615b0f565b600e6000828254611d419190615a5e565b90915550506020808701516040805167ffffffffffffffff90921682529181018590526001600160a01b038716917f10863f35bc5db9fda133333468bf7b1ceaaa88cb4263c061f890f97b79bf9008910160405180910390a25050505050505050505050565b3360009081526001602052604090205460ff16611e065760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610c59565b611e0e61427d565b565b60075460609060009067ffffffffffffffff811115611e3157611e316155b4565b604051908082528060200260200182016040528015611e7657816020015b6040805180820190915260008082526020820152815260200190600190039081611e4f5790505b50905060005b600754811015611f0b57600060078281548110611e9b57611e9b615a76565b60009182526020808320909101546040805180820182526001600160a01b039092168083528085526008845293206001015491810191909152845191925090849084908110611eec57611eec615a76565b6020026020010181905250508080611f0390615a8c565b915050611e7c565b50919050565b6000600b6000836008811115611f2957611f296158a8565b6008811115611f3a57611f3a6158a8565b8152602001908152602001600020549050919050565b6001600160a01b03811660009081526008602052604081203391815460ff166003811115611f8057611f806158a8565b1415611fce5760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b6001600160a01b03821660009081526005820160209081526040822060028352600b9091527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba916345483549192909160019060ff166003811115612032576120326158a8565b60028501549114915063ffffffff1660005b600285015463ffffffff640100000000909104811690831610156120f6578280612094575063ffffffff821660009081526001808701602052604090912001544390612091908690615a5e565b11155b156120df5763ffffffff821660009081526001860160205260409020546120bb9082615a5e565b63ffffffff83166000908152600180880160205260408220828155015590506120e4565b6120f6565b816120ee81615b43565b925050612044565b60028501805463ffffffff191663ffffffff8416179055806121805760405162461bcd60e51b815260206004820152602560248201527f4e6f20756e64656c65676174696f6e20726561647920746f20626520636f6d7060448201527f6c657465640000000000000000000000000000000000000000000000000000006064820152608401610c59565b60006121958288600301548960040154614323565b9050818760040160008282546121ab9190615b0f565b92505081905550808760030160008282546121c69190615b0f565b9091555061220090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168983613da6565b876001600160a01b0316896001600160a01b03167f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c8360405161224591815260200190565b60405180910390a3505050505050505050565b6001600160a01b03821660009081526008602090815260408220600181015460048452600b9092527f12d0c11577e2f0950f57c455c117796550b79f444811db8ba2f69c57b646c784549091908110156122b75760009250505061230c565b8315612305576001600160a01b038516600090815260058301602052604081205460028401546122e991908490614323565b90508260060154811015612303576000935050505061230c565b505b6001925050505b92915050565b33600081815260086020526040812090815460ff166003811115612338576123386158a8565b14156123865760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b6127108367ffffffffffffffff1611156123e25760405162461bcd60e51b815260206004820152601060248201527f496e76616c6964206e65772072617465000000000000000000000000000000006044820152606401610c59565b60078101805467ffffffffffffffff60801b1916600160801b67ffffffffffffffff8616908102919091179091556040805160208101929092526001600160a01b038416917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261246791600090615bbf565b60405180910390a2505050565b6000546001600160a01b031633146124bc5760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b600054600160a01b900460ff161561252b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c59565b60035460ff1615612595573360009081526002602052604090205460ff166125955760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f742077686974656c6973746564000000000000006044820152606401610c59565b33600081815260086020526040812090815460ff1660038111156125bb576125bb6158a8565b146126085760405162461bcd60e51b815260206004820152601860248201527f56616c696461746f7220697320696e697469616c697a656400000000000000006044820152606401610c59565b6001600160a01b03851660009081526008602052604081205460ff166003811115612635576126356158a8565b146126825760405162461bcd60e51b815260206004820152601960248201527f5369676e6572206973206f746865722076616c696461746f72000000000000006044820152606401610c59565b6001600160a01b0382811660009081526009602052604090205416156126ea5760405162461bcd60e51b815260206004820152601960248201527f56616c696461746f72206973206f74686572207369676e6572000000000000006044820152606401610c59565b6001600160a01b0385811660009081526009602052604090205416156127525760405162461bcd60e51b815260206004820152601360248201527f5369676e657220616c72656164792075736564000000000000000000000000006044820152606401610c59565b6127108367ffffffffffffffff1611156127ae5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420636f6d6d697373696f6e20726174650000000000000000006044820152606401610c59565b6005600052600b6020527febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f4548410156128295760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74206d696e2073656c662064656c65676174696f6e6044820152606401610c59565b80547fffffffffffffffffffffff0000000000000000000000000000000000000000001660ff196101006001600160a01b03888116918202929092169290921760019081178455600680850188905560078501805467ffffffffffffffff60801b1916600160801b67ffffffffffffffff8a1602179055805491820190557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b031990811692861692831790915560009283526009602052604090922080549092161790556129018285610c10565b604080516001600160a01b03878116602083015291810186905267ffffffffffffffff85166060820152908316907f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c9060800160408051601f198184030181529082905261297191600090615c1e565b60405180910390a25050505050565b33600081815260086020526040812090815460ff1660038111156129a6576129a66158a8565b14156129f45760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b6005600052600b6020527febae6141bae5521e99e0a8d610356b0f501fea54980b59c84841db43ba7204f454831015612a6f5760405162461bcd60e51b815260206004820181905260248201527f496e73756666696369656e74206d696e2073656c662064656c65676174696f6e6044820152606401610c59565b8060060154831015612b3c576003815460ff166003811115612a9357612a936158a8565b1415612ae15760405162461bcd60e51b815260206004820152601360248201527f56616c696461746f7220697320626f6e646564000000000000000000000000006044820152606401610c59565b6006600052600b6020527f0387e9d1203691d8e3362a7e4c6723de358a4010d7f31ecbec3fbfc61d1c75fc54612b179043615a5e565b60078201805467ffffffffffffffff191667ffffffffffffffff929092169190911790555b6006810183905560408051602081018590526001600160a01b038416917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261246791600090615c4c565b612ba7876109028789615b02565b612bf35760405162461bcd60e51b815260206004820152601560248201527f4661696c656420746f20766572696679207369677300000000000000000000006044820152606401610c59565b50505050505050565b6000546001600160a01b03163314612c445760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314612cae5760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6110cc8161433c565b611e0e3361433c565b6000546001600160a01b03163314612d085760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b611e0e60006143f5565b6001600160a01b03811660009081526008602052604090206002815460ff166003811115612d4257612d426158a8565b14612d8f5760405162461bcd60e51b815260206004820152601760248201527f56616c696461746f72206e6f7420756e626f6e64696e670000000000000000006044820152606401610c59565b600781015468010000000000000000900467ffffffffffffffff16431015612df95760405162461bcd60e51b815260206004820152601860248201527f556e626f6e6420626c6f636b206e6f74207265616368656400000000000000006044820152606401610c59565b805460ff1916600190811782556007820180546fffffffffffffffff0000000000000000191690555b6040516001600160a01b038416907fd5e59fa85493a77fb57f6bf9080f2f71fde9de0eadc62b27b43b6263f3f1f59a90600090a35050565b33600081815260086020526040812090815460ff166003811115612e8057612e806158a8565b1415612ece5760405162461bcd60e51b815260206004820152601960248201527f56616c696461746f72206e6f7420696e697469616c697a6564000000000000006044820152606401610c59565b6001600160a01b038381166000908152600960205260409020541615612f365760405162461bcd60e51b815260206004820152601360248201527f5369676e657220616c72656164792075736564000000000000000000000000006044820152606401610c59565b816001600160a01b0316836001600160a01b031614612fc9576001600160a01b03831660009081526008602052604081205460ff166003811115612f7c57612f7c6158a8565b14612fc95760405162461bcd60e51b815260206004820152601960248201527f5369676e6572206973206f746865722076616c696461746f72000000000000006044820152606401610c59565b8054610100908190046001600160a01b03908116600090815260096020908152604080832080546001600160a01b031990811690915586547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1689861696870217875585845292819020805490931693871693841790925581519081019390935290917f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c910160408051601f198184030181529082905261246791600090615c93565b6000600e54116130de5760405162461bcd60e51b815260206004820152601260248201527f4e6f7468696e6720746f20636f6c6c65637400000000000000000000000000006044820152606401610c59565b600d54600e5461311c916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692911690613da6565b6000600e55565b6000546001600160a01b0316331461316b5760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6110cc81614445565b3360009081526001602052604090205460ff166131d35760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610c59565b611e0e614503565b670de0b6b3a76400008110156132335760405162461bcd60e51b815260206004820152601960248201527f4d696e696d616c20616d6f756e742069732031207368617265000000000000006044820152606401610c59565b6001600160a01b038216600090815260086020526040812090815460ff166003811115613262576132626158a8565b14156132b05760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b60006132c58383600101548460020154614323565b90506132d38285838661458b565b50505050565b60008061333a84805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050600080806133486115d4565b905060005b865181101561347457600061338488838151811061336d5761336d615a76565b60200260200101518761492e90919063ffffffff16565b9050836001600160a01b0316816001600160a01b0316116133e75760405162461bcd60e51b815260206004820152601e60248201527f5369676e657273206e6f7420696e20617363656e64696e67206f7264657200006044820152606401610c59565b6001600160a01b038082166000908152600960209081526040808320549093168252600890522090935083906003815460ff16600381111561342b5761342b6158a8565b14613437575050613462565b60018101546134469087615a5e565b955083861061345f57600197505050505050505061230c565b50505b8061346c81615a8c565b91505061334d565b5060405162461bcd60e51b815260206004820152601260248201527f51756f72756d206e6f74207265616368656400000000000000000000000000006044820152606401610c59565b6001600160a01b038516600090815260086020526040812090815460ff1660038111156134ec576134ec6158a8565b141561353a5760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b856001600160a01b03167f3683b59f352bc42833c21c736ba7631d3e35fed49723ebac8298d4e0f36e512c868686863360405161357b959493929190615d03565b60405180910390a2505050505050565b6006818154811061359b57600080fd5b6000918252602090912001546001600160a01b0316905081565b6007818154811061359b57600080fd5b600060036001600160a01b03831660009081526008602052604090205460ff1660038111156135f6576135f66158a8565b1492915050565b670de0b6b3a76400008110156136555760405162461bcd60e51b815260206004820152601860248201527f4d696e696d616c20616d6f756e7420697320312043454c5200000000000000006044820152606401610c59565b6001600160a01b038216600090815260086020526040812090815460ff166003811115613684576136846158a8565b14156136d25760405162461bcd60e51b815260206004820152601c60248201527f56616c696461746f72206973206e6f7420696e697469616c697a6564000000006044820152606401610c59565b60006136e78383600101548460020154613bbe565b90506132d38285858461458b565b600c546001600160a01b0316331461374f5760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f7420676f7620636f6e74726163740000000000006044820152606401610c59565b6003826008811115613763576137636158a8565b14156137bb576007548110156137bb5760405162461bcd60e51b815260206004820152600d60248201527f696e76616c69642076616c7565000000000000000000000000000000000000006044820152606401610c59565b80600b60008460088111156137d2576137d26158a8565b60088111156137e3576137e36158a8565b81526020810191909152604001600020555050565b61383a6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016060815260200160008152602001600081525090565b6001600160a01b038084166000908152600860209081526040808320938616835260058401909152812080546001840154600285015492939261387e929190614323565b60026000908152600b6020527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba916345485549293509091829190829060019060ff1660038111156138cf576138cf6158a8565b6002880154911491506000906138f69063ffffffff80821691640100000000900416615d46565b63ffffffff16905060008167ffffffffffffffff811115613919576139196155b4565b60405190808252806020026020018201604052801561395e57816020015b60408051808201909152600080825260208201528152602001906001900390816139375790505b50905060005b82811015613a7557600289015460018a01906000906139899063ffffffff1684615a5e565b8152602001908152602001600020604051806040016040529081600082015481526020016001820154815250508282815181106139c8576139c8615a76565b60200260200101819052508181815181106139e5576139e5615a76565b602002602001015160000151876139fc9190615a5e565b96508380613a3257504385838381518110613a1957613a19615a76565b602002602001015160200151613a2f9190615a5e565b11155b15613a6357818181518110613a4957613a49615a76565b60200260200101516000015186613a609190615a5e565b95505b80613a6d81615a8c565b915050613964565b506000613a8b878b600301548c60040154614323565b90506000613aa2878c600301548d60040154614323565b90506040518060c001604052808f6001600160a01b031681526020018a81526020018b600001548152602001848152602001838152602001828152509b50505050505050505050505092915050565b6000546001600160a01b03163314613b395760405162461bcd60e51b81526020600482018190526024820152600080516020615dce8339815191526044820152606401610c59565b6001600160a01b038116613bb55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c59565b6110cc816143f5565b600082613bcc575082613be4565b82613bd78386615aa7565b613be19190615ac6565b90505b9392505050565b6007546002811480613bfd5750806003145b15613c8257613c0a6115d4565b8210613c7e5760405162461bcd60e51b815260206004820152602e60248201527f53696e676c652076616c696461746f722073686f756c64206e6f74206861766560448201527f2071756f72756d20746f6b656e730000000000000000000000000000000000006064820152608401610c59565b5050565b6003811115613c7e576003600454613c9a9190615ac6565b8210613c7e5760405162461bcd60e51b815260206004820152602b60248201527f53696e676c652076616c696461746f722073686f756c64206e6f74206861766560448201527f20312f3320746f6b656e730000000000000000000000000000000000000000006064820152608401610c59565b6040516001600160a01b03808516602483015283166044820152606481018290526132d39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526149d2565b6040516001600160a01b0383166024820152604481018290526114a890849063a9059cbb60e01b90606401613d42565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b0383161790556110cc81614ab7565b613e5a60078281548110613e4057613e40615a76565b6000918252602090912001546001600160a01b0316614b1d565b8160078281548110613e6e57613e6e615a76565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550613c7e82614ab7565b6040805160c0810182526000808252602080830182905282840182905260608084018390526080840183905260a084015283518085019094528184528301849052909190613ef4826006614bc4565b905080600681518110613f0957613f09615a76565b602002602001015167ffffffffffffffff811115613f2957613f296155b4565b604051908082528060200260200182016040528015613f6e57816020015b6040805180820190915260008082526020820152815260200190600190039081613f475790505b508360a00181905250600081600681518110613f8c57613f8c615a76565b6020026020010181815250506000805b6020840151518451101561410e57613fb384614c7e565b90925090508160011415613fe257613fd2613fcd85614cb8565b614d75565b6001600160a01b03168552613f9c565b816002141561400857613ff484614d80565b67ffffffffffffffff166020860152613f9c565b816003141561402e5761401a84614d80565b67ffffffffffffffff166040860152613f9c565b81600414156140545761404084614d80565b67ffffffffffffffff166060860152613f9c565b816005141561407a5761406684614d80565b67ffffffffffffffff166080860152613f9c565b81600614156140ff5761409461408f85614cb8565b614e02565b8560a00151846006815181106140ac576140ac615a76565b6020026020010151815181106140c4576140c4615a76565b6020026020010181905250826006815181106140e2576140e2615a76565b6020026020010180518091906140f790615a8c565b905250613f9c565b6141098482614ea9565b613f9c565b50505050919050565b60075460009061412990600190615b0f565b905060005b60075481101561423457826001600160a01b03166007828154811061415557614155615a76565b6000918252602090912001546001600160a01b0316141561422257818110156141e6576007828154811061418b5761418b615a76565b600091825260209091200154600780546001600160a01b0390921691839081106141b7576141b7615a76565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60078054806141f7576141f7615d6b565b600082815260209020810160001990810180546001600160a01b03191690550190556114a883614b1d565b8061422c81615a8c565b91505061412e565b5060405162461bcd60e51b815260206004820152601460248201527f4e6f7420626f6e6465642076616c696461746f720000000000000000000000006044820152606401610c59565b600054600160a01b900460ff166142d65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c59565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600081614331575082613be4565b81613bd78486615aa7565b6001600160a01b03811660009081526001602052604090205460ff166143a45760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610c59565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9101610fec565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001602052604090205460ff16156144ae5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610c59565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610fec565b600054600160a01b900460ff16156145505760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610c59565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586143063390565b33600081815260058601602052604081208054909184918391906145b0908490615b0f565b92505081905550828660020160008282546145cb9190615b0f565b92505081905550838660010160008282546145e69190615b0f565b9091555050600286015460018701541480159061460557508054600210155b1561462a578054600287018054600090614620908490615b0f565b9091555050600081555b8054158061464157508054670de0b6b3a764000011155b61468d5760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f7567682072656d61696e696e672073686172657300000000006044820152606401610c59565b6001865460ff1660038111156146a5576146a56158a8565b1415614733576146df6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168386613da6565b816001600160a01b0316856001600160a01b03167f4d10bd049775c77bd7f255195afba5088028ecb3c7c277d393ccff7934f2f92c8660405161472491815260200190565b60405180910390a350506132d3565b6003865460ff16600381111561474b5761474b6158a8565b14156147955783600460008282546147639190615b0f565b9250508190555061478885866001600160a01b0316846001600160a01b031614612258565b6147955761479585614117565b6002810154600a906147b89063ffffffff80821691640100000000900416615d46565b63ffffffff161061480b5760405162461bcd60e51b815260206004820152601f60248201527f457863656564206d617820756e64656c65676174696f6e20656e7472696573006044820152606401610c59565b60006148208588600301548960040154613bbe565b9050808760040160008282546148369190615a5e565b92505081905550848760030160008282546148519190615a5e565b909155505060028201805463ffffffff6401000000009182900481166000908152600180870160205260409091208581554391810191909155835490939290041690600461489e83615b43565b91906101000a81548163ffffffff021916908363ffffffff16021790555050836001600160a01b0316876001600160a01b03167f2e289e5a72f8e92e344eb866e0a32621f332835d2df2cf1f76e5a345b23cf1ea8a6001015486600001548a61490690615b26565b6040805193845260208401929092529082015260600160405180910390a35050505050505050565b60008151604114156149625760208201516040830151606084015160001a61495886828585614f1b565b935050505061230c565b81516040141561498a57602082015160408301516149818583836150c4565b9250505061230c565b60405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610c59565b6000614a27826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166151079092919063ffffffff16565b8051909150156114a85780806020019051810190614a459190615d81565b6114a85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c59565b6001600160a01b0381166000908152600860205260408120805460ff191660031781556007810180546fffffffffffffffff00000000000000001916905560018101546004805492939192909190614b10908490615a5e565b9091555060039050612e22565b6001600160a01b03811660009081526008602090815260408220805460ff191660029081178255909252600b90527fa50eece07c7db1631545c0069bd8f5f54d5935e215d59097edf258a44ba9163454614b779043615a5e565b8160070160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550806001015460046000828254614bb79190615b0f565b9091555060029050612e22565b8151606090614bd4836001615a5e565b67ffffffffffffffff811115614bec57614bec6155b4565b604051908082528060200260200182016040528015614c15578160200160208202803683370190505b5091506000805b60208601515186511015614c7557614c3386614c7e565b80925081935050506001848381518110614c4f57614c4f615a76565b60200260200101818151614c639190615a5e565b905250614c708682614ea9565b614c1c565b50509092525090565b6000806000614c8c84614d80565b9050614c99600882615ac6565b9250806007166005811115614cb057614cb06158a8565b915050915091565b60606000614cc583614d80565b90506000818460000151614cd99190615a5e565b9050836020015151811115614ced57600080fd5b8167ffffffffffffffff811115614d0657614d066155b4565b6040519080825280601f01601f191660200182016040528015614d30576020820181803683370190505b50602080860151865192955091818601919083010160005b85811015614d6a578181015183820152614d63602082615a5e565b9050614d48565b505050935250919050565b600061230c82615116565b602080820151825181019091015160009182805b600a811015614dfc5783811a9150614dad816007615aa7565b82607f16901b851794508160801660001415614dea57614dce816001615a5e565b86518790614ddd908390615a5e565b9052509395945050505050565b80614df481615a8c565b915050614d94565b50600080fd5b6040805180820182526000808252602080830182905283518085019094528184528301849052909190805b60208301515183511015614ea157614e4483614c7e565b90925090508160011415614e6e57614e5e613fcd84614cb8565b6001600160a01b03168452614e2d565b8160021415614e9257614e88614e8384614cb8565b61513e565b6020850152614e2d565b614e9c8382614ea9565b614e2d565b505050919050565b6000816005811115614ebd57614ebd6158a8565b1415614ecc576114a882614d80565b6002816005811115614ee057614ee06158a8565b1415610397576000614ef183614d80565b90508083600001818151614f059190615a5e565b905250602083015151835111156114a857600080fd5b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115614f985760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610c59565b8360ff16601b1480614fad57508360ff16601c145b6150045760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610c59565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015615058573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166150bb5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610c59565b95945050505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821660ff83901c601b016150fd86828785614f1b565b9695505050505050565b6060613be18484600085615175565b6000815160141461512657600080fd5b50602001516c01000000000000000000000000900490565b600060208251111561514f57600080fd5b60208201519050815160206151649190615b0f565b61516f906008615aa7565b1c919050565b6060824710156151ed5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c59565b843b61523b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c59565b600080866001600160a01b031685876040516152579190615d9e565b60006040518083038185875af1925050503d8060008114615294576040519150601f19603f3d011682016040523d82523d6000602084013e615299565b606091505b50915091506152a98282866152b4565b979650505050505050565b606083156152c3575081613be4565b8251156152d35782518084602001fd5b8160405162461bcd60e51b8152600401610c599190615dba565b80356001600160a01b038116811461530457600080fd5b919050565b6000806040838503121561531c57600080fd5b615325836152ed565b946020939093013593505050565b80151581146110cc57600080fd5b60006020828403121561535357600080fd5b8135613be481615333565b60006020828403121561537057600080fd5b613be4826152ed565b60006020828403121561538b57600080fd5b5035919050565b60008083601f8401126153a457600080fd5b50813567ffffffffffffffff8111156153bc57600080fd5b6020830191508360208285010111156153d457600080fd5b9250929050565b60008083601f8401126153ed57600080fd5b50813567ffffffffffffffff81111561540557600080fd5b6020830191508360208260051b85010111156153d457600080fd5b6000806000806040858703121561543657600080fd5b843567ffffffffffffffff8082111561544e57600080fd5b61545a88838901615392565b9096509450602087013591508082111561547357600080fd5b50615480878288016153db565b95989497509550505050565b602080825282518282018190526000919060409081850190868401855b828110156154d757815180516001600160a01b031685528601518685015292840192908501906001016154a9565b5091979650505050505050565b80356009811061530457600080fd5b60006020828403121561550557600080fd5b613be4826154e4565b6000806040838503121561552157600080fd5b61552a836152ed565b9150602083013561553a81615333565b809150509250929050565b803567ffffffffffffffff8116811461530457600080fd5b60006020828403121561556f57600080fd5b613be482615545565b60008060006060848603121561558d57600080fd5b615596846152ed565b9250602084013591506155ab60408501615545565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156155f3576155f36155b4565b604052919050565b600082601f83011261560c57600080fd5b813567ffffffffffffffff811115615626576156266155b4565b615639601f8201601f19166020016155ca565b81815284602083860101111561564e57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060008060006080888a03121561568657600080fd5b873567ffffffffffffffff8082111561569e57600080fd5b6156aa8b838c016155fb565b985060208a01359150808211156156c057600080fd5b6156cc8b838c016153db565b909850965060408a01359150808211156156e557600080fd5b6156f18b838c016153db565b909650945060608a013591508082111561570a57600080fd5b506157178a828b016153db565b989b979a50959850939692959293505050565b600067ffffffffffffffff80841115615745576157456155b4565b8360051b60206157568183016155ca565b8681529350908401908084018783111561576f57600080fd5b855b838110156157a3578035858111156157895760008081fd5b6157958a828a016155fb565b835250908201908201615771565b50505050509392505050565b600080604083850312156157c257600080fd5b823567ffffffffffffffff808211156157da57600080fd5b6157e6868387016155fb565b935060208501359150808211156157fc57600080fd5b508301601f8101851361580e57600080fd5b61581d8582356020840161572a565b9150509250929050565b60008060008060006060868803121561583f57600080fd5b615848866152ed565b9450602086013567ffffffffffffffff8082111561586557600080fd5b61587189838a01615392565b9096509450604088013591508082111561588a57600080fd5b5061589788828901615392565b969995985093965092949392505050565b634e487b7160e01b600052602160045260246000fd5b600481106158dc57634e487b7160e01b600052602160045260246000fd5b9052565b6020810161230c82846158be565b6000806040838503121561590157600080fd5b615325836154e4565b6000806040838503121561591d57600080fd5b615926836152ed565b9150615934602084016152ed565b90509250929050565b6000602080835260e083016001600160a01b038551168285015281850151604081818701528087015160608701526060870151915060c06080870152828251808552610100880191508584019450600093505b808410156159b95784518051835286015186830152938501936001939093019290820190615990565b50608088015160a088015260a088015160c0880152809550505050505092915050565b61014081016159eb828d6158be565b6001600160a01b039a909a16602082015260408101989098526060880196909652608087019490945260a086019290925260c085015267ffffffffffffffff90811660e08501529081166101008401521661012090910152919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115615a7157615a71615a48565b500190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415615aa057615aa0615a48565b5060010190565b6000816000190483118215151615615ac157615ac1615a48565b500290565b600082615ae357634e487b7160e01b600052601260045260246000fd5b500490565b838152818360208301376000910160200190815292915050565b6000613be436848461572a565b600082821015615b2157615b21615a48565b500390565b6000600160ff1b821415615b3c57615b3c615a48565b5060000390565b600063ffffffff80831681811415615b5d57615b5d615a48565b6001019392505050565b60005b83811015615b82578181015183820152602001615b6a565b838111156132d35750506000910152565b60008151808452615bab816020860160208601615b67565b601f01601f19169290920160200192915050565b60608152600a60608201527f636f6d6d697373696f6e00000000000000000000000000000000000000000000608082015260a060208201526000615c0660a0830185615b93565b90506001600160a01b03831660408301529392505050565b6060815260046060820152631a5b9a5d60e21b608082015260a060208201526000615c0660a0830185615b93565b60608152601360608201527f6d696e2d73656c662d64656c65676174696f6e00000000000000000000000000608082015260a060208201526000615c0660a0830185615b93565b60608152600660608201527f7369676e65720000000000000000000000000000000000000000000000000000608082015260a060208201526000615c0660a0830185615b93565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000615d17606083018789615cda565b8281036020840152615d2a818688615cda565b9150506001600160a01b03831660408301529695505050505050565b600063ffffffff83811690831681811015615d6357615d63615a48565b039392505050565b634e487b7160e01b600052603160045260246000fd5b600060208284031215615d9357600080fd5b8151613be481615333565b60008251615db0818460208701615b67565b9190910192915050565b602081526000613be46020830184615b9356fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212208112250cbc5e5384e152f5657479a415765ccce9f2514f662525ea8f512ac5b464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bondValidator()": {
        "details": "caller can be either validator owner or signer"
      },
      "completeUndelegate(address)": {
        "params": {
          "_valAddr": "the address of the validator"
        }
      },
      "confirmUnbondedValidator(address)": {
        "params": {
          "_valAddr": "the address of the validator"
        }
      },
      "constructor": {
        "params": {
          "_advanceNoticePeriod": "the wait time after the announcement and prior to the effective date of an update",
          "_celerTokenAddress": "address of Celer Token Contract",
          "_maxBondedValidators": "the maximum number of bonded validators",
          "_maxSlashFactor": "maximal slashing factor (1e6 = 100%)",
          "_minSelfDelegation": "minimal amount of self-delegated tokens",
          "_minValidatorTokens": "the global minimum token amount requirement for bonded validator",
          "_proposalDeposit": "required deposit amount for a governance proposal",
          "_unbondingPeriod": "the locking time for funds locked before withdrawn",
          "_validatorBondInterval": "min interval between bondValidator",
          "_votingPeriod": "voting timeout for a governance proposal"
        }
      },
      "delegate(address,uint256)": {
        "details": "Minimal amount per delegate operation is 1 CELR",
        "params": {
          "_tokens": "the amount of delegated CELR tokens",
          "_valAddr": "validator to delegate"
        }
      },
      "drainToken(uint256)": {
        "details": "emergency use only",
        "params": {
          "_amount": "drained token amount"
        }
      },
      "getBondedValidatorNum()": {
        "returns": {
          "_0": "the number of bonded validators"
        }
      },
      "getBondedValidatorsTokens()": {
        "returns": {
          "_0": "addresses and token amounts of bonded validators"
        }
      },
      "getDelegatorInfo(address,address)": {
        "params": {
          "_delAddr": "the address of the delegator",
          "_valAddr": "the address of the validator"
        },
        "returns": {
          "_0": "DelegatorInfo from the given validator"
        }
      },
      "getParamValue(uint8)": {
        "params": {
          "_name": "the key of this parameter"
        },
        "returns": {
          "_0": "the value of this parameter"
        }
      },
      "getQuorumTokens()": {
        "returns": {
          "_0": "the quorum amount"
        }
      },
      "getValidatorNum()": {
        "returns": {
          "_0": "the number of validators"
        }
      },
      "getValidatorStatus(address)": {
        "params": {
          "_valAddr": "the address of the validator"
        },
        "returns": {
          "_0": "Validator status"
        }
      },
      "getValidatorTokens(address)": {
        "params": {
          "_valAddr": "the address of the validator"
        },
        "returns": {
          "_0": "Validator token amount"
        }
      },
      "hasMinRequiredTokens(address,bool)": {
        "params": {
          "_checkSelfDelegation": "check self delegation",
          "_valAddr": "the address of the validator"
        }
      },
      "initializeValidator(address,uint256,uint64)": {
        "params": {
          "_commissionRate": "the self-declaimed commission rate",
          "_minSelfDelegation": "minimal amount of tokens staked by the validator itself",
          "_signer": "signer address"
        }
      },
      "isBondedValidator(address)": {
        "params": {
          "_addr": "the address to check"
        },
        "returns": {
          "_0": "the given address is a validator or not"
        }
      },
      "isWhitelisted(address)": {
        "returns": {
          "_0": "is account whitelisted"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "slash(bytes,bytes[])": {
        "params": {
          "_sigs": "list of validator signatures",
          "_slashRequest": "slash request bytes coded in protobuf"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "undelegateShares(address,uint256)": {
        "details": "Tokens are delegated by the msgSender to the validator",
        "params": {
          "_shares": "undelegate shares",
          "_valAddr": "the address of the validator"
        }
      },
      "undelegateTokens(address,uint256)": {
        "details": "Tokens are delegated by the msgSender to the validator",
        "params": {
          "_tokens": "undelegate tokens",
          "_valAddr": "the address of the validator"
        }
      },
      "updateCommissionRate(uint64)": {
        "params": {
          "_newRate": "new commission rate"
        }
      },
      "updateMinSelfDelegation(uint256)": {
        "params": {
          "_minSelfDelegation": "minimal amount of tokens staked by the validator itself"
        }
      },
      "updateValidatorSigner(address)": {
        "params": {
          "_signer": "signer address"
        }
      },
      "verifySignatures(bytes,bytes[])": {
        "params": {
          "_msg": "signed message",
          "_sigs": "list of validator signatures"
        }
      },
      "verifySigs(bytes,bytes[],address[],uint256[])": {
        "params": {
          "_msg": "signed message",
          "_sigs": "the list of signatures"
        }
      }
    },
    "title": "A Staking contract shared by all external sidechains and apps",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelisted(address)": {
        "notice": "Add an account to whitelist"
      },
      "bondValidator()": {
        "notice": "Candidate claims to become a bonded validator"
      },
      "completeUndelegate(address)": {
        "notice": "Complete pending undelegations from a validator"
      },
      "confirmUnbondedValidator(address)": {
        "notice": "Confirm validator status from Unbonding to Unbonded"
      },
      "constructor": {
        "notice": "Staking constructor"
      },
      "delegate(address,uint256)": {
        "notice": "Delegate CELR tokens to a validator"
      },
      "drainToken(uint256)": {
        "notice": "Owner drains tokens when the contract is paused"
      },
      "getBondedValidatorNum()": {
        "notice": "Get the number of bonded validators"
      },
      "getDelegatorInfo(address,address)": {
        "notice": "Get the delegator info of a specific validator"
      },
      "getParamValue(uint8)": {
        "notice": "Get the value of a specific uint parameter"
      },
      "getQuorumTokens()": {
        "notice": "Get quorum amount of tokens"
      },
      "getValidatorNum()": {
        "notice": "Get the number of validators"
      },
      "getValidatorStatus(address)": {
        "notice": "Get validator info"
      },
      "getValidatorTokens(address)": {
        "notice": "Get validator info"
      },
      "hasMinRequiredTokens(address,bool)": {
        "notice": "Check if min token requirements are met"
      },
      "initializeValidator(address,uint256,uint64)": {
        "notice": "Initialize a validator candidate"
      },
      "isBondedValidator(address)": {
        "notice": "Check the given address is a validator or not"
      },
      "removeWhitelisted(address)": {
        "notice": "Remove an account from whitelist"
      },
      "setMaxSlashFactor(uint256)": {
        "notice": "Set max slash factor"
      },
      "setWhitelistEnabled(bool)": {
        "notice": "Set whitelistEnabled"
      },
      "slash(bytes,bytes[])": {
        "notice": "Slash a validator and its delegators"
      },
      "undelegateShares(address,uint256)": {
        "notice": "Undelegate shares from a validator"
      },
      "undelegateTokens(address,uint256)": {
        "notice": "Undelegate shares from a validator"
      },
      "updateCommissionRate(uint64)": {
        "notice": "Update commission rate"
      },
      "updateMinSelfDelegation(uint256)": {
        "notice": "Update minimal self delegation value"
      },
      "updateValidatorSigner(address)": {
        "notice": "Update validator signer address"
      },
      "validatorNotice(address,string,bytes)": {
        "notice": "Validator notice event, could be triggered by anyone"
      },
      "verifySignatures(bytes,bytes[])": {
        "notice": "Validate if a message is signed by quorum tokens"
      },
      "verifySigs(bytes,bytes[],address[],uint256[])": {
        "notice": "Verifies that a message is signed by a quorum among the validators."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 121,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12142,
        "contract": "contracts/Staking.sol:Staking",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12471,
        "contract": "contracts/Staking.sol:Staking",
        "label": "whitelist",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12473,
        "contract": "contracts/Staking.sol:Staking",
        "label": "whitelistEnabled",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 4627,
        "contract": "contracts/Staking.sol:Staking",
        "label": "bondedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4629,
        "contract": "contracts/Staking.sol:Staking",
        "label": "nextBondBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4632,
        "contract": "contracts/Staking.sol:Staking",
        "label": "valAddrs",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4635,
        "contract": "contracts/Staking.sol:Staking",
        "label": "bondedValAddrs",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4640,
        "contract": "contracts/Staking.sol:Staking",
        "label": "validators",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Validator)8192_storage)"
      },
      {
        "astId": 4644,
        "contract": "contracts/Staking.sol:Staking",
        "label": "signerVals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4648,
        "contract": "contracts/Staking.sol:Staking",
        "label": "slashNonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 4653,
        "contract": "contracts/Staking.sol:Staking",
        "label": "params",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_enum(ParamName)8144,t_uint256)"
      },
      {
        "astId": 4655,
        "contract": "contracts/Staking.sol:Staking",
        "label": "govContract",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 4657,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rewardContract",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4659,
        "contract": "contracts/Staking.sol:Staking",
        "label": "forfeiture",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ParamName)8144": {
        "encoding": "inplace",
        "label": "enum DataTypes.ParamName",
        "numberOfBytes": "1"
      },
      "t_enum(ValidatorStatus)8134": {
        "encoding": "inplace",
        "label": "enum DataTypes.ValidatorStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Delegator)8165_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.Delegator)",
        "numberOfBytes": "32",
        "value": "t_struct(Delegator)8165_storage"
      },
      "t_mapping(t_address,t_struct(Validator)8192_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DataTypes.Validator)",
        "numberOfBytes": "32",
        "value": "t_struct(Validator)8192_storage"
      },
      "t_mapping(t_enum(ParamName)8144,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(ParamName)8144",
        "label": "mapping(enum DataTypes.ParamName => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Undelegation)8149_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DataTypes.Undelegation)",
        "numberOfBytes": "32",
        "value": "t_struct(Undelegation)8149_storage"
      },
      "t_struct(Delegator)8165_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Delegator",
        "members": [
          {
            "astId": 8161,
            "contract": "contracts/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8164,
            "contract": "contracts/Staking.sol:Staking",
            "label": "undelegations",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Undelegations)8159_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Undelegation)8149_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Undelegation",
        "members": [
          {
            "astId": 8146,
            "contract": "contracts/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8148,
            "contract": "contracts/Staking.sol:Staking",
            "label": "creationBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Undelegations)8159_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Undelegations",
        "members": [
          {
            "astId": 8154,
            "contract": "contracts/Staking.sol:Staking",
            "label": "queue",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(Undelegation)8149_storage)"
          },
          {
            "astId": 8156,
            "contract": "contracts/Staking.sol:Staking",
            "label": "head",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 8158,
            "contract": "contracts/Staking.sol:Staking",
            "label": "tail",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Validator)8192_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Validator",
        "members": [
          {
            "astId": 8168,
            "contract": "contracts/Staking.sol:Staking",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(ValidatorStatus)8134"
          },
          {
            "astId": 8170,
            "contract": "contracts/Staking.sol:Staking",
            "label": "signer",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8172,
            "contract": "contracts/Staking.sol:Staking",
            "label": "tokens",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8174,
            "contract": "contracts/Staking.sol:Staking",
            "label": "shares",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8176,
            "contract": "contracts/Staking.sol:Staking",
            "label": "undelegationTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8178,
            "contract": "contracts/Staking.sol:Staking",
            "label": "undelegationShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8183,
            "contract": "contracts/Staking.sol:Staking",
            "label": "delegators",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(Delegator)8165_storage)"
          },
          {
            "astId": 8185,
            "contract": "contracts/Staking.sol:Staking",
            "label": "minSelfDelegation",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8187,
            "contract": "contracts/Staking.sol:Staking",
            "label": "bondBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 8189,
            "contract": "contracts/Staking.sol:Staking",
            "label": "unbondBlock",
            "offset": 8,
            "slot": "7",
            "type": "t_uint64"
          },
          {
            "astId": 8191,
            "contract": "contracts/Staking.sol:Staking",
            "label": "commissionRate",
            "offset": 16,
            "slot": "7",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}