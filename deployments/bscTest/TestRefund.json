{
  "address": "0x38fA604606D3ecad8e2082B1E8A281ED41360456",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "dstChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        }
      ],
      "name": "MessageReceivedWithTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "Refunded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        },
        {
          "internalType": "enum MessageSenderLib.BridgeType",
          "name": "_bridgeType",
          "type": "uint8"
        }
      ],
      "name": "sendWithTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x13d037c4b69be0967d15852ebe6d648bd4920cdbd6f6e2f16958262dcce40fe5",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x38fA604606D3ecad8e2082B1E8A281ED41360456",
    "transactionIndex": 10,
    "gasUsed": "1452176",
    "logsBloom": "0x
    "blockHash": "0x8ee849f5c58b2df64fd198044f72dca9b634249f92f92cd57c60b4e3eaf98bce",
    "transactionHash": "0x13d037c4b69be0967d15852ebe6d648bd4920cdbd6f6e2f16958262dcce40fe5",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 16165434,
        "transactionHash": "0x13d037c4b69be0967d15852ebe6d648bd4920cdbd6f6e2f16958262dcce40fe5",
        "address": "0x38fA604606D3ecad8e2082B1E8A281ED41360456",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x8ee849f5c58b2df64fd198044f72dca9b634249f92f92cd57c60b4e3eaf98bce"
      }
    ],
    "blockNumber": 16165434,
    "cumulativeGasUsed": "2720625",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x942E8e0e4b021F55b89660c886146e0Ec57F4b5B"
  ],
  "solcInputHash": "71c8a1d84e8c8a042b2e39c06d7fed71",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"}],\"name\":\"MessageReceivedWithTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"enum MessageSenderLib.BridgeType\",\"name\":\"_bridgeType\",\"type\":\"uint8\"}],\"name\":\"sendWithTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessageWithTransfer(address,address,uint256,uint64,bytes)\":{\"params\":{\"_amount\":\"The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_sender\":\"The address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\",\"_token\":\"The address of the token that comes out of the bridge\"}},\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes)\":{\"params\":{\"_amount\":\"The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_sender\":\"The address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\",\"_token\":\"The address of the token that comes out of the bridge\"}},\"executeMessageWithTransferRefund(address,uint256,bytes)\":{\"params\":{\"_amount\":\"The amount of the original transfer\",\"_message\":\"The same message associated with the original transfer\",\"_token\":\"The token address of the original transfer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Application to test message with transfer refund flow \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessageWithTransfer(address,address,uint256,uint64,bytes)\":{\"notice\":\"Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\"},\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes)\":{\"notice\":\"Only called by MessageBus (MessageBusReceiver) if         1. executeMessageWithTransfer reverts, or         2. executeMessageWithTransfer returns false\"},\"executeMessageWithTransferRefund(address,uint256,bytes)\":{\"notice\":\"Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/message/apps/TestRefund.sol\":\"TestRefund\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xa16580c0d244b975ff74627da5bc54e86c66a278b5bdf0ab6d8afe4623eacc0d\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x94892c0bcf78d1d1de33a9c9e84b91a2b437f29ac2c457c0b3d8d340d62a4778\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa01de97f0a810add87abada16e8449c606289d144762bebea8244f517d55c2b9\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x44ac7b3c2911c6dad4e33ce8680ab5f0868aaf8965b90ea9621e8fd338c70350\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/TestRefund.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../framework/MessageSenderApp.sol\\\";\\nimport \\\"../framework/MessageReceiverApp.sol\\\";\\n\\n/** @title Application to test message with transfer refund flow */\\ncontract TestRefund is MessageSenderApp, MessageReceiverApp {\\n    using SafeERC20 for IERC20;\\n\\n    event MessageReceivedWithTransfer(address token, uint256 amount, bytes message, address sender, uint64 srcChainId);\\n    event Refunded(address token, uint256 amount, bytes message);\\n    event MessageReceived(address receiver, uint64 dstChainId, bytes message);\\n\\n    constructor(address _messageBus) {\\n        messageBus = _messageBus;\\n    }\\n\\n    function sendWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MessageSenderLib.BridgeType _bridgeType\\n    ) external payable {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        bytes memory message = abi.encode(_receiver);\\n        sendMessageWithTransfer(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage, message, _bridgeType, 0);\\n    }\\n\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes memory _message\\n    ) external payable override onlyMessageBus returns (bool) {\\n        address receiver = abi.decode((_message), (address));\\n        IERC20(_token).safeTransfer(receiver, _amount);\\n        emit MessageReceivedWithTransfer(_token, _amount, _message, _sender, _srcChainId);\\n        return true;\\n    }\\n\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message\\n    ) external payable override onlyMessageBus returns (bool) {\\n        emit Refunded(_token, _amount, _message);\\n        address receiver = abi.decode((_message), (address));\\n        IERC20(_token).safeTransfer(receiver, _amount);\\n        return true;\\n    }\\n\\n    function send(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bool _success\\n    ) external payable {\\n        bytes memory message = abi.encode(_success);\\n        sendMessage(_receiver, _dstChainId, message, 0);\\n    }\\n\\n    function executeMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes calldata _message\\n    ) external payable override onlyMessageBus returns (bool) {\\n        bool success = abi.decode((_message), (bool));\\n        emit MessageReceived(_receiver, _dstChainId, _message);\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x217156dabb7c346622d954e55386a1f4ae3763dc87c9cc6a83016bc3bfc43a4a\",\"license\":\"GPL-3.0-only\"},\"contracts/message/framework/MessageBusAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\nabstract contract MessageBusAddress is Ownable {\\n    address public messageBus;\\n\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n    }\\n}\\n\",\"keccak256\":\"0x75186a4428ddb9a403c04a3ff4bbd3e98714b6216f2d4fcbd6ad1071c23b2ac6\",\"license\":\"GPL-3.0-only\"},\"contracts/message/framework/MessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\\n    modifier onlyMessageBus() {\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message\\n    ) external payable virtual override onlyMessageBus returns (bool) {}\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns false\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message\\n    ) external payable virtual override onlyMessageBus returns (bool) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message\\n    ) external payable virtual override onlyMessageBus returns (bool) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message\\n    ) external payable virtual override onlyMessageBus returns (bool) {}\\n}\\n\",\"keccak256\":\"0x8fccdb1ee3f254e449afb9dc52d975731b029ade9f768abe26668b54ee925431\",\"license\":\"GPL-3.0-only\"},\"contracts/message/framework/MessageSenderApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../libraries/MessageSenderLib.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\nimport \\\"../messagebus/MessageBus.sol\\\";\\n\\nabstract contract MessageSenderApp is MessageBusAddress {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Utility functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        uint256 _fee\\n    ) internal {\\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {BridgeType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeType One of the {BridgeType} enum.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MessageSenderLib.BridgeType _bridgeType,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        return\\n            MessageSenderLib.sendMessageWithTransfer(\\n                _receiver,\\n                _token,\\n                _amount,\\n                _dstChainId,\\n                _nonce,\\n                _maxSlippage,\\n                _message,\\n                _bridgeType,\\n                messageBus,\\n                _fee\\n            );\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeType One of the {BridgeType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MessageSenderLib.BridgeType _bridgeType\\n    ) internal {\\n        address bridge;\\n        if (_bridgeType == MessageSenderLib.BridgeType.Liquidity) {\\n            bridge = MessageBus(messageBus).liquidityBridge();\\n        } else if (_bridgeType == MessageSenderLib.BridgeType.PegDeposit) {\\n            bridge = MessageBus(messageBus).pegVault();\\n        } else if (_bridgeType == MessageSenderLib.BridgeType.PegBurn) {\\n            bridge = MessageBus(messageBus).pegBridge();\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n        MessageSenderLib.sendTokenTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeType,\\n            bridge\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd44518f0b289b46e531d0741205821a5f23befeed8dd16acc677a246b78371ea\",\"license\":\"GPL-3.0-only\"},\"contracts/message/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns false\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x913c26dee916d620d3f7d9dabab452cd6ddebc118095b9d3e8813830ad497cf4\",\"license\":\"GPL-3.0-only\"},\"contracts/message/libraries/MessageSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../messagebus/MessageBus.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    enum BridgeType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn\\n    }\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        MessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {BridgeType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeType One of the {BridgeType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        BridgeType _bridgeType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        if (_bridgeType == BridgeType.Liquidity) {\\n            return\\n                sendMessageWithLiquidityBridgeTransfer(\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _maxSlippage,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else if (_bridgeType == BridgeType.PegDeposit) {\\n            return\\n                sendMessageWithPegVaultDeposit(\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else if (_bridgeType == BridgeType.PegBurn) {\\n            return\\n                sendMessageWithPegBridgeBurn(\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated liquidity bridge transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithLiquidityBridgeTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address bridge = MessageBus(_messageBus).liquidityBridge();\\n        IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n        IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n        );\\n        MessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            bridge,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated OriginalTokenVault deposit.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithPegVaultDeposit(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address pegVault = MessageBus(_messageBus).pegVault();\\n        IERC20(_token).safeIncreaseAllowance(pegVault, _amount);\\n        IOriginalTokenVault(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n        );\\n        MessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            pegVault,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated PeggedTokenBridge burn.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithPegBridgeBurn(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address pegBridge = MessageBus(_messageBus).pegBridge();\\n        IPeggedTokenBridge(pegBridge).burn(_token, _amount, _receiver, _nonce);\\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid))\\n        );\\n        MessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            pegBridge,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeType One of the {BridgeType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        BridgeType _bridgeType,\\n        address _bridge\\n    ) internal {\\n        if (_bridgeType == BridgeType.Liquidity) {\\n            IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\\n            IBridge(_bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n        } else if (_bridgeType == BridgeType.PegDeposit) {\\n            IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\\n            IOriginalTokenVault(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeType == BridgeType.PegBurn) {\\n            IPeggedTokenBridge(_bridge).burn(_token, _amount, _receiver, _nonce);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b8912e8530eb6ba38f7ca9776c4df326dc30199cfe512bb389a71231938c22b\",\"license\":\"GPL-3.0-only\"},\"contracts/message/messagebus/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./MessageBusSender.sol\\\";\\nimport \\\"./MessageBusReceiver.sol\\\";\\n\\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\\n    constructor(\\n        ISigsVerifier _sigsVerifier,\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault\\n    ) MessageBusSender(_sigsVerifier) MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault) {}\\n\\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\\n    // so calling init on this contract directly will guarantee to fail\\n    function init(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault\\n    ) external {\\n        // MUST manually call ownable init and must only call once\\n        initOwner();\\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault);\\n    }\\n}\\n\",\"keccak256\":\"0x99c3d15a01f7b228670d5d61260750cdc45452f40b429de591cb77f84416b1de\",\"license\":\"GPL-3.0-only\"},\"contracts/message/messagebus/MessageBusReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\ncontract MessageBusReceiver is Ownable {\\n    enum TransferType {\\n        Null,\\n        LqSend, // send through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw // withdraw from original token vault\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 seqnum; // only needed for LqWithdraw\\n        uint64 srcChainId;\\n        bytes32 refId;\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback\\n    }\\n    mapping(bytes32 => TxStatus) public executedMessages;\\n\\n    address public liquidityBridge; // liquidity bridge address\\n    address public pegBridge; // peg bridge address\\n    address public pegVault; // peg original vault address\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n    event Executed(MsgType msgType, bytes32 id, TxStatus status);\\n\\n    constructor(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault\\n    ) {\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n    }\\n\\n    function initReceiver(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault\\n    ) internal {\\n        require(liquidityBridge == address(0), \\\"liquidityBridge already set\\\");\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n    }\\n\\n    // ============== functions called by executor ==============\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        // For message with token transfer, message Id is computed through transfer info\\n        // in order to guarantee that each transfer can only be used once.\\n        // This also indicates that different transfers can carry the exact same messages.\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == TxStatus.Null, \\\"transfer already executed\\\");\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransfer\\\"));\\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId, _message), _sigs, _signers, _powers);\\n        TxStatus status;\\n        bool success = executeMessageWithTransfer(_transfer, _message);\\n        if (success) {\\n            status = TxStatus.Success;\\n        } else {\\n            success = executeMessageWithTransferFallback(_transfer, _message);\\n            if (success) {\\n                status = TxStatus.Fallback;\\n            } else {\\n                status = TxStatus.Fail;\\n            }\\n        }\\n        executedMessages[messageId] = status;\\n        emit Executed(MsgType.MessageWithTransfer, messageId, status);\\n    }\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        // similar to executeMessageWithTransfer\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == TxStatus.Null, \\\"transfer already executed\\\");\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransferRefund\\\"));\\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId, _message), _sigs, _signers, _powers);\\n        TxStatus status;\\n        bool success = executeMessageWithTransferRefund(_transfer, _message);\\n        if (success) {\\n            status = TxStatus.Success;\\n        } else {\\n            status = TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emit Executed(MsgType.MessageWithTransfer, messageId, status);\\n    }\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        // For message without associated token transfer, message Id is computed through message info,\\n        // in order to guarantee that each message can only be applied once\\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\\n        require(executedMessages[messageId] == TxStatus.Null, \\\"message already executed\\\");\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Message\\\"));\\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\\n        TxStatus status;\\n        bool success = executeMessage(_route, _message);\\n        if (success) {\\n            status = TxStatus.Success;\\n        } else {\\n            status = TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emit Executed(MsgType.MessageOnly, messageId, status);\\n    }\\n\\n    // ================= utils (to avoid stack too deep) =================\\n\\n    function executeMessageWithTransfer(TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (bool)\\n    {\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message\\n            )\\n        );\\n        if (ok) {\\n            bool success = abi.decode((res), (bool));\\n            return success;\\n        }\\n        return false;\\n    }\\n\\n    function executeMessageWithTransferFallback(TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (bool)\\n    {\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message\\n            )\\n        );\\n        if (ok) {\\n            bool success = abi.decode((res), (bool));\\n            return success;\\n        }\\n        return false;\\n    }\\n\\n    function executeMessageWithTransferRefund(TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (bool)\\n    {\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\\n                _transfer.token,\\n                _transfer.amount,\\n                _message\\n            )\\n        );\\n        if (ok) {\\n            bool success = abi.decode((res), (bool));\\n            return success;\\n        }\\n        return false;\\n    }\\n\\n    function verifyTransfer(TransferInfo calldata _transfer) private view returns (bytes32) {\\n        bytes32 transferId;\\n        address bridgeAddr;\\n        if (_transfer.t == TransferType.LqSend) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.sender,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.srcChainId,\\n                    uint64(block.chainid),\\n                    _transfer.refId\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \\\"bridge relay not exist\\\");\\n        } else if (_transfer.t == TransferType.LqWithdraw) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    uint64(block.chainid),\\n                    _transfer.seqnum,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \\\"bridge withdraw not exist\\\");\\n        } else if (_transfer.t == TransferType.PegMint || _transfer.t == TransferType.PegWithdraw) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.sender,\\n                    _transfer.srcChainId,\\n                    _transfer.refId\\n                )\\n            );\\n            if (_transfer.t == TransferType.PegMint) {\\n                bridgeAddr = pegBridge;\\n                require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \\\"mint record not exist\\\");\\n            } else {\\n                // _transfer.t == TransferType.PegWithdraw\\n                bridgeAddr = pegVault;\\n                require(IOriginalTokenVault(bridgeAddr).records(transferId) == true, \\\"withdraw record not exist\\\");\\n            }\\n        }\\n        return keccak256(abi.encodePacked(MsgType.MessageWithTransfer, bridgeAddr, transferId));\\n    }\\n\\n    function computeMessageOnlyId(RouteInfo calldata _route, bytes calldata _message) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(MsgType.MessageOnly, _route.sender, _route.receiver, _route.srcChainId, _message)\\n            );\\n    }\\n\\n    function executeMessage(RouteInfo calldata _route, bytes calldata _message) private returns (bool) {\\n        (bool ok, bytes memory res) = address(_route.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessage.selector,\\n                _route.sender,\\n                _route.srcChainId,\\n                _message\\n            )\\n        );\\n        if (ok) {\\n            bool success = abi.decode((res), (bool));\\n            return success;\\n        }\\n        return false;\\n    }\\n\\n    // ================= contract addr config =================\\n\\n    function setLiquidityBridge(address _addr) public onlyOwner {\\n        liquidityBridge = _addr;\\n    }\\n\\n    function setPegBridge(address _addr) public onlyOwner {\\n        pegBridge = _addr;\\n    }\\n\\n    function setPegVault(address _addr) public onlyOwner {\\n        pegVault = _addr;\\n    }\\n}\\n\",\"keccak256\":\"0xceccb1e42261ec924d00b80f0afb5e31023628e1fe66495a35c3a68ae56f32f2\",\"license\":\"GPL-3.0-only\"},\"contracts/message/messagebus/MessageBusSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\nimport \\\"../../interfaces/ISigsVerifier.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    ISigsVerifier public immutable sigsVerifier;\\n\\n    uint256 public feeBase;\\n    uint256 public feePerByte;\\n    mapping(address => uint256) public withdrawnFees;\\n\\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\\n\\n    event MessageWithTransfer(\\n        address indexed sender,\\n        address receiver,\\n        uint256 dstChainId,\\n        address bridge,\\n        bytes32 srcTransferId,\\n        bytes message,\\n        uint256 fee\\n    );\\n\\n    constructor(ISigsVerifier _sigsVerifier) {\\n        sigsVerifier = _sigsVerifier;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable {\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        // SGN needs to verify\\n        // 1. msg.sender matches sender of the src transfer\\n        // 2. dstChainId matches dstChainId of the src transfer\\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"withdrawFee\\\"));\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\\n        require(amount > 0, \\\"No new amount to withdraw\\\");\\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"failed to withdraw fee\\\");\\n    }\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) public view returns (uint256) {\\n        return feeBase + _message.length * feePerByte;\\n    }\\n\\n    // -------------------- Admin --------------------\\n\\n    function setFeePerByte(uint256 _fee) external onlyOwner {\\n        feePerByte = _fee;\\n    }\\n\\n    function setFeeBase(uint256 _fee) external onlyOwner {\\n        feeBase = _fee;\\n    }\\n}\\n\",\"keccak256\":\"0xac340db08488e0deefe511450109664b559d3f5c6d3ebfedca0134ff767f7038\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n * \\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0xca8cf042c730d814b7e152fed253d2ec712f763128fed3fdf37b52ae80c881a5\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161196938038061196983398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b61187d806100ec6000396000f3fe6080604052600436106100b15760003560e01c80638da5cb5b11610069578063ce35dd9a1161004e578063ce35dd9a1461018b578063f00f39ce1461019e578063f2fde38b146101b157600080fd5b80638da5cb5b14610139578063a1a227fa1461016b57600080fd5b8063547cad121161009a578063547cad12146100f157806355b9f7f7146101135780637ee1bd4a1461012657600080fd5b80631599d265146100b657806320be95f2146100de575b600080fd5b6100c96100c436600461128c565b6101d1565b60405190151581526020015b60405180910390f35b6100c96100ec3660046112ef565b610289565b3480156100fd57600080fd5b5061011161010c366004611333565b610353565b005b61011161012136600461135e565b6103eb565b6101116101343660046113a7565b61041f565b34801561014557600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100d5565b34801561017757600080fd5b50600154610153906001600160a01b031681565b6100c9610199366004611453565b610479565b6100c96101ac366004611544565b61054e565b3480156101bd57600080fd5b506101116101cc366004611333565b6105b5565b6001546000906001600160a01b031633146102335760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064015b60405180910390fd5b6000610241838501856115c7565b90507f0993eabb2ce4a554387afd1dd46cad1404aaf34ad41bba845836cb43105862a886868686604051610278949392919061160d565b60405180910390a195945050505050565b6001546000906001600160a01b031633146102e65760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161022a565b7fee93b3d90bf7307985573224b309958a34f05c4bc6e541d3c2a9f903651cb3b68585858560405161031b9493929190611640565b60405180910390a1600061033183850185611333565b90506103476001600160a01b03871682876106a6565b50600195945050505050565b336103666000546001600160a01b031690565b6001600160a01b0316146103bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161022a565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604080518215156020820152600091016040516020818303038152906040529050610419848483600061073b565b50505050565b6104346001600160a01b038716333088610757565b604080516001600160a01b038916602082015260009101604051602081830303815290604052905061046e8888888888888789600061078f565b505050505050505050565b6001546000906001600160a01b031633146104d65760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161022a565b6000828060200190518101906104ec9190611669565b90506105026001600160a01b03871682876106a6565b7f6d93ac0161970e4a38513a159b2a5a056f09ea9e98b35d7a259513d95ea565448686858a886040516105399594939291906116de565b60405180910390a15060019695505050505050565b6001546000906001600160a01b031633146105ab5760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161022a565b9695505050505050565b336105c86000546001600160a01b031690565b6001600160a01b03161461061e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161022a565b6001600160a01b03811661069a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161022a565b6106a3816107c6565b50565b6040516001600160a01b03831660248201526044810182905261073690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610823565b505050565b600154610419908590859085906001600160a01b031685610908565b6040516001600160a01b03808516602483015283166044820152606481018290526104199085906323b872dd60e01b906084016106d2565b60006107b88a8a8a8a8a8a8a8a600160009054906101000a90046001600160a01b03168b610973565b9a9950505050505050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610878826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a439092919063ffffffff16565b80519091501561073657808060200190518101906108969190611729565b6107365760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161022a565b604051634f9e72ad60e11b81526001600160a01b03831690639f3ce55a90839061093a90899089908990600401611746565b6000604051808303818588803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b50505050505050505050565b6000600184600381111561098957610989611781565b14156109a7576109a08b8b8b8b8b8b8b8a8a610a5c565b90506107b8565b60028460038111156109bb576109bb611781565b14156109d1576109a08b8b8b8b8b8a8989610c6a565b60038460038111156109e5576109e5611781565b14156109fb576109a08b8b8b8b8b8a8989610e84565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f7274656400000000000000604482015260640161022a565b6060610a528484600085610fd8565b90505b9392505050565b600080836001600160a01b03166382980dc46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190611669565b9050610ae66001600160a01b038b16828b611117565b60405163a5977fbb60e01b81526001600160a01b038c811660048301528b81166024830152604482018b905267ffffffffffffffff808b1660648401528916608483015263ffffffff881660a483015282169063a5977fbb9060c401600060405180830381600087803b158015610b5c57600080fd5b505af1158015610b70573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528f811b821660348401528e901b166048820152605c81018c90526001600160c01b031960c08c811b8216607c8401528b811b8216608484015246901b16608c820152600092506094019050604051602081830303815290604052805190602001209050846001600160a01b0316634289fbb3858e8c86868c6040518763ffffffff1660e01b8152600401610c28959493929190611797565b6000604051808303818588803b158015610c4157600080fd5b505af1158015610c55573d6000803e3d6000fd5b50939f9e505050505050505050505050505050565b600080836001600160a01b031663d8257d176040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca657600080fd5b505afa158015610cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cde9190611669565b9050610cf46001600160a01b038a16828a611117565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015282169063234636249060a401600060405180830381600087803b158015610d5e57600080fd5b505af1158015610d72573d6000803e3d6000fd5b505050506000308a8a8a8e8b46604051602001610df69796959493929190606097881b6bffffffffffffffffffffffff19908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b604051602081830303815290604052805190602001209050846001600160a01b0316634289fbb3858d8b86868c6040518763ffffffff1660e01b8152600401610e43959493929190611797565b6000604051808303818588803b158015610e5c57600080fd5b505af1158015610e70573d6000803e3d6000fd5b50939e9d5050505050505050505050505050565b600080836001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef89190611669565b604051636f3c863f60e11b81526001600160a01b038b81166004830152602482018b90528c8116604483015267ffffffffffffffff891660648301529192509082169063de790c7e90608401600060405180830381600087803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528d811b82166034840152604883018d90528e901b1660688201526001600160c01b031960c08a811b8216607c84015246901b16608482015260009250608c019050610df6565b6060824710156110505760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161022a565b843b61109e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161022a565b600080866001600160a01b031685876040516110ba91906117d9565b60006040518083038185875af1925050503d80600081146110f7576040519150601f19603f3d011682016040523d82523d6000602084013e6110fc565b606091505b509150915061110c8282866111d8565b979650505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561116357600080fd5b505afa158015611177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119b91906117f5565b6111a5919061180e565b6040516001600160a01b03851660248201526044810182905290915061041990859063095ea7b360e01b906064016106d2565b606083156111e7575081610a55565b8251156111f75782518084602001fd5b8160405162461bcd60e51b815260040161022a9190611834565b6001600160a01b03811681146106a357600080fd5b803567ffffffffffffffff8116811461123e57600080fd5b919050565b60008083601f84011261125557600080fd5b50813567ffffffffffffffff81111561126d57600080fd5b60208301915083602082850101111561128557600080fd5b9250929050565b600080600080606085870312156112a257600080fd5b84356112ad81611211565b93506112bb60208601611226565b9250604085013567ffffffffffffffff8111156112d757600080fd5b6112e387828801611243565b95989497509550505050565b6000806000806060858703121561130557600080fd5b843561131081611211565b935060208501359250604085013567ffffffffffffffff8111156112d757600080fd5b60006020828403121561134557600080fd5b8135610a5581611211565b80151581146106a357600080fd5b60008060006060848603121561137357600080fd5b833561137e81611211565b925061138c60208501611226565b9150604084013561139c81611350565b809150509250925092565b600080600080600080600060e0888a0312156113c257600080fd5b87356113cd81611211565b965060208801356113dd81611211565b9550604088013594506113f260608901611226565b935061140060808901611226565b925060a088013563ffffffff8116811461141957600080fd5b915060c08801356004811061142d57600080fd5b8091505092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561146b57600080fd5b853561147681611211565b9450602086013561148681611211565b93506040860135925061149b60608701611226565b9150608086013567ffffffffffffffff808211156114b857600080fd5b818801915088601f8301126114cc57600080fd5b8135818111156114de576114de61143d565b604051601f8201601f19908116603f011681019083821181831017156115065761150661143d565b816040528281528b602084870101111561151f57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b60008060008060008060a0878903121561155d57600080fd5b863561156881611211565b9550602087013561157881611211565b94506040870135935061158d60608801611226565b9250608087013567ffffffffffffffff8111156115a957600080fd5b6115b589828a01611243565b979a9699509497509295939492505050565b6000602082840312156115d957600080fd5b8135610a5581611350565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038516815267ffffffffffffffff841660208201526060604082015260006105ab6060830184866115e4565b6001600160a01b03851681528360208201526060604082015260006105ab6060830184866115e4565b60006020828403121561167b57600080fd5b8151610a5581611211565b60005b838110156116a1578181015183820152602001611689565b838111156104195750506000910152565b600081518084526116ca816020860160208601611686565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835286602084015260a0604084015261170760a08401876116b2565b941660608301525067ffffffffffffffff919091166080909101529392505050565b60006020828403121561173b57600080fd5b8151610a5581611350565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820152600061177860608301846116b2565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b60006001600160a01b03808816835267ffffffffffffffff8716602084015280861660408401525083606083015260a0608083015261110c60a08301846116b2565b600082516117eb818460208701611686565b9190910192915050565b60006020828403121561180757600080fd5b5051919050565b6000821982111561182f57634e487b7160e01b600052601160045260246000fd5b500190565b602081526000610a5560208301846116b256fea2646970667358221220cc643402015ed108e055231bb97006ebd4672807c9a42b79231774abab3e4de064736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100b15760003560e01c80638da5cb5b11610069578063ce35dd9a1161004e578063ce35dd9a1461018b578063f00f39ce1461019e578063f2fde38b146101b157600080fd5b80638da5cb5b14610139578063a1a227fa1461016b57600080fd5b8063547cad121161009a578063547cad12146100f157806355b9f7f7146101135780637ee1bd4a1461012657600080fd5b80631599d265146100b657806320be95f2146100de575b600080fd5b6100c96100c436600461128c565b6101d1565b60405190151581526020015b60405180910390f35b6100c96100ec3660046112ef565b610289565b3480156100fd57600080fd5b5061011161010c366004611333565b610353565b005b61011161012136600461135e565b6103eb565b6101116101343660046113a7565b61041f565b34801561014557600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100d5565b34801561017757600080fd5b50600154610153906001600160a01b031681565b6100c9610199366004611453565b610479565b6100c96101ac366004611544565b61054e565b3480156101bd57600080fd5b506101116101cc366004611333565b6105b5565b6001546000906001600160a01b031633146102335760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d657373616765206275730000000000000060448201526064015b60405180910390fd5b6000610241838501856115c7565b90507f0993eabb2ce4a554387afd1dd46cad1404aaf34ad41bba845836cb43105862a886868686604051610278949392919061160d565b60405180910390a195945050505050565b6001546000906001600160a01b031633146102e65760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161022a565b7fee93b3d90bf7307985573224b309958a34f05c4bc6e541d3c2a9f903651cb3b68585858560405161031b9493929190611640565b60405180910390a1600061033183850185611333565b90506103476001600160a01b03871682876106a6565b50600195945050505050565b336103666000546001600160a01b031690565b6001600160a01b0316146103bc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161022a565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b604080518215156020820152600091016040516020818303038152906040529050610419848483600061073b565b50505050565b6104346001600160a01b038716333088610757565b604080516001600160a01b038916602082015260009101604051602081830303815290604052905061046e8888888888888789600061078f565b505050505050505050565b6001546000906001600160a01b031633146104d65760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161022a565b6000828060200190518101906104ec9190611669565b90506105026001600160a01b03871682876106a6565b7f6d93ac0161970e4a38513a159b2a5a056f09ea9e98b35d7a259513d95ea565448686858a886040516105399594939291906116de565b60405180910390a15060019695505050505050565b6001546000906001600160a01b031633146105ab5760405162461bcd60e51b815260206004820152601960248201527f63616c6c6572206973206e6f74206d6573736167652062757300000000000000604482015260640161022a565b9695505050505050565b336105c86000546001600160a01b031690565b6001600160a01b03161461061e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161022a565b6001600160a01b03811661069a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161022a565b6106a3816107c6565b50565b6040516001600160a01b03831660248201526044810182905261073690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610823565b505050565b600154610419908590859085906001600160a01b031685610908565b6040516001600160a01b03808516602483015283166044820152606481018290526104199085906323b872dd60e01b906084016106d2565b60006107b88a8a8a8a8a8a8a8a600160009054906101000a90046001600160a01b03168b610973565b9a9950505050505050505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610878826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a439092919063ffffffff16565b80519091501561073657808060200190518101906108969190611729565b6107365760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161022a565b604051634f9e72ad60e11b81526001600160a01b03831690639f3ce55a90839061093a90899089908990600401611746565b6000604051808303818588803b15801561095357600080fd5b505af1158015610967573d6000803e3d6000fd5b50505050505050505050565b6000600184600381111561098957610989611781565b14156109a7576109a08b8b8b8b8b8b8b8a8a610a5c565b90506107b8565b60028460038111156109bb576109bb611781565b14156109d1576109a08b8b8b8b8b8a8989610c6a565b60038460038111156109e5576109e5611781565b14156109fb576109a08b8b8b8b8b8a8989610e84565b60405162461bcd60e51b815260206004820152601960248201527f6272696467652074797065206e6f7420737570706f7274656400000000000000604482015260640161022a565b6060610a528484600085610fd8565b90505b9392505050565b600080836001600160a01b03166382980dc46040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9857600080fd5b505afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190611669565b9050610ae66001600160a01b038b16828b611117565b60405163a5977fbb60e01b81526001600160a01b038c811660048301528b81166024830152604482018b905267ffffffffffffffff808b1660648401528916608483015263ffffffff881660a483015282169063a5977fbb9060c401600060405180830381600087803b158015610b5c57600080fd5b505af1158015610b70573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528f811b821660348401528e901b166048820152605c81018c90526001600160c01b031960c08c811b8216607c8401528b811b8216608484015246901b16608c820152600092506094019050604051602081830303815290604052805190602001209050846001600160a01b0316634289fbb3858e8c86868c6040518763ffffffff1660e01b8152600401610c28959493929190611797565b6000604051808303818588803b158015610c4157600080fd5b505af1158015610c55573d6000803e3d6000fd5b50939f9e505050505050505050505050505050565b600080836001600160a01b031663d8257d176040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca657600080fd5b505afa158015610cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cde9190611669565b9050610cf46001600160a01b038a16828a611117565b6040516308d18d8960e21b81526001600160a01b038a81166004830152602482018a905267ffffffffffffffff808a1660448401528c821660648401528816608483015282169063234636249060a401600060405180830381600087803b158015610d5e57600080fd5b505af1158015610d72573d6000803e3d6000fd5b505050506000308a8a8a8e8b46604051602001610df69796959493929190606097881b6bffffffffffffffffffffffff19908116825296881b87166014820152602881019590955260c093841b6001600160c01b031990811660488701529290961b909416605084015292811b831660648301529290921b16606c82015260740190565b604051602081830303815290604052805190602001209050846001600160a01b0316634289fbb3858d8b86868c6040518763ffffffff1660e01b8152600401610e43959493929190611797565b6000604051808303818588803b158015610e5c57600080fd5b505af1158015610e70573d6000803e3d6000fd5b50939e9d5050505050505050505050505050565b600080836001600160a01b031663dfa2dbaf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec057600080fd5b505afa158015610ed4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef89190611669565b604051636f3c863f60e11b81526001600160a01b038b81166004830152602482018b90528c8116604483015267ffffffffffffffff891660648301529192509082169063de790c7e90608401600060405180830381600087803b158015610f5e57600080fd5b505af1158015610f72573d6000803e3d6000fd5b50506040516bffffffffffffffffffffffff1930606090811b821660208401528d811b82166034840152604883018d90528e901b1660688201526001600160c01b031960c08a811b8216607c84015246901b16608482015260009250608c019050610df6565b6060824710156110505760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161022a565b843b61109e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161022a565b600080866001600160a01b031685876040516110ba91906117d9565b60006040518083038185875af1925050503d80600081146110f7576040519150601f19603f3d011682016040523d82523d6000602084013e6110fc565b606091505b509150915061110c8282866111d8565b979650505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561116357600080fd5b505afa158015611177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119b91906117f5565b6111a5919061180e565b6040516001600160a01b03851660248201526044810182905290915061041990859063095ea7b360e01b906064016106d2565b606083156111e7575081610a55565b8251156111f75782518084602001fd5b8160405162461bcd60e51b815260040161022a9190611834565b6001600160a01b03811681146106a357600080fd5b803567ffffffffffffffff8116811461123e57600080fd5b919050565b60008083601f84011261125557600080fd5b50813567ffffffffffffffff81111561126d57600080fd5b60208301915083602082850101111561128557600080fd5b9250929050565b600080600080606085870312156112a257600080fd5b84356112ad81611211565b93506112bb60208601611226565b9250604085013567ffffffffffffffff8111156112d757600080fd5b6112e387828801611243565b95989497509550505050565b6000806000806060858703121561130557600080fd5b843561131081611211565b935060208501359250604085013567ffffffffffffffff8111156112d757600080fd5b60006020828403121561134557600080fd5b8135610a5581611211565b80151581146106a357600080fd5b60008060006060848603121561137357600080fd5b833561137e81611211565b925061138c60208501611226565b9150604084013561139c81611350565b809150509250925092565b600080600080600080600060e0888a0312156113c257600080fd5b87356113cd81611211565b965060208801356113dd81611211565b9550604088013594506113f260608901611226565b935061140060808901611226565b925060a088013563ffffffff8116811461141957600080fd5b915060c08801356004811061142d57600080fd5b8091505092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a0868803121561146b57600080fd5b853561147681611211565b9450602086013561148681611211565b93506040860135925061149b60608701611226565b9150608086013567ffffffffffffffff808211156114b857600080fd5b818801915088601f8301126114cc57600080fd5b8135818111156114de576114de61143d565b604051601f8201601f19908116603f011681019083821181831017156115065761150661143d565b816040528281528b602084870101111561151f57600080fd5b8260208601602083013760006020848301015280955050505050509295509295909350565b60008060008060008060a0878903121561155d57600080fd5b863561156881611211565b9550602087013561157881611211565b94506040870135935061158d60608801611226565b9250608087013567ffffffffffffffff8111156115a957600080fd5b6115b589828a01611243565b979a9699509497509295939492505050565b6000602082840312156115d957600080fd5b8135610a5581611350565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038516815267ffffffffffffffff841660208201526060604082015260006105ab6060830184866115e4565b6001600160a01b03851681528360208201526060604082015260006105ab6060830184866115e4565b60006020828403121561167b57600080fd5b8151610a5581611211565b60005b838110156116a1578181015183820152602001611689565b838111156104195750506000910152565b600081518084526116ca816020860160208601611686565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835286602084015260a0604084015261170760a08401876116b2565b941660608301525067ffffffffffffffff919091166080909101529392505050565b60006020828403121561173b57600080fd5b8151610a5581611350565b6001600160a01b038416815267ffffffffffffffff8316602082015260606040820152600061177860608301846116b2565b95945050505050565b634e487b7160e01b600052602160045260246000fd5b60006001600160a01b03808816835267ffffffffffffffff8716602084015280861660408401525083606083015260a0608083015261110c60a08301846116b2565b600082516117eb818460208701611686565b9190910192915050565b60006020828403121561180757600080fd5b5051919050565b6000821982111561182f57634e487b7160e01b600052601160045260246000fd5b500190565b602081526000610a5560208301846116b256fea2646970667358221220cc643402015ed108e055231bb97006ebd4672807c9a42b79231774abab3e4de064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessageWithTransfer(address,address,uint256,uint64,bytes)": {
        "params": {
          "_amount": "The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_sender": "The address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from",
          "_token": "The address of the token that comes out of the bridge"
        }
      },
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes)": {
        "params": {
          "_amount": "The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_sender": "The address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from",
          "_token": "The address of the token that comes out of the bridge"
        }
      },
      "executeMessageWithTransferRefund(address,uint256,bytes)": {
        "params": {
          "_amount": "The amount of the original transfer",
          "_message": "The same message associated with the original transfer",
          "_token": "The token address of the original transfer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Application to test message with transfer refund flow ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessageWithTransfer(address,address,uint256,uint64,bytes)": {
        "notice": "Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address."
      },
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes)": {
        "notice": "Only called by MessageBus (MessageBusReceiver) if         1. executeMessageWithTransfer reverts, or         2. executeMessageWithTransfer returns false"
      },
      "executeMessageWithTransferRefund(address,uint256,bytes)": {
        "notice": "Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17363,
        "contract": "contracts/message/apps/TestRefund.sol:TestRefund",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12338,
        "contract": "contracts/message/apps/TestRefund.sol:TestRefund",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}