{
  "address": "0xdDD11E4a9dB4281c94Afc79965beAd2ef4129657",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Staking",
          "name": "_staking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "StakingRewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contribution",
          "type": "uint256"
        }
      ],
      "name": "StakingRewardContributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_rewardRequest",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimedRewardAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "contributeToRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "drainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract Staking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb440151d1cab61b2e920aeaf3d1729e196f42ff49683f469252929c21c32d014",
  "receipt": {
    "to": null,
    "from": "0x2147F049De1D68bC8265B260760AbA6eda614367",
    "contractAddress": "0xdDD11E4a9dB4281c94Afc79965beAd2ef4129657",
    "transactionIndex": 0,
    "gasUsed": "1451379",
    "logsBloom": "0x
    "blockHash": "0x0000162d00002b23c5ae979e4483e9ab74345bf6dd4cb4c01d525f648597a684",
    "transactionHash": "0xb440151d1cab61b2e920aeaf3d1729e196f42ff49683f469252929c21c32d014",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5918449,
        "transactionHash": "0xb440151d1cab61b2e920aeaf3d1729e196f42ff49683f469252929c21c32d014",
        "address": "0xdDD11E4a9dB4281c94Afc79965beAd2ef4129657",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002147f049de1d68bc8265b260760aba6eda614367"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0000162d00002b23c5ae979e4483e9ab74345bf6dd4cb4c01d525f648597a684"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5918449,
        "transactionHash": "0xb440151d1cab61b2e920aeaf3d1729e196f42ff49683f469252929c21c32d014",
        "address": "0xdDD11E4a9dB4281c94Afc79965beAd2ef4129657",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x0000000000000000000000002147f049de1d68bc8265b260760aba6eda614367",
        "logIndex": 1,
        "blockHash": "0x0000162d00002b23c5ae979e4483e9ab74345bf6dd4cb4c01d525f648597a684"
      }
    ],
    "blockNumber": 5918449,
    "cumulativeGasUsed": "1451379",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5a21757B4451640358414A4b3499199B3CA11C94"
  ],
  "solcInputHash": "bb7477b53756a76aabf406494035deb5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Staking\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"StakingRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"}],\"name\":\"StakingRewardContributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_rewardRequest\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedRewardAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"contributeToRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract Staking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimReward(bytes,bytes[])\":{\"details\":\"Here we use cumulative reward to make claim process idempotent\",\"params\":{\"_rewardRequest\":\"reward request bytes coded in protobuf\",\"_sigs\":\"list of validator signatures\"}},\"contributeToRewardPool(uint256)\":{\"params\":{\"_amount\":\"the amount of CELR token to contribute\"}},\"drainToken(uint256)\":{\"details\":\"emergency use only\",\"params\":{\"_amount\":\"drained CELR token amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimReward(bytes,bytes[])\":{\"notice\":\"Claim reward\"},\"contributeToRewardPool(uint256)\":{\"notice\":\"Contribute CELR tokens to the reward pool\"},\"drainToken(uint256)\":{\"notice\":\"Owner drains CELR tokens when the contract is paused\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingReward.sol\":\"StakingReward\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return recover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return recover(hash, r, vs);\\n        } else {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`, `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"ECDSA: invalid signature 's' value\\\"\\n        );\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x828774372910d18e7337bc31a288d786748af4cd9da80222467e486ed1d569ab\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {DataTypes as dt} from \\\"./libraries/DataTypes.sol\\\";\\nimport \\\"./interfaces/ISigsVerifier.sol\\\";\\nimport \\\"./libraries/PbStaking.sol\\\";\\nimport \\\"./safeguard/Pauser.sol\\\";\\nimport \\\"./safeguard/Whitelist.sol\\\";\\n\\n/**\\n * @title A Staking contract shared by all external sidechains and apps\\n */\\ncontract Staking is ISigsVerifier, Pauser, Whitelist {\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    IERC20 public immutable CELER_TOKEN;\\n\\n    uint256 public bondedTokens;\\n    uint256 public nextBondBlock;\\n    address[] public valAddrs;\\n    address[] public bondedValAddrs;\\n    mapping(address => dt.Validator) public validators; // key is valAddr\\n    mapping(address => address) public signerVals; // signerAddr -> valAddr\\n    mapping(uint256 => bool) public slashNonces;\\n\\n    mapping(dt.ParamName => uint256) public params;\\n    address public govContract;\\n    address public rewardContract;\\n    uint256 public forfeiture;\\n\\n    /* Events */\\n    event ValidatorNotice(address indexed valAddr, string key, bytes data, address from);\\n    event ValidatorStatusUpdate(address indexed valAddr, dt.ValidatorStatus indexed status);\\n    event DelegationUpdate(\\n        address indexed valAddr,\\n        address indexed delAddr,\\n        uint256 valTokens,\\n        uint256 delShares,\\n        int256 tokenDiff\\n    );\\n    event Undelegated(address indexed valAddr, address indexed delAddr, uint256 amount);\\n    event Slash(address indexed valAddr, uint64 nonce, uint256 slashAmt);\\n    event SlashAmtCollected(address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Staking constructor\\n     * @param _celerTokenAddress address of Celer Token Contract\\n     * @param _proposalDeposit required deposit amount for a governance proposal\\n     * @param _votingPeriod voting timeout for a governance proposal\\n     * @param _unbondingPeriod the locking time for funds locked before withdrawn\\n     * @param _maxBondedValidators the maximum number of bonded validators\\n     * @param _minValidatorTokens the global minimum token amount requirement for bonded validator\\n     * @param _minSelfDelegation minimal amount of self-delegated tokens\\n     * @param _advanceNoticePeriod the wait time after the announcement and prior to the effective date of an update\\n     * @param _validatorBondInterval min interval between bondValidator\\n     * @param _maxSlashFactor maximal slashing factor (1e6 = 100%)\\n     */\\n    constructor(\\n        address _celerTokenAddress,\\n        uint256 _proposalDeposit,\\n        uint256 _votingPeriod,\\n        uint256 _unbondingPeriod,\\n        uint256 _maxBondedValidators,\\n        uint256 _minValidatorTokens,\\n        uint256 _minSelfDelegation,\\n        uint256 _advanceNoticePeriod,\\n        uint256 _validatorBondInterval,\\n        uint256 _maxSlashFactor\\n    ) {\\n        CELER_TOKEN = IERC20(_celerTokenAddress);\\n\\n        params[dt.ParamName.ProposalDeposit] = _proposalDeposit;\\n        params[dt.ParamName.VotingPeriod] = _votingPeriod;\\n        params[dt.ParamName.UnbondingPeriod] = _unbondingPeriod;\\n        params[dt.ParamName.MaxBondedValidators] = _maxBondedValidators;\\n        params[dt.ParamName.MinValidatorTokens] = _minValidatorTokens;\\n        params[dt.ParamName.MinSelfDelegation] = _minSelfDelegation;\\n        params[dt.ParamName.AdvanceNoticePeriod] = _advanceNoticePeriod;\\n        params[dt.ParamName.ValidatorBondInterval] = _validatorBondInterval;\\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\\n    }\\n\\n    receive() external payable {}\\n\\n    /*********************************\\n     * External and Public Functions *\\n     *********************************/\\n\\n    /**\\n     * @notice Initialize a validator candidate\\n     * @param _signer signer address\\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\\n     * @param _commissionRate the self-declaimed commission rate\\n     */\\n    function initializeValidator(\\n        address _signer,\\n        uint256 _minSelfDelegation,\\n        uint64 _commissionRate\\n    ) external whenNotPaused onlyWhitelisted {\\n        address valAddr = msg.sender;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(validator.status == dt.ValidatorStatus.Null, \\\"Validator is initialized\\\");\\n        require(validators[_signer].status == dt.ValidatorStatus.Null, \\\"Signer is other validator\\\");\\n        require(signerVals[valAddr] == address(0), \\\"Validator is other signer\\\");\\n        require(signerVals[_signer] == address(0), \\\"Signer already used\\\");\\n        require(_commissionRate <= dt.COMMISSION_RATE_BASE, \\\"Invalid commission rate\\\");\\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \\\"Insufficient min self delegation\\\");\\n        validator.signer = _signer;\\n        validator.status = dt.ValidatorStatus.Unbonded;\\n        validator.minSelfDelegation = _minSelfDelegation;\\n        validator.commissionRate = _commissionRate;\\n        valAddrs.push(valAddr);\\n        signerVals[_signer] = valAddr;\\n\\n        delegate(valAddr, _minSelfDelegation);\\n        emit ValidatorNotice(valAddr, \\\"init\\\", abi.encode(_signer, _minSelfDelegation, _commissionRate), address(0));\\n    }\\n\\n    /**\\n     * @notice Update validator signer address\\n     * @param _signer signer address\\n     */\\n    function updateValidatorSigner(address _signer) external {\\n        address valAddr = msg.sender;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator not initialized\\\");\\n        require(signerVals[_signer] == address(0), \\\"Signer already used\\\");\\n        if (_signer != valAddr) {\\n            require(validators[_signer].status == dt.ValidatorStatus.Null, \\\"Signer is other validator\\\");\\n        }\\n\\n        delete signerVals[validator.signer];\\n        validator.signer = _signer;\\n        signerVals[_signer] = valAddr;\\n\\n        emit ValidatorNotice(valAddr, \\\"signer\\\", abi.encode(_signer), address(0));\\n    }\\n\\n    /**\\n     * @notice Candidate claims to become a bonded validator\\n     * @dev caller can be either validator owner or signer\\n     */\\n    function bondValidator() external {\\n        address valAddr = msg.sender;\\n        if (signerVals[msg.sender] != address(0)) {\\n            valAddr = signerVals[msg.sender];\\n        }\\n        dt.Validator storage validator = validators[valAddr];\\n        require(\\n            validator.status == dt.ValidatorStatus.Unbonded || validator.status == dt.ValidatorStatus.Unbonding,\\n            \\\"Invalid validator status\\\"\\n        );\\n        require(block.number >= validator.bondBlock, \\\"Bond block not reached\\\");\\n        require(block.number >= nextBondBlock, \\\"Too frequent validator bond\\\");\\n        nextBondBlock = block.number + params[dt.ParamName.ValidatorBondInterval];\\n        require(hasMinRequiredTokens(valAddr, true), \\\"Not have min tokens\\\");\\n\\n        uint256 maxBondedValidators = params[dt.ParamName.MaxBondedValidators];\\n        // if the number of validators has not reached the max_validator_num,\\n        // add validator directly\\n        if (bondedValAddrs.length < maxBondedValidators) {\\n            _bondValidator(valAddr);\\n            _decentralizationCheck(validator.tokens);\\n            return;\\n        }\\n        // if the number of validators has already reached the max_validator_num,\\n        // add validator only if its tokens is more than the current least bonded validator tokens\\n        uint256 minTokens = dt.MAX_INT;\\n        uint256 minTokensIndex;\\n        for (uint256 i = 0; i < maxBondedValidators; i++) {\\n            if (validators[bondedValAddrs[i]].tokens < minTokens) {\\n                minTokensIndex = i;\\n                minTokens = validators[bondedValAddrs[i]].tokens;\\n                if (minTokens == 0) {\\n                    break;\\n                }\\n            }\\n        }\\n        require(validator.tokens > minTokens, \\\"Insufficient tokens\\\");\\n        _replaceBondedValidator(valAddr, minTokensIndex);\\n        _decentralizationCheck(validator.tokens);\\n    }\\n\\n    /**\\n     * @notice Confirm validator status from Unbonding to Unbonded\\n     * @param _valAddr the address of the validator\\n     */\\n    function confirmUnbondedValidator(address _valAddr) external {\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status == dt.ValidatorStatus.Unbonding, \\\"Validator not unbonding\\\");\\n        require(block.number >= validator.unbondBlock, \\\"Unbond block not reached\\\");\\n\\n        validator.status = dt.ValidatorStatus.Unbonded;\\n        delete validator.unbondBlock;\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonded);\\n    }\\n\\n    /**\\n     * @notice Delegate CELR tokens to a validator\\n     * @dev Minimal amount per delegate operation is 1 CELR\\n     * @param _valAddr validator to delegate\\n     * @param _tokens the amount of delegated CELR tokens\\n     */\\n    function delegate(address _valAddr, uint256 _tokens) public whenNotPaused {\\n        address delAddr = msg.sender;\\n        require(_tokens >= dt.CELR_DECIMAL, \\\"Minimal amount is 1 CELR\\\");\\n\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\\n\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\n        delegator.shares += shares;\\n        validator.shares += shares;\\n        validator.tokens += _tokens;\\n        if (validator.status == dt.ValidatorStatus.Bonded) {\\n            bondedTokens += _tokens;\\n            _decentralizationCheck(validator.tokens);\\n        }\\n        CELER_TOKEN.safeTransferFrom(delAddr, address(this), _tokens);\\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, int256(_tokens));\\n    }\\n\\n    /**\\n     * @notice Undelegate shares from a validator\\n     * @dev Tokens are delegated by the msgSender to the validator\\n     * @param _valAddr the address of the validator\\n     * @param _shares undelegate shares\\n     */\\n    function undelegateShares(address _valAddr, uint256 _shares) external {\\n        require(_shares >= dt.CELR_DECIMAL, \\\"Minimal amount is 1 share\\\");\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        uint256 tokens = _shareToToken(_shares, validator.tokens, validator.shares);\\n        _undelegate(validator, _valAddr, tokens, _shares);\\n    }\\n\\n    /**\\n     * @notice Undelegate shares from a validator\\n     * @dev Tokens are delegated by the msgSender to the validator\\n     * @param _valAddr the address of the validator\\n     * @param _tokens undelegate tokens\\n     */\\n    function undelegateTokens(address _valAddr, uint256 _tokens) external {\\n        require(_tokens >= dt.CELR_DECIMAL, \\\"Minimal amount is 1 CELR\\\");\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        uint256 shares = _tokenToShare(_tokens, validator.tokens, validator.shares);\\n        _undelegate(validator, _valAddr, _tokens, shares);\\n    }\\n\\n    /**\\n     * @notice Complete pending undelegations from a validator\\n     * @param _valAddr the address of the validator\\n     */\\n    function completeUndelegate(address _valAddr) external {\\n        address delAddr = msg.sender;\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\n\\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\\n        // for all pending undelegations\\n        uint32 i;\\n        uint256 undelegationShares;\\n        for (i = delegator.undelegations.head; i < delegator.undelegations.tail; i++) {\\n            if (isUnbonded || delegator.undelegations.queue[i].creationBlock + unbondingPeriod <= block.number) {\\n                // complete undelegation when the validator becomes unbonded or\\n                // the unbondingPeriod for the pending undelegation is up.\\n                undelegationShares += delegator.undelegations.queue[i].shares;\\n                delete delegator.undelegations.queue[i];\\n                continue;\\n            }\\n            break;\\n        }\\n        delegator.undelegations.head = i;\\n\\n        require(undelegationShares > 0, \\\"No undelegation ready to be completed\\\");\\n        uint256 tokens = _shareToToken(undelegationShares, validator.undelegationTokens, validator.undelegationShares);\\n        validator.undelegationShares -= undelegationShares;\\n        validator.undelegationTokens -= tokens;\\n        CELER_TOKEN.safeTransfer(delAddr, tokens);\\n        emit Undelegated(_valAddr, delAddr, tokens);\\n    }\\n\\n    /**\\n     * @notice Update commission rate\\n     * @param _newRate new commission rate\\n     */\\n    function updateCommissionRate(uint64 _newRate) external {\\n        address valAddr = msg.sender;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        require(_newRate <= dt.COMMISSION_RATE_BASE, \\\"Invalid new rate\\\");\\n        validator.commissionRate = _newRate;\\n        emit ValidatorNotice(valAddr, \\\"commission\\\", abi.encode(_newRate), address(0));\\n    }\\n\\n    /**\\n     * @notice Update minimal self delegation value\\n     * @param _minSelfDelegation minimal amount of tokens staked by the validator itself\\n     */\\n    function updateMinSelfDelegation(uint256 _minSelfDelegation) external {\\n        address valAddr = msg.sender;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        require(_minSelfDelegation >= params[dt.ParamName.MinSelfDelegation], \\\"Insufficient min self delegation\\\");\\n        if (_minSelfDelegation < validator.minSelfDelegation) {\\n            require(validator.status != dt.ValidatorStatus.Bonded, \\\"Validator is bonded\\\");\\n            validator.bondBlock = uint64(block.number + params[dt.ParamName.AdvanceNoticePeriod]);\\n        }\\n        validator.minSelfDelegation = _minSelfDelegation;\\n        emit ValidatorNotice(valAddr, \\\"min-self-delegation\\\", abi.encode(_minSelfDelegation), address(0));\\n    }\\n\\n    /**\\n     * @notice Slash a validator and its delegators\\n     * @param _slashRequest slash request bytes coded in protobuf\\n     * @param _sigs list of validator signatures\\n     */\\n    function slash(bytes calldata _slashRequest, bytes[] calldata _sigs) external whenNotPaused {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Slash\\\"));\\n        verifySignatures(abi.encodePacked(domain, _slashRequest), _sigs);\\n\\n        PbStaking.Slash memory request = PbStaking.decSlash(_slashRequest);\\n        require(block.timestamp < request.expireTime, \\\"Slash expired\\\");\\n        require(request.slashFactor <= dt.SLASH_FACTOR_DECIMAL, \\\"Invalid slash factor\\\");\\n        require(request.slashFactor <= params[dt.ParamName.MaxSlashFactor], \\\"Exceed max slash factor\\\");\\n        require(!slashNonces[request.nonce], \\\"Used slash nonce\\\");\\n        slashNonces[request.nonce] = true;\\n\\n        address valAddr = request.validator;\\n        dt.Validator storage validator = validators[valAddr];\\n        require(\\n            validator.status == dt.ValidatorStatus.Bonded || validator.status == dt.ValidatorStatus.Unbonding,\\n            \\\"Invalid validator status\\\"\\n        );\\n\\n        // slash delegated tokens\\n        uint256 slashAmt = (validator.tokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\\n        validator.tokens -= slashAmt;\\n        if (validator.status == dt.ValidatorStatus.Bonded) {\\n            bondedTokens -= slashAmt;\\n            if (request.jailPeriod > 0 || !hasMinRequiredTokens(valAddr, true)) {\\n                _unbondValidator(valAddr);\\n            }\\n        }\\n        if (validator.status == dt.ValidatorStatus.Unbonding && request.jailPeriod > 0) {\\n            validator.bondBlock = uint64(block.number + request.jailPeriod);\\n        }\\n        emit DelegationUpdate(valAddr, address(0), validator.tokens, 0, -int256(slashAmt));\\n\\n        // slash pending undelegations\\n        uint256 slashUndelegation = (validator.undelegationTokens * request.slashFactor) / dt.SLASH_FACTOR_DECIMAL;\\n        validator.undelegationTokens -= slashUndelegation;\\n        slashAmt += slashUndelegation;\\n\\n        uint256 collectAmt;\\n        for (uint256 i = 0; i < request.collectors.length; i++) {\\n            PbStaking.AcctAmtPair memory collector = request.collectors[i];\\n            if (collectAmt + collector.amount > slashAmt) {\\n                collector.amount = slashAmt - collectAmt;\\n            }\\n            if (collector.amount > 0) {\\n                collectAmt += collector.amount;\\n                if (collector.account == address(0)) {\\n                    CELER_TOKEN.safeTransfer(msg.sender, collector.amount);\\n                    emit SlashAmtCollected(msg.sender, collector.amount);\\n                } else {\\n                    CELER_TOKEN.safeTransfer(collector.account, collector.amount);\\n                    emit SlashAmtCollected(collector.account, collector.amount);\\n                }\\n            }\\n        }\\n        forfeiture += slashAmt - collectAmt;\\n        emit Slash(valAddr, request.nonce, slashAmt);\\n    }\\n\\n    function collectForfeiture() external {\\n        require(forfeiture > 0, \\\"Nothing to collect\\\");\\n        CELER_TOKEN.safeTransfer(rewardContract, forfeiture);\\n        forfeiture = 0;\\n    }\\n\\n    /**\\n     * @notice Validator notice event, could be triggered by anyone\\n     */\\n    function validatorNotice(\\n        address _valAddr,\\n        string calldata _key,\\n        bytes calldata _data\\n    ) external {\\n        dt.Validator storage validator = validators[_valAddr];\\n        require(validator.status != dt.ValidatorStatus.Null, \\\"Validator is not initialized\\\");\\n        emit ValidatorNotice(_valAddr, _key, _data, msg.sender);\\n    }\\n\\n    function setParamValue(dt.ParamName _name, uint256 _value) external {\\n        require(msg.sender == govContract, \\\"Caller is not gov contract\\\");\\n        if (_name == dt.ParamName.MaxBondedValidators) {\\n            require(bondedValAddrs.length <= _value, \\\"invalid value\\\");\\n        }\\n        params[_name] = _value;\\n    }\\n\\n    function setGovContract(address _addr) external onlyOwner {\\n        govContract = _addr;\\n    }\\n\\n    function setRewardContract(address _addr) external onlyOwner {\\n        rewardContract = _addr;\\n    }\\n\\n    /**\\n     * @notice Set max slash factor\\n     */\\n    function setMaxSlashFactor(uint256 _maxSlashFactor) external onlyOwner {\\n        params[dt.ParamName.MaxSlashFactor] = _maxSlashFactor;\\n    }\\n\\n    /**\\n     * @notice Owner drains tokens when the contract is paused\\n     * @dev emergency use only\\n     * @param _amount drained token amount\\n     */\\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\\n        CELER_TOKEN.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /**************************\\n     *  Public View Functions *\\n     **************************/\\n\\n    /**\\n     * @notice Validate if a message is signed by quorum tokens\\n     * @param _msg signed message\\n     * @param _sigs list of validator signatures\\n     */\\n    function verifySignatures(bytes memory _msg, bytes[] memory _sigs) public view returns (bool) {\\n        bytes32 hash = keccak256(_msg).toEthSignedMessageHash();\\n        uint256 signedTokens;\\n        address prev = address(0);\\n        uint256 quorum = getQuorumTokens();\\n        for (uint256 i = 0; i < _sigs.length; i++) {\\n            address signer = hash.recover(_sigs[i]);\\n            require(signer > prev, \\\"Signers not in ascending order\\\");\\n            prev = signer;\\n            dt.Validator storage validator = validators[signerVals[signer]];\\n            if (validator.status != dt.ValidatorStatus.Bonded) {\\n                continue;\\n            }\\n            signedTokens += validator.tokens;\\n            if (signedTokens >= quorum) {\\n                return true;\\n            }\\n        }\\n        revert(\\\"Quorum not reached\\\");\\n    }\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the validators.\\n     * @param _msg signed message\\n     * @param _sigs the list of signatures\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata,\\n        uint256[] calldata\\n    ) public view override {\\n        require(verifySignatures(_msg, _sigs), \\\"Failed to verify sigs\\\");\\n    }\\n\\n    /**\\n     * @notice Get quorum amount of tokens\\n     * @return the quorum amount\\n     */\\n    function getQuorumTokens() public view returns (uint256) {\\n        return (bondedTokens * 2) / 3 + 1;\\n    }\\n\\n    /**\\n     * @notice Get validator info\\n     * @param _valAddr the address of the validator\\n     * @return Validator token amount\\n     */\\n    function getValidatorTokens(address _valAddr) public view returns (uint256) {\\n        return validators[_valAddr].tokens;\\n    }\\n\\n    /**\\n     * @notice Get validator info\\n     * @param _valAddr the address of the validator\\n     * @return Validator status\\n     */\\n    function getValidatorStatus(address _valAddr) public view returns (dt.ValidatorStatus) {\\n        return validators[_valAddr].status;\\n    }\\n\\n    /**\\n     * @notice Check the given address is a validator or not\\n     * @param _addr the address to check\\n     * @return the given address is a validator or not\\n     */\\n    function isBondedValidator(address _addr) public view returns (bool) {\\n        return validators[_addr].status == dt.ValidatorStatus.Bonded;\\n    }\\n\\n    /**\\n     * @notice Get the number of validators\\n     * @return the number of validators\\n     */\\n    function getValidatorNum() public view returns (uint256) {\\n        return valAddrs.length;\\n    }\\n\\n    /**\\n     * @notice Get the number of bonded validators\\n     * @return the number of bonded validators\\n     */\\n    function getBondedValidatorNum() public view returns (uint256) {\\n        return bondedValAddrs.length;\\n    }\\n\\n    /**\\n     * @return addresses and token amounts of bonded validators\\n     */\\n    function getBondedValidatorsTokens() public view returns (dt.ValidatorTokens[] memory) {\\n        dt.ValidatorTokens[] memory infos = new dt.ValidatorTokens[](bondedValAddrs.length);\\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\\n            address valAddr = bondedValAddrs[i];\\n            infos[i] = dt.ValidatorTokens(valAddr, validators[valAddr].tokens);\\n        }\\n        return infos;\\n    }\\n\\n    /**\\n     * @notice Check if min token requirements are met\\n     * @param _valAddr the address of the validator\\n     * @param _checkSelfDelegation check self delegation\\n     */\\n    function hasMinRequiredTokens(address _valAddr, bool _checkSelfDelegation) public view returns (bool) {\\n        dt.Validator storage v = validators[_valAddr];\\n        uint256 valTokens = v.tokens;\\n        if (valTokens < params[dt.ParamName.MinValidatorTokens]) {\\n            return false;\\n        }\\n        if (_checkSelfDelegation) {\\n            uint256 selfDelegation = _shareToToken(v.delegators[_valAddr].shares, valTokens, v.shares);\\n            if (selfDelegation < v.minSelfDelegation) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the delegator info of a specific validator\\n     * @param _valAddr the address of the validator\\n     * @param _delAddr the address of the delegator\\n     * @return DelegatorInfo from the given validator\\n     */\\n    function getDelegatorInfo(address _valAddr, address _delAddr) public view returns (dt.DelegatorInfo memory) {\\n        dt.Validator storage validator = validators[_valAddr];\\n        dt.Delegator storage d = validator.delegators[_delAddr];\\n        uint256 tokens = _shareToToken(d.shares, validator.tokens, validator.shares);\\n\\n        uint256 undelegationShares;\\n        uint256 withdrawableUndelegationShares;\\n        uint256 unbondingPeriod = params[dt.ParamName.UnbondingPeriod];\\n        bool isUnbonded = validator.status == dt.ValidatorStatus.Unbonded;\\n        uint256 len = d.undelegations.tail - d.undelegations.head;\\n        dt.Undelegation[] memory undelegations = new dt.Undelegation[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            undelegations[i] = d.undelegations.queue[i + d.undelegations.head];\\n            undelegationShares += undelegations[i].shares;\\n            if (isUnbonded || undelegations[i].creationBlock + unbondingPeriod <= block.number) {\\n                withdrawableUndelegationShares += undelegations[i].shares;\\n            }\\n        }\\n        uint256 undelegationTokens = _shareToToken(\\n            undelegationShares,\\n            validator.undelegationTokens,\\n            validator.undelegationShares\\n        );\\n        uint256 withdrawableUndelegationTokens = _shareToToken(\\n            withdrawableUndelegationShares,\\n            validator.undelegationTokens,\\n            validator.undelegationShares\\n        );\\n\\n        return\\n            dt.DelegatorInfo(\\n                _valAddr,\\n                tokens,\\n                d.shares,\\n                undelegations,\\n                undelegationTokens,\\n                withdrawableUndelegationTokens\\n            );\\n    }\\n\\n    /**\\n     * @notice Get the value of a specific uint parameter\\n     * @param _name the key of this parameter\\n     * @return the value of this parameter\\n     */\\n    function getParamValue(dt.ParamName _name) public view returns (uint256) {\\n        return params[_name];\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    function _undelegate(\\n        dt.Validator storage validator,\\n        address _valAddr,\\n        uint256 _tokens,\\n        uint256 _shares\\n    ) private {\\n        address delAddr = msg.sender;\\n        dt.Delegator storage delegator = validator.delegators[delAddr];\\n        delegator.shares -= _shares;\\n        validator.shares -= _shares;\\n        validator.tokens -= _tokens;\\n        if (validator.tokens != validator.shares && delegator.shares <= 2) {\\n            // Remove residual share caused by rounding error when total shares and tokens are not equal\\n            validator.shares -= delegator.shares;\\n            delegator.shares = 0;\\n        }\\n        require(delegator.shares == 0 || delegator.shares >= dt.CELR_DECIMAL, \\\"not enough remaining shares\\\");\\n\\n        if (validator.status == dt.ValidatorStatus.Unbonded) {\\n            CELER_TOKEN.safeTransfer(delAddr, _tokens);\\n            emit Undelegated(_valAddr, delAddr, _tokens);\\n            return;\\n        } else if (validator.status == dt.ValidatorStatus.Bonded) {\\n            bondedTokens -= _tokens;\\n            if (!hasMinRequiredTokens(_valAddr, delAddr == _valAddr)) {\\n                _unbondValidator(_valAddr);\\n            }\\n        }\\n        require(\\n            delegator.undelegations.tail - delegator.undelegations.head < dt.MAX_UNDELEGATION_ENTRIES,\\n            \\\"Exceed max undelegation entries\\\"\\n        );\\n\\n        uint256 undelegationShares = _tokenToShare(_tokens, validator.undelegationTokens, validator.undelegationShares);\\n        validator.undelegationShares += undelegationShares;\\n        validator.undelegationTokens += _tokens;\\n        dt.Undelegation storage undelegation = delegator.undelegations.queue[delegator.undelegations.tail];\\n        undelegation.shares = undelegationShares;\\n        undelegation.creationBlock = block.number;\\n        delegator.undelegations.tail++;\\n\\n        emit DelegationUpdate(_valAddr, delAddr, validator.tokens, delegator.shares, -int256(_tokens));\\n    }\\n\\n    /**\\n     * @notice Set validator to bonded\\n     * @param _valAddr the address of the validator\\n     */\\n    function _setBondedValidator(address _valAddr) private {\\n        dt.Validator storage validator = validators[_valAddr];\\n        validator.status = dt.ValidatorStatus.Bonded;\\n        delete validator.unbondBlock;\\n        bondedTokens += validator.tokens;\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Bonded);\\n    }\\n\\n    /**\\n     * @notice Set validator to unbonding\\n     * @param _valAddr the address of the validator\\n     */\\n    function _setUnbondingValidator(address _valAddr) private {\\n        dt.Validator storage validator = validators[_valAddr];\\n        validator.status = dt.ValidatorStatus.Unbonding;\\n        validator.unbondBlock = uint64(block.number + params[dt.ParamName.UnbondingPeriod]);\\n        bondedTokens -= validator.tokens;\\n        emit ValidatorStatusUpdate(_valAddr, dt.ValidatorStatus.Unbonding);\\n    }\\n\\n    /**\\n     * @notice Bond a validator\\n     * @param _valAddr the address of the validator\\n     */\\n    function _bondValidator(address _valAddr) private {\\n        bondedValAddrs.push(_valAddr);\\n        _setBondedValidator(_valAddr);\\n    }\\n\\n    /**\\n     * @notice Replace a bonded validator\\n     * @param _valAddr the address of the new validator\\n     * @param _index the index of the validator to be replaced\\n     */\\n    function _replaceBondedValidator(address _valAddr, uint256 _index) private {\\n        _setUnbondingValidator(bondedValAddrs[_index]);\\n        bondedValAddrs[_index] = _valAddr;\\n        _setBondedValidator(_valAddr);\\n    }\\n\\n    /**\\n     * @notice Unbond a validator\\n     * @param _valAddr validator to be removed\\n     */\\n    function _unbondValidator(address _valAddr) private {\\n        uint256 lastIndex = bondedValAddrs.length - 1;\\n        for (uint256 i = 0; i < bondedValAddrs.length; i++) {\\n            if (bondedValAddrs[i] == _valAddr) {\\n                if (i < lastIndex) {\\n                    bondedValAddrs[i] = bondedValAddrs[lastIndex];\\n                }\\n                bondedValAddrs.pop();\\n                _setUnbondingValidator(_valAddr);\\n                return;\\n            }\\n        }\\n        revert(\\\"Not bonded validator\\\");\\n    }\\n\\n    /**\\n     * @notice Check if one validator as too much power\\n     * @param _valTokens token amounts of the validator\\n     */\\n    function _decentralizationCheck(uint256 _valTokens) private view {\\n        uint256 bondedValNum = bondedValAddrs.length;\\n        if (bondedValNum == 2 || bondedValNum == 3) {\\n            require(_valTokens < getQuorumTokens(), \\\"Single validator should not have quorum tokens\\\");\\n        } else if (bondedValNum > 3) {\\n            require(_valTokens < bondedTokens / 3, \\\"Single validator should not have 1/3 tokens\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert token to share\\n     */\\n    function _tokenToShare(\\n        uint256 tokens,\\n        uint256 totalTokens,\\n        uint256 totalShares\\n    ) private pure returns (uint256) {\\n        if (totalTokens == 0) {\\n            return tokens;\\n        }\\n        return (tokens * totalShares) / totalTokens;\\n    }\\n\\n    /**\\n     * @notice Convert share to token\\n     */\\n    function _shareToToken(\\n        uint256 shares,\\n        uint256 totalTokens,\\n        uint256 totalShares\\n    ) private pure returns (uint256) {\\n        if (totalShares == 0) {\\n            return shares;\\n        }\\n        return (shares * totalTokens) / totalShares;\\n    }\\n}\\n\",\"keccak256\":\"0x5f279135cd54809b820d1839faf3d7d47b1a595cf4d7e197063354481e911680\",\"license\":\"GPL-3.0-only\"},\"contracts/StakingReward.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {DataTypes as dt} from \\\"./libraries/DataTypes.sol\\\";\\nimport \\\"./safeguard/Pauser.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\ncontract StakingReward is Pauser {\\n    using SafeERC20 for IERC20;\\n\\n    Staking public immutable staking;\\n\\n    // recipient => CELR reward amount\\n    mapping(address => uint256) public claimedRewardAmounts;\\n\\n    event StakingRewardClaimed(address indexed recipient, uint256 reward);\\n    event StakingRewardContributed(address indexed contributor, uint256 contribution);\\n\\n    constructor(Staking _staking) {\\n        staking = _staking;\\n    }\\n\\n    /**\\n     * @notice Claim reward\\n     * @dev Here we use cumulative reward to make claim process idempotent\\n     * @param _rewardRequest reward request bytes coded in protobuf\\n     * @param _sigs list of validator signatures\\n     */\\n    function claimReward(bytes calldata _rewardRequest, bytes[] calldata _sigs) external whenNotPaused {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"StakingReward\\\"));\\n        staking.verifySignatures(abi.encodePacked(domain, _rewardRequest), _sigs);\\n        PbStaking.StakingReward memory reward = PbStaking.decStakingReward(_rewardRequest);\\n\\n        uint256 cumulativeRewardAmount = reward.cumulativeRewardAmount;\\n        uint256 newReward = cumulativeRewardAmount - claimedRewardAmounts[reward.recipient];\\n        require(newReward > 0, \\\"No new reward\\\");\\n        claimedRewardAmounts[reward.recipient] = cumulativeRewardAmount;\\n        staking.CELER_TOKEN().safeTransfer(reward.recipient, newReward);\\n        emit StakingRewardClaimed(reward.recipient, newReward);\\n    }\\n\\n    /**\\n     * @notice Contribute CELR tokens to the reward pool\\n     * @param _amount the amount of CELR token to contribute\\n     */\\n    function contributeToRewardPool(uint256 _amount) external whenNotPaused {\\n        address contributor = msg.sender;\\n        IERC20(staking.CELER_TOKEN()).safeTransferFrom(contributor, address(this), _amount);\\n\\n        emit StakingRewardContributed(contributor, _amount);\\n    }\\n\\n    /**\\n     * @notice Owner drains CELR tokens when the contract is paused\\n     * @dev emergency use only\\n     * @param _amount drained CELR token amount\\n     */\\n    function drainToken(uint256 _amount) external whenPaused onlyOwner {\\n        IERC20(staking.CELER_TOKEN()).safeTransfer(msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xc4d6dbeed0bee20f837eb9d76463cf0f50ab0b48db5439a81c714a6b819f5d3a\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0xbc3887db62a3dfc74137f8d5d8236533b035501929772aa8e512d3df0bc85341\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nlibrary DataTypes {\\n    uint256 constant CELR_DECIMAL = 1e18;\\n    uint256 constant MAX_INT = 2**256 - 1;\\n    uint256 constant COMMISSION_RATE_BASE = 10000; // 1 commissionRate means 0.01%\\n    uint256 constant MAX_UNDELEGATION_ENTRIES = 10;\\n    uint256 constant SLASH_FACTOR_DECIMAL = 1e6;\\n\\n    enum ValidatorStatus {\\n        Null,\\n        Unbonded,\\n        Unbonding,\\n        Bonded\\n    }\\n\\n    enum ParamName {\\n        ProposalDeposit,\\n        VotingPeriod,\\n        UnbondingPeriod,\\n        MaxBondedValidators,\\n        MinValidatorTokens,\\n        MinSelfDelegation,\\n        AdvanceNoticePeriod,\\n        ValidatorBondInterval,\\n        MaxSlashFactor\\n    }\\n\\n    struct Undelegation {\\n        uint256 shares;\\n        uint256 creationBlock;\\n    }\\n\\n    struct Undelegations {\\n        mapping(uint256 => Undelegation) queue;\\n        uint32 head;\\n        uint32 tail;\\n    }\\n\\n    struct Delegator {\\n        uint256 shares;\\n        Undelegations undelegations;\\n    }\\n\\n    struct Validator {\\n        ValidatorStatus status;\\n        address signer;\\n        uint256 tokens; // sum of all tokens delegated to this validator\\n        uint256 shares; // sum of all delegation shares\\n        uint256 undelegationTokens; // tokens being undelegated\\n        uint256 undelegationShares; // shares of tokens being undelegated\\n        mapping(address => Delegator) delegators;\\n        uint256 minSelfDelegation;\\n        uint64 bondBlock; // cannot become bonded before this block\\n        uint64 unbondBlock; // cannot become unbonded before this block\\n        uint64 commissionRate; // equal to real commission rate * COMMISSION_RATE_BASE\\n    }\\n\\n    // used for external view output\\n    struct ValidatorTokens {\\n        address valAddr;\\n        uint256 tokens;\\n    }\\n\\n    // used for external view output\\n    struct ValidatorInfo {\\n        address valAddr;\\n        ValidatorStatus status;\\n        address signer;\\n        uint256 tokens;\\n        uint256 shares;\\n        uint256 minSelfDelegation;\\n        uint64 commissionRate;\\n    }\\n\\n    // used for external view output\\n    struct DelegatorInfo {\\n        address valAddr;\\n        uint256 tokens;\\n        uint256 shares;\\n        Undelegation[] undelegations;\\n        uint256 undelegationTokens;\\n        uint256 withdrawableUndelegationTokens;\\n    }\\n}\\n\",\"keccak256\":\"0x8cc21f05d59b03022d985c5e61adecc27c8fc986ab127c044e9b8615d3830464\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\n// runtime proto sol library\\nlibrary Pb {\\n    enum WireType {\\n        Varint,\\n        Fixed64,\\n        LengthDelim,\\n        StartGroup,\\n        EndGroup,\\n        Fixed32\\n    }\\n\\n    struct Buffer {\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\n        bytes b; // hold serialized proto msg, readonly\\n    }\\n\\n    // create a new in-memory Buffer object from raw msg bytes\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\n        buf.b = raw;\\n        buf.idx = 0;\\n    }\\n\\n    // whether there are unread bytes\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\n        return buf.idx < buf.b.length;\\n    }\\n\\n    // decode current field number and wiretype\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\n        uint256 v = decVarint(buf);\\n        tag = v / 8;\\n        wiretype = WireType(v & 7);\\n    }\\n\\n    // count tag occurrences, return an array due to no memory map support\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\n    // should keep buf.idx unchanged because this is only a count function\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\n        uint256 originalIdx = buf.idx;\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\n        uint256 tag;\\n        WireType wire;\\n        while (hasMore(buf)) {\\n            (tag, wire) = decKey(buf);\\n            cnts[tag] += 1;\\n            skipValue(buf, wire);\\n        }\\n        buf.idx = originalIdx;\\n    }\\n\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\n        v = buf.idx; // use v to save one additional uint variable\\n        assembly {\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\n        }\\n        uint256 b; // store current byte content\\n        v = 0; // reset to 0 for return value\\n        for (uint256 i = 0; i < 10; i++) {\\n            assembly {\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\n            }\\n            v |= (b & 0x7F) << (i * 7);\\n            if (b & 0x80 == 0) {\\n                buf.idx += i + 1;\\n                return v;\\n            }\\n        }\\n        revert(); // i=10, invalid varint stream\\n    }\\n\\n    // read length delimited field and return bytes\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        b = new bytes(len);\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\n        uint256 bStart;\\n        uint256 bufBStart = buf.idx;\\n        assembly {\\n            bStart := add(b, 32)\\n            bufBStart := add(add(bufB, 32), bufBStart)\\n        }\\n        for (uint256 i = 0; i < len; i += 32) {\\n            assembly {\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\n            }\\n        }\\n        buf.idx = end;\\n    }\\n\\n    // return packed ints\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        // array in memory must be init w/ known length\\n        // so we have to create a tmp array w/ max possible len first\\n        uint256[] memory tmp = new uint256[](len);\\n        uint256 i = 0; // count how many ints are there\\n        while (buf.idx < end) {\\n            tmp[i] = decVarint(buf);\\n            i++;\\n        }\\n        t = new uint256[](i); // init t with correct length\\n        for (uint256 j = 0; j < i; j++) {\\n            t[j] = tmp[j];\\n        }\\n        return t;\\n    }\\n\\n    // move idx pass current value field, to beginning of next tag or msg end\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\n        if (wire == WireType.Varint) {\\n            decVarint(buf);\\n        } else if (wire == WireType.LengthDelim) {\\n            uint256 len = decVarint(buf);\\n            buf.idx += len; // skip len bytes value data\\n            require(buf.idx <= buf.b.length); // avoid overflow\\n        } else {\\n            revert();\\n        } // unsupported wiretype\\n    }\\n\\n    // type conversion help utils\\n    function _bool(uint256 x) internal pure returns (bool v) {\\n        return x != 0;\\n    }\\n\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\n        assembly {\\n            v := mload(add(b, 32))\\n        } // load all 32bytes to v\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\n    }\\n\\n    function _address(bytes memory b) internal pure returns (address v) {\\n        v = _addressPayable(b);\\n    }\\n\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\n        require(b.length == 20);\\n        //load 32bytes then shift right 12 bytes\\n        assembly {\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\n        require(b.length == 32);\\n        assembly {\\n            v := mload(add(b, 32))\\n        }\\n    }\\n\\n    // uint[] to uint8[]\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\n        t = new uint8[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint8(arr[i]);\\n        }\\n    }\\n\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\n        t = new uint32[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint32(arr[i]);\\n        }\\n    }\\n\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\n        t = new uint64[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint64(arr[i]);\\n        }\\n    }\\n\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\n        t = new bool[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = arr[i] != 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x66fd8c7045b0794eca747bd534928197604a8f9c9ecadb1cfded2b45d4de5fb3\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbStaking.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/staking.proto\\npragma solidity 0.8.9;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbStaking {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct StakingReward {\\n        address recipient; // tag: 1\\n        uint256 cumulativeRewardAmount; // tag: 2\\n    } // end struct StakingReward\\n\\n    function decStakingReward(bytes memory raw) internal pure returns (StakingReward memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.recipient = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.cumulativeRewardAmount = Pb._uint256(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder StakingReward\\n\\n    struct Slash {\\n        address validator; // tag: 1\\n        uint64 nonce; // tag: 2\\n        uint64 slashFactor; // tag: 3\\n        uint64 expireTime; // tag: 4\\n        uint64 jailPeriod; // tag: 5\\n        AcctAmtPair[] collectors; // tag: 6\\n    } // end struct Slash\\n\\n    function decSlash(bytes memory raw) internal pure returns (Slash memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256[] memory cnts = buf.cntTags(6);\\n        m.collectors = new AcctAmtPair[](cnts[6]);\\n        cnts[6] = 0; // reset counter for later use\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.validator = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.nonce = uint64(buf.decVarint());\\n            } else if (tag == 3) {\\n                m.slashFactor = uint64(buf.decVarint());\\n            } else if (tag == 4) {\\n                m.expireTime = uint64(buf.decVarint());\\n            } else if (tag == 5) {\\n                m.jailPeriod = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.collectors[cnts[6]] = decAcctAmtPair(buf.decBytes());\\n                cnts[6]++;\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Slash\\n\\n    struct AcctAmtPair {\\n        address account; // tag: 1\\n        uint256 amount; // tag: 2\\n    } // end struct AcctAmtPair\\n\\n    function decAcctAmtPair(bytes memory raw) internal pure returns (AcctAmtPair memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.account = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder AcctAmtPair\\n}\\n\",\"keccak256\":\"0x0a73682ff6de7d31b8960516a358f0877cdce8efd03a420365af87f63d152097\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        pausers[account] = false;\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xa287f1f4e16a67737cc06dbeacb5e856d411125f51fca528a06d161cc26e2579\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Whitelist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract Whitelist is Ownable {\\n    mapping(address => bool) public whitelist;\\n    bool public whitelistEnabled;\\n\\n    event WhitelistedAdded(address account);\\n    event WhitelistedRemoved(address account);\\n\\n    modifier onlyWhitelisted() {\\n        if (whitelistEnabled) {\\n            require(isWhitelisted(msg.sender), \\\"Caller is not whitelisted\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Set whitelistEnabled\\n     */\\n    function setWhitelistEnabled(bool _whitelistEnabled) external onlyOwner {\\n        whitelistEnabled = _whitelistEnabled;\\n    }\\n\\n    /**\\n     * @notice Add an account to whitelist\\n     */\\n    function addWhitelisted(address account) external onlyOwner {\\n        require(!isWhitelisted(account), \\\"Already whitelisted\\\");\\n        whitelist[account] = true;\\n        emit WhitelistedAdded(account);\\n    }\\n\\n    /**\\n     * @notice Remove an account from whitelist\\n     */\\n    function removeWhitelisted(address account) external onlyOwner {\\n        require(isWhitelisted(account), \\\"Not whitelisted\\\");\\n        whitelist[account] = false;\\n        emit WhitelistedRemoved(account);\\n    }\\n\\n    /**\\n     * @return is account whitelisted\\n     */\\n    function isWhitelisted(address account) public view returns (bool) {\\n        return whitelist[account];\\n    }\\n}\\n\",\"keccak256\":\"0xb4add4fe333c2527d46b476efcca5978c3698b58fbdf1b4263c36d1015dec1f4\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a6116100975780638da5cb5b116100665780638da5cb5b1461022857806396db0fef14610239578063f2fde38b14610267578063f8df0dc51461027a57600080fd5b8063715018a6146101e257806380f51c12146101ea57806382dc1ec41461020d5780638456cb591461022057600080fd5b80634cf088d9116100d35780634cf088d9146101765780635c975abb146101b55780636b2c0f55146101c75780636ef8d66d146101da57600080fd5b80630a300b0914610105578063145aa1161461011a5780633f4ba83a1461012d57806346fbf68e14610135575b600080fd5b610118610113366004611496565b61028d565b005b610118610128366004611496565b6103d3565b61011861052f565b6101616101433660046114c4565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61019d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161016d565b600054600160a01b900460ff16610161565b6101186101d53660046114c4565b610598565b6101186105fb565b610118610604565b6101616101f83660046114c4565b60016020526000908152604090205460ff1681565b61011861021b3660046114c4565b610668565b6101186106cb565b6000546001600160a01b031661019d565b6102596102473660046114c4565b60026020526000908152604090205481565b60405190815260200161016d565b6101186102753660046114c4565b610732565b6101186102883660046114e1565b610811565b600054600160a01b900460ff16156102df5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b600033905061038c8130847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663960dc08a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561034357600080fd5b505afa158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b91906115a6565b6001600160a01b0316929190610b32565b806001600160a01b03167ff67017a05194c0853be9169be60cad9fa6e75d34b6b507a7a4261510e19c6d79836040516103c791815260200190565b60405180910390a25050565b600054600160a01b900460ff1661042c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016102d6565b6000546001600160a01b031633146104865760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d6565b61052c33827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663960dc08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e457600080fd5b505afa1580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c91906115a6565b6001600160a01b03169190610bd0565b50565b3360009081526001602052604090205460ff1661058e5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016102d6565b610596610c05565b565b6000546001600160a01b031633146105f25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d6565b61052c81610cab565b61059633610cab565b6000546001600160a01b0316331461065e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d6565b6105966000610d6b565b6000546001600160a01b031633146106c25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d6565b61052c81610dd3565b3360009081526001602052604090205460ff1661072a5760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f742070617573657200000000000000000000000060448201526064016102d6565b610596610e91565b6000546001600160a01b0316331461078c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d6565b6001600160a01b0381166108085760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016102d6565b61052c81610d6b565b600054600160a01b900460ff161561085e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102d6565b600046306040516020016108b492919091825260601b6bffffffffffffffffffffffff191660208201527f5374616b696e6752657761726400000000000000000000000000000000000000603482015260410190565b6040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638a74d5fe828787604051602001610910939291906115c3565b60405160208183030381529060405285856040518463ffffffff1660e01b815260040161093f9392919061165e565b60206040518083038186803b15801561095757600080fd5b505afa15801561096b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098f919061170d565b5060006109d186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f1992505050565b60208082015182516001600160a01b0316600090815260029092526040822054929350916109ff9083611745565b905060008111610a515760405162461bcd60e51b815260206004820152600d60248201527f4e6f206e6577207265776172640000000000000000000000000000000000000060448201526064016102d6565b816002600085600001516001600160a01b03166001600160a01b0316815260200190815260200160002081905550610ae18360000151827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663960dc08a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104e457600080fd5b82600001516001600160a01b03167f6dd401e61ba732582a5eba3d54ccc3afb3609cd3ac1a166d1d36f75fc0aedcda82604051610b2091815260200190565b60405180910390a25050505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610bca9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610fc5565b50505050565b6040516001600160a01b038316602482015260448101829052610c0090849063a9059cbb60e01b90606401610b66565b505050565b600054600160a01b900460ff16610c5e5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016102d6565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b03811660009081526001602052604090205460ff16610d135760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f7420706175736572000000000000000000000060448201526064016102d6565b6001600160a01b038116600081815260016020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e91015b60405180910390a150565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001602052604090205460ff1615610e3c5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064016102d6565b6001600160a01b038116600081815260016020818152604092839020805460ff191690921790915590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89101610d60565b600054600160a01b900460ff1615610ede5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102d6565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610c8e3390565b6040805180820182526000808252602080830182905283518085019094528184528301849052909190805b60208301515183511015610fbd57610f5b836110aa565b90925090508160011415610f8a57610f7a610f75846110e4565b6111a1565b6001600160a01b03168452610f44565b8160021415610fae57610fa4610f9f846110e4565b6111b2565b6020850152610f44565b610fb883826111e9565b610f44565b505050919050565b600061101a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661125b9092919063ffffffff16565b805190915015610c005780806020019051810190611038919061170d565b610c005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016102d6565b60008060006110b884611274565b90506110c560088261175c565b92508060071660058111156110dc576110dc61177e565b915050915091565b606060006110f183611274565b905060008184600001516111059190611794565b905083602001515181111561111957600080fd5b8167ffffffffffffffff811115611132576111326117ac565b6040519080825280601f01601f19166020018201604052801561115c576020820181803683370190505b50602080860151865192955091818601919083010160005b8581101561119657818101518382015261118f602082611794565b9050611174565b505050935250919050565b60006111ac826112f6565b92915050565b60006020825111156111c357600080fd5b60208201519050815160206111d89190611745565b6111e39060086117c2565b1c919050565b60008160058111156111fd576111fd61177e565b141561120c57610c0082611274565b60028160058111156112205761122061177e565b141561010057600061123183611274565b905080836000018181516112459190611794565b90525060208301515183511115610c0057600080fd5b606061126a848460008561131e565b90505b9392505050565b602080820151825181019091015160009182805b600a8110156112f05783811a91506112a18160076117c2565b82607f16901b8517945081608016600014156112de576112c2816001611794565b865187906112d1908390611794565b9052509395945050505050565b806112e8816117e1565b915050611288565b50600080fd5b6000815160141461130657600080fd5b50602001516c01000000000000000000000000900490565b6060824710156113965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016102d6565b843b6113e45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d6565b600080866001600160a01b0316858760405161140091906117fc565b60006040518083038185875af1925050503d806000811461143d576040519150601f19603f3d011682016040523d82523d6000602084013e611442565b606091505b509150915061145282828661145d565b979650505050505050565b6060831561146c57508161126d565b82511561147c5782518084602001fd5b8160405162461bcd60e51b81526004016102d69190611818565b6000602082840312156114a857600080fd5b5035919050565b6001600160a01b038116811461052c57600080fd5b6000602082840312156114d657600080fd5b813561126d816114af565b600080600080604085870312156114f757600080fd5b843567ffffffffffffffff8082111561150f57600080fd5b818701915087601f83011261152357600080fd5b81358181111561153257600080fd5b88602082850101111561154457600080fd5b60209283019650945090860135908082111561155f57600080fd5b818701915087601f83011261157357600080fd5b81358181111561158257600080fd5b8860208260051b850101111561159757600080fd5b95989497505060200194505050565b6000602082840312156115b857600080fd5b815161126d816114af565b838152818360208301376000910160200190815292915050565b60005b838110156115f85781810151838201526020016115e0565b83811115610bca5750506000910152565b600081518084526116218160208601602086016115dd565b601f01601f19169290920160200192915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6040815260006116716040830186611609565b602083820381850152818583528183019050818660051b8401018760005b888110156116fe57858303601f190184528135368b9003601e190181126116b557600080fd5b8a01803567ffffffffffffffff8111156116ce57600080fd5b8036038c13156116dd57600080fd5b6116ea8582898501611635565b95870195945050509084019060010161168f565b50909998505050505050505050565b60006020828403121561171f57600080fd5b8151801515811461126d57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156117575761175761172f565b500390565b60008261177957634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b600082198211156117a7576117a761172f565b500190565b634e487b7160e01b600052604160045260246000fd5b60008160001904831182151516156117dc576117dc61172f565b500290565b60006000198214156117f5576117f561172f565b5060010190565b6000825161180e8184602087016115dd565b9190910192915050565b60208152600061126d602083018461160956fea26469706673582212204a8805544631df454560b2e1d38c1ec2da23cc6771d0bc71288c7c6c9ea4c5b364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimReward(bytes,bytes[])": {
        "details": "Here we use cumulative reward to make claim process idempotent",
        "params": {
          "_rewardRequest": "reward request bytes coded in protobuf",
          "_sigs": "list of validator signatures"
        }
      },
      "contributeToRewardPool(uint256)": {
        "params": {
          "_amount": "the amount of CELR token to contribute"
        }
      },
      "drainToken(uint256)": {
        "details": "emergency use only",
        "params": {
          "_amount": "drained CELR token amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimReward(bytes,bytes[])": {
        "notice": "Claim reward"
      },
      "contributeToRewardPool(uint256)": {
        "notice": "Contribute CELR tokens to the reward pool"
      },
      "drainToken(uint256)": {
        "notice": "Owner drains CELR tokens when the contract is paused"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StakingReward.sol:StakingReward",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 121,
        "contract": "contracts/StakingReward.sol:StakingReward",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12142,
        "contract": "contracts/StakingReward.sol:StakingReward",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7383,
        "contract": "contracts/StakingReward.sol:StakingReward",
        "label": "claimedRewardAmounts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}