{
  "address": "0x4F55446C580E776d57b7bBDE3d2c300587e62A96",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AdminBadRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerBadRole",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_senderAdapters",
          "type": "address[]"
        }
      ],
      "name": "addSenderAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeSender",
      "outputs": [
        {
          "internalType": "contract MultiBridgeSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drainNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_multiBridgeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "remoteCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_senderAdapters",
          "type": "address[]"
        }
      ],
      "name": "removeSenderAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MultiBridgeSender",
          "name": "_bridgeSender",
          "type": "address"
        }
      ],
      "name": "setMultiBridgeSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e9dfb78f3fb10fe126b1f85dca35f1760a2edf0cf17783e5c579eb605531111",
  "receipt": {
    "to": null,
    "from": "0xFf370251BDbe480b1164C383Df99B9EbD3FA12C3",
    "contractAddress": "0x4F55446C580E776d57b7bBDE3d2c300587e62A96",
    "transactionIndex": 38,
    "gasUsed": "914777",
    "logsBloom": "0x
    "blockHash": "0xf3b0eb40352cd20c0aaebaf6bdcca312833189b99bcb9585f636798aca4899a9",
    "transactionHash": "0x0e9dfb78f3fb10fe126b1f85dca35f1760a2edf0cf17783e5c579eb605531111",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 8501449,
        "transactionHash": "0x0e9dfb78f3fb10fe126b1f85dca35f1760a2edf0cf17783e5c579eb605531111",
        "address": "0x4F55446C580E776d57b7bBDE3d2c300587e62A96",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ff370251bdbe480b1164c383df99b9ebd3fa12c3",
          "0x000000000000000000000000ff370251bdbe480b1164c383df99b9ebd3fa12c3"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0xf3b0eb40352cd20c0aaebaf6bdcca312833189b99bcb9585f636798aca4899a9"
      }
    ],
    "blockNumber": 8501449,
    "cumulativeGasUsed": "6860581",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f0ff772b27e18f703fe2c68e46ad4021",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AdminBadRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerBadRole\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_senderAdapters\",\"type\":\"address[]\"}],\"name\":\"addSenderAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeSender\",\"outputs\":[{\"internalType\":\"contract MultiBridgeSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_multiBridgeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"remoteCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_senderAdapters\",\"type\":\"address[]\"}],\"name\":\"removeSenderAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MultiBridgeSender\",\"name\":\"_bridgeSender\",\"type\":\"address\"}],\"name\":\"setMultiBridgeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/message/apps/multibridge/mock/MockCaller.sol\":\"MockCaller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/message/apps/multibridge/MessageStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nlibrary MessageStruct {\\r\\n    /**\\r\\n     * @dev Message indicates a remote call to target contract on destination chain.\\r\\n     *\\r\\n     * @param srcChainId is the id of chain where this message is sent from.\\r\\n     * @param dstChainId is the id of chain where this message is sent to.\\r\\n     * @param nonce is an incrementing number held by MultiBridgeSender to ensure msgId uniqueness\\r\\n     * @param target is the contract to be called on dst chain.\\r\\n     * @param callData is the data to be sent to target by low-level call(eg. address(target).call(callData)).\\r\\n     * @param bridgeName is the message bridge name used for sending this message.\\r\\n     */\\r\\n    struct Message {\\r\\n        uint64 srcChainId;\\r\\n        uint64 dstChainId;\\r\\n        uint32 nonce;\\r\\n        address target;\\r\\n        bytes callData;\\r\\n        string bridgeName;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6d9ea95bc7ab487a1a0bc845a9efcb9410c7ea9688a418fd2b7e2005141b696\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/MultiBridgeSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"./interfaces/IBridgeSenderAdapter.sol\\\";\\r\\nimport \\\"./interfaces/IMultiBridgeReceiver.sol\\\";\\r\\nimport \\\"./MessageStruct.sol\\\";\\r\\n\\r\\ncontract MultiBridgeSender {\\r\\n    // List of bridge sender adapters\\r\\n    address[] public senderAdapters;\\r\\n    // The dApp contract that can use this multi-bridge sender for cross-chain remoteCall.\\r\\n    // This means the current MultiBridgeSender is only intended to be used by a single dApp.\\r\\n    address public immutable caller;\\r\\n    uint32 public nonce;\\r\\n\\r\\n    event MultiBridgeMsgSent(uint32 nonce, uint64 dstChainId, address target, bytes callData, address[] senderAdapters);\\r\\n    event SenderAdapterUpdated(address senderAdapter, bool add); // add being false indicates removal of the adapter\\r\\n    event ErrorSendMessage(address senderAdapters, MessageStruct.Message message);\\r\\n\\r\\n    modifier onlyCaller() {\\r\\n        require(msg.sender == caller, \\\"not caller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _caller) {\\r\\n        caller = _caller;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Call a remote function on a destination chain by sending multiple copies of a cross-chain message\\r\\n     * via all available bridges.\\r\\n     *\\r\\n     * A fee in native token may be required by each message bridge to send messages. Any native token fee remained\\r\\n     * will be refunded back to msg.sender, which requires caller being able to receive native token.\\r\\n     * Caller can use estimateTotalMessageFee() to get total message fees before calling this function.\\r\\n     *\\r\\n     * @param _dstChainId is the destination chainId.\\r\\n     * @param _multiBridgeReceiver is the MultiBridgeReceiver address on destination chain.\\r\\n     * @param _target is the contract address on the destination chain.\\r\\n     * @param _callData is the data to be sent to _target by low-level call(eg. address(_target).call(_callData)).\\r\\n     */\\r\\n    function remoteCall(\\r\\n        uint64 _dstChainId,\\r\\n        address _multiBridgeReceiver,\\r\\n        address _target,\\r\\n        bytes calldata _callData\\r\\n    ) external payable onlyCaller {\\r\\n        MessageStruct.Message memory message = MessageStruct.Message(\\r\\n            uint64(block.chainid),\\r\\n            _dstChainId,\\r\\n            nonce,\\r\\n            _target,\\r\\n            _callData,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        bytes memory data;\\r\\n        uint256 totalFee;\\r\\n        // send copies of the message through multiple bridges\\r\\n        for (uint256 i = 0; i < senderAdapters.length; i++) {\\r\\n            message.bridgeName = IBridgeSenderAdapter(senderAdapters[i]).name();\\r\\n            data = abi.encodeWithSelector(IMultiBridgeReceiver.receiveMessage.selector, message);\\r\\n            uint256 fee = IBridgeSenderAdapter(senderAdapters[i]).getMessageFee(\\r\\n                uint256(_dstChainId),\\r\\n                _multiBridgeReceiver,\\r\\n                data\\r\\n            );\\r\\n            // if one bridge is paused it shouldn't halt the process\\r\\n            try\\r\\n                IBridgeSenderAdapter(senderAdapters[i]).dispatchMessage{value: fee}(\\r\\n                    uint256(_dstChainId),\\r\\n                    _multiBridgeReceiver,\\r\\n                    data\\r\\n                )\\r\\n            {\\r\\n                totalFee += fee;\\r\\n            } catch {\\r\\n                emit ErrorSendMessage(senderAdapters[i], message);\\r\\n            }\\r\\n        }\\r\\n        emit MultiBridgeMsgSent(nonce, _dstChainId, _target, _callData, senderAdapters);\\r\\n        nonce++;\\r\\n        // refund remaining native token to msg.sender\\r\\n        if (totalFee < msg.value) {\\r\\n            payable(msg.sender).transfer(msg.value - totalFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add bridge sender adapters\\r\\n     */\\r\\n    function addSenderAdapters(address[] calldata _senderAdapters) external onlyCaller {\\r\\n        for (uint256 i = 0; i < _senderAdapters.length; i++) {\\r\\n            _addSenderAdapter(_senderAdapters[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove bridge sender adapters\\r\\n     */\\r\\n    function removeSenderAdapters(address[] calldata _senderAdapters) external onlyCaller {\\r\\n        for (uint256 i = 0; i < _senderAdapters.length; i++) {\\r\\n            _removeSenderAdapter(_senderAdapters[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A helper function for estimating total required message fee by all available message bridges.\\r\\n     */\\r\\n    function estimateTotalMessageFee(\\r\\n        uint64 _dstChainId,\\r\\n        address _multiBridgeReceiver,\\r\\n        address _target,\\r\\n        bytes calldata _callData\\r\\n    ) public view returns (uint256) {\\r\\n        MessageStruct.Message memory message = MessageStruct.Message(\\r\\n            uint64(block.chainid),\\r\\n            _dstChainId,\\r\\n            nonce,\\r\\n            _target,\\r\\n            _callData,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        bytes memory data;\\r\\n        uint256 totalFee;\\r\\n        for (uint256 i = 0; i < senderAdapters.length; i++) {\\r\\n            message.bridgeName = IBridgeSenderAdapter(senderAdapters[i]).name();\\r\\n            data = abi.encodeWithSelector(IMultiBridgeReceiver.receiveMessage.selector, message);\\r\\n            uint256 fee = IBridgeSenderAdapter(senderAdapters[i]).getMessageFee(\\r\\n                uint256(_dstChainId),\\r\\n                _multiBridgeReceiver,\\r\\n                data\\r\\n            );\\r\\n            totalFee += fee;\\r\\n        }\\r\\n        return totalFee;\\r\\n    }\\r\\n\\r\\n    function _addSenderAdapter(address _senderAdapter) private {\\r\\n        for (uint256 i = 0; i < senderAdapters.length; i++) {\\r\\n            if (senderAdapters[i] == _senderAdapter) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        senderAdapters.push(_senderAdapter);\\r\\n        emit SenderAdapterUpdated(_senderAdapter, true);\\r\\n    }\\r\\n\\r\\n    function _removeSenderAdapter(address _senderAdapter) private {\\r\\n        uint256 lastIndex = senderAdapters.length - 1;\\r\\n        for (uint256 i = 0; i < senderAdapters.length; i++) {\\r\\n            if (senderAdapters[i] == _senderAdapter) {\\r\\n                if (i < lastIndex) {\\r\\n                    senderAdapters[i] = senderAdapters[lastIndex];\\r\\n                }\\r\\n                senderAdapters.pop();\\r\\n                emit SenderAdapterUpdated(_senderAdapter, false);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb142a864c7decd8576734d2e971055ef0e1f0ca2551b98850d3ffc16fc33564e\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/EIP5164/MessageDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev The MessageDispatcher lives on the origin chain and dispatches messages to the MessageExecutor for execution.\\r\\n * More about MessageDispatcher of EIP5164, see https://eips.ethereum.org/EIPS/eip-5164#messagedispatcher.\\r\\n */\\r\\ninterface MessageDispatcher {\\r\\n    /**\\r\\n     * @dev The MessageDispatched event MUST be emitted by the MessageDispatcher when an individual message is dispatched.\\r\\n     */\\r\\n    event MessageDispatched(\\r\\n        bytes32 indexed messageId,\\r\\n        address indexed from,\\r\\n        uint256 indexed toChainId,\\r\\n        address to,\\r\\n        bytes data\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x251076e11f98a786d888588736ce1bf70eae2d8fcd9ab14208fe828d13c4d270\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/EIP5164/SingleMessageDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"./MessageDispatcher.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev The SingleMessageDispatcher is an extension of MessageDispatcher that defines a method, dispatchMessage,\\r\\n * for dispatching an individual message to be executed on the toChainId.\\r\\n * More about SingleMessageDispatcher of EIP5164, see https://eips.ethereum.org/EIPS/eip-5164#singlemessagedispatcher.\\r\\n */\\r\\ninterface SingleMessageDispatcher is MessageDispatcher {\\r\\n    /**\\r\\n     * @dev A method for dispatching an individual message to be executed on the toChainId.\\r\\n     */\\r\\n    function dispatchMessage(\\r\\n        uint256 toChainId,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (bytes32 messageId);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3ca3480d156095cff1fd4635bae37e3aa6bb380c244f8b91d4086bd25888613\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/IBridgeSenderAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"../MessageStruct.sol\\\";\\r\\nimport \\\"./EIP5164/SingleMessageDispatcher.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Adapter that connects MultiBridgeSender and each message bridge.\\r\\n * Message bridge can implement their favourite encode&decode way for MessageStruct.Message.\\r\\n */\\r\\ninterface IBridgeSenderAdapter is SingleMessageDispatcher {\\r\\n    /**\\r\\n     * @dev Return name of this message bridge.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Return native token amount in wei required by this message bridge for sending a message.\\r\\n     */\\r\\n    function getMessageFee(\\r\\n        uint256 toChainId,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    //    /**\\r\\n    //     * @dev Send a MessageStruct.Message through this message bridge.\\r\\n    //     */\\r\\n    //    function sendMessage(MessageStruct.Message memory _message) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Owner update receiver adapter address on dst chain.\\r\\n     */\\r\\n    function updateReceiverAdapter(uint256[] calldata _dstChainIds, address[] calldata _receiverAdapters) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Owner setup MultiBridgeSender.\\r\\n     */\\r\\n    function setMultiBridgeSender(address _multiBridgeSender) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbf8af9be8f2ef1bd2d303e1940dc82e5441337bf498ec3f7a4fc0c5f17062183\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/IMultiBridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../MessageStruct.sol\\\";\\r\\n\\r\\ninterface IMultiBridgeReceiver {\\r\\n    /**\\r\\n     * @notice Receive messages from allowed bridge receiver adapters.\\r\\n     * If the accumulated power of a message has reached the power threshold,\\r\\n     * this message will be executed immediately, which will invoke an external function call\\r\\n     * according to the message content.\\r\\n     *\\r\\n     * @dev Every receiver adapter should call this function with decoded MessageStruct.Message\\r\\n     * when receiver adapter receives a message produced by a corresponding sender adapter on the source chain.\\r\\n     */\\r\\n    function receiveMessage(MessageStruct.Message calldata _message) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7f734828a6b013c06df48d85a83fae5b66a86d94fb59fb68c3af98c14d49cf17\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/mock/MockCaller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"../MessageStruct.sol\\\";\\r\\nimport \\\"../MultiBridgeSender.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\ncontract MockCaller is AccessControl {\\r\\n    bytes32 public constant CALLER_ROLE = keccak256(\\\"CALLER\\\");\\r\\n    MultiBridgeSender public bridgeSender;\\r\\n\\r\\n    error AdminBadRole();\\r\\n    error CallerBadRole();\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        if (!hasRole(DEFAULT_ADMIN_ROLE, msg.sender)) revert AdminBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCaller() {\\r\\n        if (!hasRole(CALLER_ROLE, msg.sender)) revert CallerBadRole();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n    }\\r\\n\\r\\n    function setMultiBridgeSender(MultiBridgeSender _bridgeSender) external onlyAdmin {\\r\\n        bridgeSender = _bridgeSender;\\r\\n    }\\r\\n\\r\\n    function remoteCall(\\r\\n        uint64 _dstChainId,\\r\\n        address _multiBridgeReceiver,\\r\\n        address _target,\\r\\n        bytes calldata _callData\\r\\n    ) external payable onlyCaller {\\r\\n        uint256 totalFee = bridgeSender.estimateTotalMessageFee(_dstChainId, _multiBridgeReceiver, _target, _callData);\\r\\n        bridgeSender.remoteCall{value: totalFee}(_dstChainId, _multiBridgeReceiver, _target, _callData);\\r\\n    }\\r\\n\\r\\n    function addSenderAdapters(address[] calldata _senderAdapters) external onlyAdmin {\\r\\n        bridgeSender.addSenderAdapters(_senderAdapters);\\r\\n    }\\r\\n\\r\\n    function removeSenderAdapters(address[] calldata _senderAdapters) external onlyAdmin {\\r\\n        bridgeSender.removeSenderAdapters(_senderAdapters);\\r\\n    }\\r\\n\\r\\n    function drainNativeToken() external onlyAdmin {\\r\\n        uint256 balance = address(this).balance;\\r\\n        if (balance > 0) {\\r\\n            payable(msg.sender).transfer(balance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xc62a6c315ad1558383236df869e8fe469454d53bfc20767e4aeaea3518dd247f\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c8063a217fddf1161007f578063cd38868511610059578063cd3886851461029c578063d547741f146102bc578063e016caa5146102dc578063fa76cce5146102ef57600080fd5b8063a217fddf14610252578063b222117814610267578063cbf61e2b1461028757600080fd5b806336568abe116100bb57806336568abe14610182578063774237fc146101a25780638bd43d98146101d657806391d148541461020e57600080fd5b806301ffc9a7146100ed578063248a9ca3146101225780632f2ff15d1461016057600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610af8565b61030f565b60405190151581526020015b60405180910390f35b34801561012e57600080fd5b5061015261013d366004610b22565b60009081526020819052604090206001015490565b604051908152602001610119565b34801561016c57600080fd5b5061018061017b366004610b50565b610346565b005b34801561018e57600080fd5b5061018061019d366004610b50565b610371565b3480156101ae57600080fd5b506101527f69fb73f918fab3af495c0a457de635771a39f3d6cfedc797ae0b5bb56c83c6f781565b3480156101e257600080fd5b506001546101f6906001600160a01b031681565b6040516001600160a01b039091168152602001610119565b34801561021a57600080fd5b5061010d610229366004610b50565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561025e57600080fd5b50610152600081565b34801561027357600080fd5b50610180610282366004610b80565b610402565b34801561029357600080fd5b506101806104b9565b3480156102a857600080fd5b506101806102b7366004610b80565b61053f565b3480156102c857600080fd5b506101806102d7366004610b50565b6105c0565b6101806102ea366004610bf5565b6105e6565b3480156102fb57600080fd5b5061018061030a366004610ca8565b610724565b60006001600160e01b03198216637965db0b60e01b148061034057506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461036281336107ad565b61036c838361082b565b505050565b6001600160a01b03811633146103f45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6103fe82826108c9565b5050565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff1661045157604051636f4720fd60e11b815260040160405180910390fd5b600154604051631644422f60e31b81526001600160a01b039091169063b2221178906104839085908590600401610cc5565b600060405180830381600087803b15801561049d57600080fd5b505af11580156104b1573d6000803e3d6000fd5b505050505050565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff1661050857604051636f4720fd60e11b815260040160405180910390fd5b47801561053c57604051339082156108fc029083906000818181858888f193505050501580156103fe573d6000803e3d6000fd5b50565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff1661058e57604051636f4720fd60e11b815260040160405180910390fd5b60015460405163cd38868560e01b81526001600160a01b039091169063cd388685906104839085908590600401610cc5565b6000828152602081905260409020600101546105dc81336107ad565b61036c83836108c9565b3360009081527fce550891d8fbd07b3740664744f0575ce8e499e096270da08af978e7985fbe38602052604090205460ff16610635576040516378d62e2f60e01b815260040160405180910390fd5b60015460405163e113782f60e01b81526000916001600160a01b03169063e113782f9061066e9089908990899089908990600401610d13565b602060405180830381865afa15801561068b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106af9190610d71565b60015460405163e016caa560e01b81529192506001600160a01b03169063e016caa59083906106ea908a908a908a908a908a90600401610d13565b6000604051808303818588803b15801561070357600080fd5b505af1158015610717573d6000803e3d6000fd5b5050505050505050505050565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604090205460ff1661077357604051636f4720fd60e11b815260040160405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103fe576107e9816001600160a01b03166014610948565b6107f4836020610948565b604051602001610805929190610dae565b60408051601f198184030181529082905262461bcd60e51b82526103eb91600401610e2f565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166103fe576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556108853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156103fe576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60606000610957836002610e78565b610962906002610e8f565b67ffffffffffffffff81111561097a5761097a610ea2565b6040519080825280601f01601f1916602001820160405280156109a4576020820181803683370190505b509050600360fc1b816000815181106109bf576109bf610eb8565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106109ee576109ee610eb8565b60200101906001600160f81b031916908160001a9053506000610a12846002610e78565b610a1d906001610e8f565b90505b6001811115610aa2577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110610a5e57610a5e610eb8565b1a60f81b828281518110610a7457610a74610eb8565b60200101906001600160f81b031916908160001a90535060049490941c93610a9b81610ece565b9050610a20565b508315610af15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016103eb565b9392505050565b600060208284031215610b0a57600080fd5b81356001600160e01b031981168114610af157600080fd5b600060208284031215610b3457600080fd5b5035919050565b6001600160a01b038116811461053c57600080fd5b60008060408385031215610b6357600080fd5b823591506020830135610b7581610b3b565b809150509250929050565b60008060208385031215610b9357600080fd5b823567ffffffffffffffff80821115610bab57600080fd5b818501915085601f830112610bbf57600080fd5b813581811115610bce57600080fd5b8660208260051b8501011115610be357600080fd5b60209290920196919550909350505050565b600080600080600060808688031215610c0d57600080fd5b853567ffffffffffffffff8082168214610c2657600080fd5b909550602087013590610c3882610b3b565b909450604087013590610c4a82610b3b565b90935060608701359080821115610c6057600080fd5b818801915088601f830112610c7457600080fd5b813581811115610c8357600080fd5b896020828501011115610c9557600080fd5b9699959850939650602001949392505050565b600060208284031215610cba57600080fd5b8135610af181610b3b565b60208082528181018390526000908460408401835b86811015610d08578235610ced81610b3b565b6001600160a01b031682529183019190830190600101610cda565b509695505050505050565b67ffffffffffffffff8616815260006001600160a01b03808716602084015280861660408401525060806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b600060208284031215610d8357600080fd5b5051919050565b60005b83811015610da5578181015183820152602001610d8d565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610de6816017850160208801610d8a565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351610e23816028840160208801610d8a565b01602801949350505050565b6020815260008251806020840152610e4e816040850160208701610d8a565b601f01601f19169190910160400192915050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761034057610340610e62565b8082018082111561034057610340610e62565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081610edd57610edd610e62565b50600019019056fea2646970667358221220b49e1e52b902ead7975802a218cf6f294ae70f86fc175e3c5f913bb42b3873dc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/message/apps/multibridge/mock/MockCaller.sol:MockCaller",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 23125,
        "contract": "contracts/message/apps/multibridge/mock/MockCaller.sol:MockCaller",
        "label": "bridgeSender",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(MultiBridgeSender)19999"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(MultiBridgeSender)19999": {
        "encoding": "inplace",
        "label": "contract MultiBridgeSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/message/apps/multibridge/mock/MockCaller.sol:MockCaller",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/message/apps/multibridge/mock/MockCaller.sol:MockCaller",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}