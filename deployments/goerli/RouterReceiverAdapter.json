{
  "address": "0xe134059918851f5Ffcbf29ED71ea942D0A4f2995",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_routerGateway",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "messageIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "MessageBatchFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "errorData",
          "type": "bytes"
        }
      ],
      "name": "MessageFailure",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "name": "MessageIdAlreadyExecuted",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "name": "MessageIdExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "executedMessages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "srcContractAddress",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "srcChainId",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "handleRequestFromSource",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerGateway",
      "outputs": [
        {
          "internalType": "contract IRouterGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "senderAdapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_srcChainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_senderAdapters",
          "type": "address[]"
        }
      ],
      "name": "updateSenderAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b631dbeedba86c5a00c7c63339d0e41710ac54f6b7786518014ed761429deae",
  "receipt": {
    "to": null,
    "from": "0xFf370251BDbe480b1164C383Df99B9EbD3FA12C3",
    "contractAddress": "0xe134059918851f5Ffcbf29ED71ea942D0A4f2995",
    "transactionIndex": 61,
    "gasUsed": "965671",
    "logsBloom": "0x
    "blockHash": "0x9ecf5756a034d88020b7132908ca955ab12d9bfe7ddc6890686f53e0c1b1056e",
    "transactionHash": "0x7b631dbeedba86c5a00c7c63339d0e41710ac54f6b7786518014ed761429deae",
    "logs": [
      {
        "transactionIndex": 61,
        "blockNumber": 8501572,
        "transactionHash": "0x7b631dbeedba86c5a00c7c63339d0e41710ac54f6b7786518014ed761429deae",
        "address": "0xe134059918851f5Ffcbf29ED71ea942D0A4f2995",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ff370251bdbe480b1164c383df99b9ebd3fa12c3"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x9ecf5756a034d88020b7132908ca955ab12d9bfe7ddc6890686f53e0c1b1056e"
      }
    ],
    "blockNumber": 8501572,
    "cumulativeGasUsed": "16698449",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x12C9A8B2e3Db12ddC411a64D6a75f47E6642f026"
  ],
  "numDeployments": 1,
  "solcInputHash": "46132a29aa96b93c49969ec147396cf5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerGateway\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"messageIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"MessageBatchFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"errorData\",\"type\":\"bytes\"}],\"name\":\"MessageFailure\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageIdAlreadyExecuted\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"MessageIdExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executedMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"srcContractAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"srcChainId\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"handleRequestFromSource\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerGateway\",\"outputs\":[{\"internalType\":\"contract IRouterGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"senderAdapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_srcChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_senderAdapters\",\"type\":\"address[]\"}],\"name\":\"updateSenderAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"MessageBatchFailure(bytes32,uint256,bytes)\":[{\"details\":\"MessageExecutor MUST revert the entire batch if any message in a batch fails and SHOULD emit a MessageBatchFailure custom error.\"}],\"MessageFailure(bytes32,bytes)\":[{\"details\":\"MessageExecutor MUST revert if an individual message fails and SHOULD emit a MessageFailure custom error.\"}],\"MessageIdAlreadyExecuted(bytes32)\":[{\"details\":\"MessageExecutor MUST revert if a messageId has already been executed and SHOULD emit a MessageIdAlreadyExecuted custom error.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateSenderAdapter(uint256[],address[])\":{\"details\":\"Owner update sender adapter address on src chain.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/message/apps/multibridge/adapters/router/RouterReceiverAdapter.sol\":\"RouterReceiverAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/message/apps/multibridge/MessageStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nlibrary MessageStruct {\\r\\n    /**\\r\\n     * @dev Message indicates a remote call to target contract on destination chain.\\r\\n     *\\r\\n     * @param srcChainId is the id of chain where this message is sent from.\\r\\n     * @param dstChainId is the id of chain where this message is sent to.\\r\\n     * @param nonce is an incrementing number held by MultiBridgeSender to ensure msgId uniqueness\\r\\n     * @param target is the contract to be called on dst chain.\\r\\n     * @param callData is the data to be sent to target by low-level call(eg. address(target).call(callData)).\\r\\n     * @param bridgeName is the message bridge name used for sending this message.\\r\\n     */\\r\\n    struct Message {\\r\\n        uint64 srcChainId;\\r\\n        uint64 dstChainId;\\r\\n        uint32 nonce;\\r\\n        address target;\\r\\n        bytes callData;\\r\\n        string bridgeName;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6d9ea95bc7ab487a1a0bc845a9efcb9410c7ea9688a418fd2b7e2005141b696\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/adapters/router/RouterReceiverAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../../interfaces/IMultiBridgeReceiver.sol\\\";\\r\\nimport \\\"../../interfaces/IBridgeReceiverAdapter.sol\\\";\\r\\nimport \\\"./interfaces/IRouterGateway.sol\\\";\\r\\nimport \\\"./interfaces/IRouterReceiver.sol\\\";\\r\\nimport \\\"./libraries/StringToUint.sol\\\";\\r\\n\\r\\ncontract RouterReceiverAdapter is Pausable, Ownable, IRouterReceiver, IBridgeReceiverAdapter {\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    mapping(uint256 => address) public senderAdapters;\\r\\n    IRouterGateway public immutable routerGateway;\\r\\n    mapping(bytes32 => bool) public executedMessages;\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyRouterGateway() {\\r\\n        require(msg.sender == address(routerGateway), \\\"caller is not router gateway\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== CONSTRUCTOR  ========== */\\r\\n\\r\\n    constructor(address _routerGateway) {\\r\\n        routerGateway = IRouterGateway(_routerGateway);\\r\\n    }\\r\\n\\r\\n    /* ========== EXTERNAL METHODS ========== */\\r\\n\\r\\n    // Called by the Router Gateway on destination chain to receive cross-chain messages.\\r\\n    // srcContractAddress is the address of contract on the source chain where the request was intiated\\r\\n    // The payload is abi.encode of (MessageStruct.Message).\\r\\n    function handleRequestFromSource(\\r\\n        bytes memory srcContractAddress,\\r\\n        bytes memory payload,\\r\\n        string memory srcChainId,\\r\\n        uint64 //srcChainType\\r\\n    ) external override onlyRouterGateway whenNotPaused returns (bytes memory) {\\r\\n        (address _multiBridgeSender, address _multiBridgeReceiver, bytes memory _data, bytes32 _msgId) = abi.decode(\\r\\n            payload,\\r\\n            (address, address, bytes, bytes32)\\r\\n        );\\r\\n\\r\\n        uint256 _sourceChainId = StringToUint.st2num(srcChainId);\\r\\n\\r\\n        require(toAddress(srcContractAddress) == senderAdapters[_sourceChainId], \\\"not allowed message sender\\\");\\r\\n\\r\\n        if (executedMessages[_msgId]) {\\r\\n            revert MessageIdAlreadyExecuted(_msgId);\\r\\n        } else {\\r\\n            executedMessages[_msgId] = true;\\r\\n        }\\r\\n\\r\\n        (bool ok, bytes memory lowLevelData) = _multiBridgeReceiver.call(\\r\\n            abi.encodePacked(_data, _msgId, _sourceChainId, _multiBridgeSender)\\r\\n        );\\r\\n\\r\\n        if (!ok) {\\r\\n            revert MessageFailure(_msgId, lowLevelData);\\r\\n        } else {\\r\\n            emit MessageIdExecuted(_sourceChainId, _msgId);\\r\\n        }\\r\\n\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /* ========== ADMIN METHODS ========== */\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function updateSenderAdapter(uint256[] calldata _srcChainIds, address[] calldata _senderAdapters)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_srcChainIds.length == _senderAdapters.length, \\\"mismatch length\\\");\\r\\n        for (uint256 i = 0; i < _srcChainIds.length; i++) {\\r\\n            senderAdapters[_srcChainIds[i]] = _senderAdapters[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /* ========== UTILS METHODS ========== */\\r\\n\\r\\n    function toAddress(bytes memory _bytes) internal pure returns (address contractAddress) {\\r\\n        bytes20 srcTokenAddress;\\r\\n        assembly {\\r\\n            srcTokenAddress := mload(add(_bytes, 0x20))\\r\\n        }\\r\\n        contractAddress = address(srcTokenAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4fde1eb206c72fadbc633948b7c6d5af09f92c0d2dbca2b051dea00e718dec87\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/adapters/router/interfaces/IRouterGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary Utils {\\r\\n    struct RequestArgs {\\r\\n        uint64 expTimestamp;\\r\\n        bool isAtomicCalls;\\r\\n        Utils.FeePayer feePayerEnum;\\r\\n    }\\r\\n\\r\\n    enum FeePayer {\\r\\n        APP,\\r\\n        USER,\\r\\n        NONE\\r\\n    }\\r\\n\\r\\n    struct AckGasParams {\\r\\n        uint64 gasLimit;\\r\\n        uint64 gasPrice;\\r\\n    }\\r\\n\\r\\n    struct DestinationChainParams {\\r\\n        uint64 gasLimit;\\r\\n        uint64 gasPrice;\\r\\n        uint64 destChainType;\\r\\n        string destChainId;\\r\\n    }\\r\\n\\r\\n    struct ContractCalls {\\r\\n        bytes[] payloads;\\r\\n        bytes[] destContractAddresses;\\r\\n    }\\r\\n\\r\\n    enum AckType {\\r\\n        NO_ACK,\\r\\n        ACK_ON_SUCCESS,\\r\\n        ACK_ON_ERROR,\\r\\n        ACK_ON_BOTH\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IRouterGateway {\\r\\n    /// @notice Function to send a message to the destination chain\\r\\n    /// @param requestArgs the struct request args containing expiry timestamp, isAtomicCalls and the fee payer.\\r\\n    /// @param ackType type of acknowledgement you want: ACK_ON_SUCCESS, ACK_ON_ERR, ACK_ON_BOTH.\\r\\n    /// @param ackGasParams This includes the gas limit required for the execution of handler function for\\r\\n    /// crosstalk acknowledgement on the source chain and the gas price of the source chain.\\r\\n    /// @param destChainParams dest chain params include the destChainType, destChainId, the gas limit\\r\\n    /// required to execute handler function on the destination chain and the gas price of destination chain.\\r\\n    /// @param contractCalls Array of struct ContractCalls containing the multiple payloads to be sent to multiple\\r\\n    /// contract addresses (in bytes format) on the destination chain.\\r\\n    /// @return Returns the nonce from the gateway contract.\\r\\n    function requestToDest(\\r\\n        Utils.RequestArgs memory requestArgs,\\r\\n        Utils.AckType ackType,\\r\\n        Utils.AckGasParams memory ackGasParams,\\r\\n        Utils.DestinationChainParams memory destChainParams,\\r\\n        Utils.ContractCalls memory contractCalls\\r\\n    ) external payable returns (uint64);\\r\\n\\r\\n    /// @notice Function to fetch the fees for cross-chain message transfer.\\r\\n    /// @return fees\\r\\n    function requestToDestDefaultFee() external view returns (uint256 fees);\\r\\n}\\r\\n\",\"keccak256\":\"0x1b165f13cde5bc1a0467748fb2046337de85b0b0fd90d0ba64ea53aebad66c0c\",\"license\":\"MIT\"},\"contracts/message/apps/multibridge/adapters/router/interfaces/IRouterReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Router Receiver Interface.\\r\\n */\\r\\ninterface IRouterReceiver {\\r\\n    /// @notice Function to handle incoming cross-chain message.\\r\\n    /// @param srcContractAddress address of contract on source chain where the request was initiated.\\r\\n    /// @param payload abi encoded message sent from the source chain.\\r\\n    /// @param srcChainId chainId of the source chain.\\r\\n    /// @param srcChainType chainType of the source chain (0 for EVM).\\r\\n    /// @return return value\\r\\n    function handleRequestFromSource(\\r\\n        bytes memory srcContractAddress,\\r\\n        bytes memory payload,\\r\\n        string memory srcChainId,\\r\\n        uint64 srcChainType\\r\\n    ) external returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xc33c9308642ab9085fbccf23b038025a402fc3a8e6bcf30e7a333aa4f9460084\",\"license\":\"MIT\"},\"contracts/message/apps/multibridge/adapters/router/libraries/StringToUint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary StringToUint {\\r\\n    function st2num(string memory numString) internal pure returns (uint256) {\\r\\n        uint256 val = 0;\\r\\n        bytes memory stringBytes = bytes(numString);\\r\\n        for (uint256 i = 0; i < stringBytes.length; i++) {\\r\\n            uint256 exp = stringBytes.length - i;\\r\\n            bytes1 ival = stringBytes[i];\\r\\n            uint8 uval = uint8(ival);\\r\\n            uint256 jval = uval - uint256(0x30);\\r\\n\\r\\n            val += (uint256(jval) * (10**(exp - 1)));\\r\\n        }\\r\\n        return val;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3de8455227e7cf936aeef13cb940ddf59a175052512bdf644dcc25d7403d7023\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/EIP5164/MessageExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev The MessageExecutor executes dispatched messages and message batches.\\r\\n *\\r\\n * MessageExecutor MUST append the ABI-packed (messageId, fromChainId, from) to the calldata for each message\\r\\n * being executed. This allows the receiver of the message to verify the cross-chain sender and the chain that\\r\\n * the message is coming from.\\r\\n * ```\\r\\n * to.call(abi.encodePacked(data, messageId, fromChainId, from));\\r\\n * ```\\r\\n *\\r\\n * More about MessageExecutor of EIP5164, see https://eips.ethereum.org/EIPS/eip-5164#messageexecutor.\\r\\n */\\r\\ninterface MessageExecutor {\\r\\n    /**\\r\\n     * @dev MessageExecutor MUST revert if a messageId has already been executed and SHOULD emit a\\r\\n     * MessageIdAlreadyExecuted custom error.\\r\\n     */\\r\\n    error MessageIdAlreadyExecuted(bytes32 messageId);\\r\\n\\r\\n    /**\\r\\n     * @dev MessageExecutor MUST revert if an individual message fails and SHOULD emit a MessageFailure custom error.\\r\\n     */\\r\\n    error MessageFailure(bytes32 messageId, bytes errorData);\\r\\n\\r\\n    /**\\r\\n     * @dev MessageExecutor MUST revert the entire batch if any message in a batch fails and SHOULD emit a\\r\\n     * MessageBatchFailure custom error.\\r\\n     */\\r\\n    error MessageBatchFailure(bytes32 messageId, uint256 messageIndex, bytes errorData);\\r\\n\\r\\n    /**\\r\\n     * @dev MessageIdExecuted MUST be emitted once a message or message batch has been executed.\\r\\n     */\\r\\n    event MessageIdExecuted(uint256 indexed fromChainId, bytes32 indexed messageId);\\r\\n}\\r\\n\",\"keccak256\":\"0x960a52b91fe48aa6727aed9bbe8854dde9b6f4918f5256b36791f1b65e0d5d08\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/IBridgeReceiverAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"./EIP5164/MessageExecutor.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Adapter that connects MultiBridgeReceiver and each message bridge.\\r\\n */\\r\\ninterface IBridgeReceiverAdapter is MessageExecutor {\\r\\n    /**\\r\\n     * @dev Owner update sender adapter address on src chain.\\r\\n     */\\r\\n    function updateSenderAdapter(uint256[] calldata _srcChainIds, address[] calldata _senderAdapters) external;\\r\\n\\r\\n    //    /**\\r\\n    //     * @dev Owner setup MultiBridgeReceiver.\\r\\n    //     */\\r\\n    //    function setMultiBridgeReceiver(address _multiBridgeReceiver) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd39c8a94e31499117212cbec67fd81806b63b4c2ef98e3692480d291317113ec\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/IMultiBridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../MessageStruct.sol\\\";\\r\\n\\r\\ninterface IMultiBridgeReceiver {\\r\\n    /**\\r\\n     * @notice Receive messages from allowed bridge receiver adapters.\\r\\n     * If the accumulated power of a message has reached the power threshold,\\r\\n     * this message will be executed immediately, which will invoke an external function call\\r\\n     * according to the message content.\\r\\n     *\\r\\n     * @dev Every receiver adapter should call this function with decoded MessageStruct.Message\\r\\n     * when receiver adapter receives a message produced by a corresponding sender adapter on the source chain.\\r\\n     */\\r\\n    function receiveMessage(MessageStruct.Message calldata _message) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7f734828a6b013c06df48d85a83fae5b66a86d94fb59fb68c3af98c14d49cf17\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063cd2abd661161005b578063cd2abd6614610188578063d2776627146101ab578063f2fde38b146101d457600080fd5b80638da5cb5b1461011757806396732ea214610141578063c8e1eaca1461016857600080fd5b80635c975abb116100b25780635c975abb146100eb578063715018a6146101075780638456cb591461010f57600080fd5b80633f4ba83a146100ce57806343d61f31146100d8575b600080fd5b6100d66101e7565b005b6100d66100e6366004610a93565b610256565b60005460ff165b60405190151581526020015b60405180910390f35b6100d66103a0565b6100d661040a565b60005461010090046001600160a01b03165b6040516001600160a01b0390911681526020016100fe565b6101297f000000000000000000000000000000000000000000000000000000000000000081565b61017b610176366004610bd3565b610472565b6040516100fe9190610cdb565b6100f2610196366004610cee565b60026020526000908152604090205460ff1681565b6101296101b9366004610cee565b6001602052600090815260409020546001600160a01b031681565b6100d66101e2366004610d1c565b61071c565b6000546001600160a01b0361010090910416331461024c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b610254610804565b565b6000546001600160a01b036101009091041633146102b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610243565b8281146103055760405162461bcd60e51b815260206004820152600f60248201527f6d69736d61746368206c656e67746800000000000000000000000000000000006044820152606401610243565b60005b838110156103995782828281811061032257610322610d39565b90506020020160208101906103379190610d1c565b6001600087878581811061034d5761034d610d39565b90506020020135815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808061039190610d65565b915050610308565b5050505050565b6000546001600160a01b036101009091041633146104005760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610243565b61025460006108a0565b6000546001600160a01b0361010090910416331461046a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610243565b610254610910565b6060336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104ec5760405162461bcd60e51b815260206004820152601c60248201527f63616c6c6572206973206e6f7420726f757465722067617465776179000000006044820152606401610243565b60005460ff16156105325760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610243565b6000806000808780602001905181019061054c9190610d7e565b9350935093509350600061055f8861098b565b6000818152600160205260409020549091506001600160a01b03166105888b6020015160601c90565b6001600160a01b0316146105de5760405162461bcd60e51b815260206004820152601a60248201527f6e6f7420616c6c6f776564206d6573736167652073656e6465720000000000006044820152606401610243565b60008281526002602052604090205460ff16156106115760405163153bf81360e31b815260048101839052602401610243565b6000828152600260205260409020805460ff19166001179055600080856001600160a01b03168585858a60405160200161064e9493929190610e24565b60408051601f198184030181529082905261066891610e65565b6000604051808303816000865af19150503d80600081146106a5576040519150601f19603f3d011682016040523d82523d6000602084013e6106aa565b606091505b5091509150816106d1578381604051632f9c844f60e21b8152600401610243929190610e81565b604051849084907e769f3f82cb2a521c5b72f211aff687dae3cebd0b4631790417d1b17e15689a90600090a350506040805160208101909152600081529a9950505050505050505050565b6000546001600160a01b0361010090910416331461077c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610243565b6001600160a01b0381166107f85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610243565b610801816108a0565b50565b60005460ff166108565760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610243565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166101008181027fffffffffffffffffffffff0000000000000000000000000000000000000000ff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b60005460ff16156109565760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610243565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586108833390565b60008082815b8151811015610a3e5760008183516109a99190610ea2565b905060008383815181106109bf576109bf610d39565b01602001517fff000000000000000000000000000000000000000000000000000000000000008116915060f81c60006109f9603083610ea2565b9050610a06600185610ea2565b610a1190600a610f9f565b610a1b9082610fab565b610a259088610fc2565b9650505050508080610a3690610d65565b915050610991565b50909392505050565b60008083601f840112610a5957600080fd5b50813567ffffffffffffffff811115610a7157600080fd5b6020830191508360208260051b8501011115610a8c57600080fd5b9250929050565b60008060008060408587031215610aa957600080fd5b843567ffffffffffffffff80821115610ac157600080fd5b610acd88838901610a47565b90965094506020870135915080821115610ae657600080fd5b50610af387828801610a47565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610b3e57610b3e610aff565b604052919050565b600067ffffffffffffffff821115610b6057610b60610aff565b50601f01601f191660200190565b6000610b81610b7c84610b46565b610b15565b9050828152838383011115610b9557600080fd5b828260208301376000602084830101529392505050565b600082601f830112610bbd57600080fd5b610bcc83833560208501610b6e565b9392505050565b60008060008060808587031215610be957600080fd5b843567ffffffffffffffff80821115610c0157600080fd5b610c0d88838901610bac565b95506020870135915080821115610c2357600080fd5b610c2f88838901610bac565b94506040870135915080821115610c4557600080fd5b818701915087601f830112610c5957600080fd5b610c6888833560208501610b6e565b9350606087013591508082168214610c7f57600080fd5b50939692955090935050565b60005b83811015610ca6578181015183820152602001610c8e565b50506000910152565b60008151808452610cc7816020860160208601610c8b565b601f01601f19169290920160200192915050565b602081526000610bcc6020830184610caf565b600060208284031215610d0057600080fd5b5035919050565b6001600160a01b038116811461080157600080fd5b600060208284031215610d2e57600080fd5b8135610bcc81610d07565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610d7757610d77610d4f565b5060010190565b60008060008060808587031215610d9457600080fd5b8451610d9f81610d07565b6020860151909450610db081610d07565b604086015190935067ffffffffffffffff811115610dcd57600080fd5b8501601f81018713610dde57600080fd5b8051610dec610b7c82610b46565b818152886020838501011115610e0157600080fd5b610e12826020830160208601610c8b565b60609790970151959894975050505050565b60008551610e36818460208a01610c8b565b9190910193845250602083019190915260601b6bffffffffffffffffffffffff19166040820152605401919050565b60008251610e77818460208701610c8b565b9190910192915050565b828152604060208201526000610e9a6040830184610caf565b949350505050565b81810381811115610eb557610eb5610d4f565b92915050565b600181815b80851115610ef6578160001904821115610edc57610edc610d4f565b80851615610ee957918102915b93841c9390800290610ec0565b509250929050565b600082610f0d57506001610eb5565b81610f1a57506000610eb5565b8160018114610f305760028114610f3a57610f56565b6001915050610eb5565b60ff841115610f4b57610f4b610d4f565b50506001821b610eb5565b5060208310610133831016604e8410600b8410161715610f79575081810a610eb5565b610f838383610ebb565b8060001904821115610f9757610f97610d4f565b029392505050565b6000610bcc8383610efe565b8082028115828204841417610eb557610eb5610d4f565b80820180821115610eb557610eb5610d4f56fea2646970667358221220d79b29f77bfae45c88765c0d1723a40557d4abee6ebaa45f8236e8d623cb00a864736f6c63430008110033",
  "devdoc": {
    "errors": {
      "MessageBatchFailure(bytes32,uint256,bytes)": [
        {
          "details": "MessageExecutor MUST revert the entire batch if any message in a batch fails and SHOULD emit a MessageBatchFailure custom error."
        }
      ],
      "MessageFailure(bytes32,bytes)": [
        {
          "details": "MessageExecutor MUST revert if an individual message fails and SHOULD emit a MessageFailure custom error."
        }
      ],
      "MessageIdAlreadyExecuted(bytes32)": [
        {
          "details": "MessageExecutor MUST revert if a messageId has already been executed and SHOULD emit a MessageIdAlreadyExecuted custom error."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateSenderAdapter(uint256[],address[])": {
        "details": "Owner update sender adapter address on src chain."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 654,
        "contract": "contracts/message/apps/multibridge/adapters/router/RouterReceiverAdapter.sol:RouterReceiverAdapter",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 539,
        "contract": "contracts/message/apps/multibridge/adapters/router/RouterReceiverAdapter.sol:RouterReceiverAdapter",
        "label": "_owner",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21404,
        "contract": "contracts/message/apps/multibridge/adapters/router/RouterReceiverAdapter.sol:RouterReceiverAdapter",
        "label": "senderAdapters",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 21411,
        "contract": "contracts/message/apps/multibridge/adapters/router/RouterReceiverAdapter.sol:RouterReceiverAdapter",
        "label": "executedMessages",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}