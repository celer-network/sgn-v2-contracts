{
  "address": "0x9B36f165baB9ebe611d491180418d8De4b8f3a1f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "DelayPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "DelayThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "DelayedTransferAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DelayedTransferExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "EpochLengthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "EpochVolumeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "GovernorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "seqnum",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MaxSendUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MinAddUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MinSendUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "srcTransferId",
          "type": "bytes32"
        }
      ],
      "name": "Relay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resetTime",
          "type": "uint256"
        }
      ],
      "name": "ResetNotification",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "dstChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxSlippage",
          "type": "uint32"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "SignersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "withdrawId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "seqnum",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "refid",
          "type": "bytes32"
        }
      ],
      "name": "WithdrawDone",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addNativeLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addseq",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delayPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delayThresholds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "delayedTransfers",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochVolumeCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochVolumes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "executeDelayedTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "governors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "increaseNoticePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastOpTimestamps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minAdd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minSend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimalMaxSlippage",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeTokenTransferGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeWrap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noticePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notifyResetSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_relayRequest",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "relay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "resetSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        }
      ],
      "name": "sendNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setDelayPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_thresholds",
          "type": "uint256[]"
        }
      ],
      "name": "setDelayThresholds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "setEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "setEpochVolumeCaps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMinAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "setMinSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minimalMaxSlippage",
          "type": "uint32"
        }
      ],
      "name": "setMinimalMaxSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasUsed",
          "type": "uint256"
        }
      ],
      "name": "setNativeTokenTransferGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "name": "setWrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ssHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transfers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_triggerTime",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_newSigners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_newPowers",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_curSigners",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_curPowers",
          "type": "uint256[]"
        }
      ],
      "name": "updateSigners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_msg",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "verifySigs",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_wdmsg",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sigs",
          "type": "bytes[]"
        },
        {
          "internalType": "address[]",
          "name": "_signers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_powers",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "withdraws",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xba65e37a36a99274e4596804a5f40425c3d32b0b7535637dd760c5f7948a95af",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0x9B36f165baB9ebe611d491180418d8De4b8f3a1f",
    "transactionIndex": 0,
    "gasUsed": "4700350",
    "logsBloom": "0x
    "blockHash": "0xbc306c8634464886327ae6f7ca01d56d3b8693d8eca271d5297e83062d40fa8d",
    "transactionHash": "0xba65e37a36a99274e4596804a5f40425c3d32b0b7535637dd760c5f7948a95af",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 445,
        "transactionHash": "0xba65e37a36a99274e4596804a5f40425c3d32b0b7535637dd760c5f7948a95af",
        "address": "0x9B36f165baB9ebe611d491180418d8De4b8f3a1f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbc306c8634464886327ae6f7ca01d56d3b8693d8eca271d5297e83062d40fa8d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 445,
        "transactionHash": "0xba65e37a36a99274e4596804a5f40425c3d32b0b7535637dd760c5f7948a95af",
        "address": "0x9B36f165baB9ebe611d491180418d8De4b8f3a1f",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1",
        "logIndex": 1,
        "blockHash": "0xbc306c8634464886327ae6f7ca01d56d3b8693d8eca271d5297e83062d40fa8d"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 445,
        "transactionHash": "0xba65e37a36a99274e4596804a5f40425c3d32b0b7535637dd760c5f7948a95af",
        "address": "0x9B36f165baB9ebe611d491180418d8De4b8f3a1f",
        "topics": [
          "0xdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b5"
        ],
        "data": "0x00000000000000000000000058b529f9084d7eaa598eb3477fe36064c5b7bbc1",
        "logIndex": 2,
        "blockHash": "0xbc306c8634464886327ae6f7ca01d56d3b8693d8eca271d5297e83062d40fa8d"
      }
    ],
    "blockNumber": 445,
    "cumulativeGasUsed": "4700350",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "63e7586ecff740f5cf7af58b7e60f225",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"DelayPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"DelayThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"DelayedTransferAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DelayedTransferExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"EpochLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"EpochVolumeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"GovernorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seqnum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MaxSendUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinAddUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinSendUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"srcTransferId\",\"type\":\"bytes32\"}],\"name\":\"Relay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resetTime\",\"type\":\"uint256\"}],\"name\":\"ResetNotification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"}],\"name\":\"Send\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"SignersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"seqnum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"refid\",\"type\":\"bytes32\"}],\"name\":\"WithdrawDone\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addNativeLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addseq\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delayThresholds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"delayedTransfers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochVolumeCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochVolumes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"executeDelayedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"governors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"increaseNoticePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastOpTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimalMaxSlippage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeTokenTransferGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeWrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notifyResetSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_relayRequest\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"resetSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"}],\"name\":\"sendNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setDelayPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_thresholds\",\"type\":\"uint256[]\"}],\"name\":\"setDelayThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"setEpochVolumeCaps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMaxSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minimalMaxSlippage\",\"type\":\"uint32\"}],\"name\":\"setMinimalMaxSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasUsed\",\"type\":\"uint256\"}],\"name\":\"setNativeTokenTransferGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ssHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_triggerTime\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_newSigners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_newPowers\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_curSigners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_curPowers\",\"type\":\"uint256[]\"}],\"name\":\"updateSigners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"verifySigs\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_wdmsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sigs\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdraws\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,uint256)\":{\"params\":{\"_amount\":\"The amount to add.\",\"_token\":\"The address of the token.\"}},\"addNativeLiquidity(uint256)\":{\"params\":{\"_amount\":\"The amount to add.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"relay(bytes,bytes[],address[],uint256[])\":{\"params\":{\"_powers\":\"The signing powers of the signers.\",\"_relayRequest\":\"The serialized Relay protobuf.\",\"_signers\":\"The sorted list of signers.\",\"_sigs\":\"The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the bridge's current signing power to be delivered.\"}},\"send(address,address,uint256,uint64,uint64,uint32)\":{\"params\":{\"_amount\":\"The amount of the transfer.\",\"_dstChainId\":\"The destination chain ID.\",\"_maxSlippage\":\"The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%. Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the transfer can be refunded.\",\"_nonce\":\"A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\",\"_receiver\":\"The address of the receiver.\",\"_token\":\"The address of the token.\"}},\"sendNative(address,uint256,uint64,uint64,uint32)\":{\"params\":{\"_amount\":\"The amount of the transfer.\",\"_dstChainId\":\"The destination chain ID.\",\"_maxSlippage\":\"The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%. Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the transfer can be refunded.\",\"_nonce\":\"A unique number. Can be timestamp in practice.\",\"_receiver\":\"The address of the receiver.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateSigners(uint256,address[],uint256[],bytes[],address[],uint256[])\":{\"params\":{\"_curPowers\":\"powers of current signers\",\"_curSigners\":\"sorted list of current signers\",\"_newSigners\":\"sorted list of new signers\",\"_sigs\":\"list of signatures sorted by signer addresses in ascending order\"}},\"verifySigs(bytes,bytes[],address[],uint256[])\":{\"params\":{\"_msg\":\"signed message\",\"_powers\":\"powers of current signers\",\"_signers\":\"sorted list of current signers\",\"_sigs\":\"list of signatures sorted by signer addresses in ascending order\"}},\"withdraw(bytes,bytes[],address[],uint256[])\":{\"params\":{\"_powers\":\"The signing powers of the signers.\",\"_signers\":\"The sorted list of signers.\",\"_sigs\":\"The list of signatures sorted by signing addresses in ascending order. A withdrawal must be signed-off by +2/3 of the bridge's current signing power to be delivered.\",\"_wdmsg\":\"The serialized Withdraw protobuf.\"}}},\"title\":\"The liquidity-pool based bridge.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,uint256)\":{\"notice\":\"Add liquidity to the pool-based bridge. NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\"},\"addNativeLiquidity(uint256)\":{\"notice\":\"Add native token liquidity to the pool-based bridge.\"},\"relay(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Relay a cross-chain transfer sent from a liquidity pool-based bridge on another chain.\"},\"resetSigners(address[],uint256[])\":{\"notice\":\"reset signers, only used for init setup and emergency recovery\"},\"send(address,address,uint256,uint64,uint64,uint32)\":{\"notice\":\"Send a cross-chain transfer via the liquidity pool-based bridge. NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\"},\"sendNative(address,uint256,uint64,uint64,uint32)\":{\"notice\":\"Send a cross-chain transfer via the liquidity pool-based bridge using the native token.\"},\"updateSigners(uint256,address[],uint256[],bytes[],address[],uint256[])\":{\"notice\":\"Update new signers.\"},\"verifySigs(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Verifies that a message is signed by a quorum among the signers The sigs must be sorted by signer addresses in ascending order.\"},\"withdraw(bytes,bytes[],address[],uint256[])\":{\"notice\":\"Withdraw funds from the bridge pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidity-bridge/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x0d0b090d078a5f50ea7b751331614785e536fc09bcff28bfe08a60613ebca1ae\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x99ab1a3c396cc7ebbae940fd4e73f209c692afe86f221d4e1352b0fe27953bc8\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/Pb.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\n// runtime proto sol library\\nlibrary Pb {\\n    enum WireType {\\n        Varint,\\n        Fixed64,\\n        LengthDelim,\\n        StartGroup,\\n        EndGroup,\\n        Fixed32\\n    }\\n\\n    struct Buffer {\\n        uint256 idx; // the start index of next read. when idx=b.length, we're done\\n        bytes b; // hold serialized proto msg, readonly\\n    }\\n\\n    // create a new in-memory Buffer object from raw msg bytes\\n    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\\n        buf.b = raw;\\n        buf.idx = 0;\\n    }\\n\\n    // whether there are unread bytes\\n    function hasMore(Buffer memory buf) internal pure returns (bool) {\\n        return buf.idx < buf.b.length;\\n    }\\n\\n    // decode current field number and wiretype\\n    function decKey(Buffer memory buf) internal pure returns (uint256 tag, WireType wiretype) {\\n        uint256 v = decVarint(buf);\\n        tag = v / 8;\\n        wiretype = WireType(v & 7);\\n    }\\n\\n    // count tag occurrences, return an array due to no memory map support\\n    // have to create array for (maxtag+1) size. cnts[tag] = occurrences\\n    // should keep buf.idx unchanged because this is only a count function\\n    function cntTags(Buffer memory buf, uint256 maxtag) internal pure returns (uint256[] memory cnts) {\\n        uint256 originalIdx = buf.idx;\\n        cnts = new uint256[](maxtag + 1); // protobuf's tags are from 1 rather than 0\\n        uint256 tag;\\n        WireType wire;\\n        while (hasMore(buf)) {\\n            (tag, wire) = decKey(buf);\\n            cnts[tag] += 1;\\n            skipValue(buf, wire);\\n        }\\n        buf.idx = originalIdx;\\n    }\\n\\n    // read varint from current buf idx, move buf.idx to next read, return the int value\\n    function decVarint(Buffer memory buf) internal pure returns (uint256 v) {\\n        bytes10 tmp; // proto int is at most 10 bytes (7 bits can be used per byte)\\n        bytes memory bb = buf.b; // get buf.b mem addr to use in assembly\\n        v = buf.idx; // use v to save one additional uint variable\\n        assembly {\\n            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\\n        }\\n        uint256 b; // store current byte content\\n        v = 0; // reset to 0 for return value\\n        for (uint256 i = 0; i < 10; i++) {\\n            assembly {\\n                b := byte(i, tmp) // don't use tmp[i] because it does bound check and costs extra\\n            }\\n            v |= (b & 0x7F) << (i * 7);\\n            if (b & 0x80 == 0) {\\n                buf.idx += i + 1;\\n                return v;\\n            }\\n        }\\n        revert(); // i=10, invalid varint stream\\n    }\\n\\n    // read length delimited field and return bytes\\n    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        b = new bytes(len);\\n        bytes memory bufB = buf.b; // get buf.b mem addr to use in assembly\\n        uint256 bStart;\\n        uint256 bufBStart = buf.idx;\\n        assembly {\\n            bStart := add(b, 32)\\n            bufBStart := add(add(bufB, 32), bufBStart)\\n        }\\n        for (uint256 i = 0; i < len; i += 32) {\\n            assembly {\\n                mstore(add(bStart, i), mload(add(bufBStart, i)))\\n            }\\n        }\\n        buf.idx = end;\\n    }\\n\\n    // return packed ints\\n    function decPacked(Buffer memory buf) internal pure returns (uint256[] memory t) {\\n        uint256 len = decVarint(buf);\\n        uint256 end = buf.idx + len;\\n        require(end <= buf.b.length); // avoid overflow\\n        // array in memory must be init w/ known length\\n        // so we have to create a tmp array w/ max possible len first\\n        uint256[] memory tmp = new uint256[](len);\\n        uint256 i = 0; // count how many ints are there\\n        while (buf.idx < end) {\\n            tmp[i] = decVarint(buf);\\n            i++;\\n        }\\n        t = new uint256[](i); // init t with correct length\\n        for (uint256 j = 0; j < i; j++) {\\n            t[j] = tmp[j];\\n        }\\n        return t;\\n    }\\n\\n    // move idx pass current value field, to beginning of next tag or msg end\\n    function skipValue(Buffer memory buf, WireType wire) internal pure {\\n        if (wire == WireType.Varint) {\\n            decVarint(buf);\\n        } else if (wire == WireType.LengthDelim) {\\n            uint256 len = decVarint(buf);\\n            buf.idx += len; // skip len bytes value data\\n            require(buf.idx <= buf.b.length); // avoid overflow\\n        } else {\\n            revert();\\n        } // unsupported wiretype\\n    }\\n\\n    // type conversion help utils\\n    function _bool(uint256 x) internal pure returns (bool v) {\\n        return x != 0;\\n    }\\n\\n    function _uint256(bytes memory b) internal pure returns (uint256 v) {\\n        require(b.length <= 32); // b's length must be smaller than or equal to 32\\n        assembly {\\n            v := mload(add(b, 32))\\n        } // load all 32bytes to v\\n        v = v >> (8 * (32 - b.length)); // only first b.length is valid\\n    }\\n\\n    function _address(bytes memory b) internal pure returns (address v) {\\n        v = _addressPayable(b);\\n    }\\n\\n    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\\n        require(b.length == 20);\\n        //load 32bytes then shift right 12 bytes\\n        assembly {\\n            v := div(mload(add(b, 32)), 0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\\n        require(b.length == 32);\\n        assembly {\\n            v := mload(add(b, 32))\\n        }\\n    }\\n\\n    // uint[] to uint8[]\\n    function uint8s(uint256[] memory arr) internal pure returns (uint8[] memory t) {\\n        t = new uint8[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint8(arr[i]);\\n        }\\n    }\\n\\n    function uint32s(uint256[] memory arr) internal pure returns (uint32[] memory t) {\\n        t = new uint32[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint32(arr[i]);\\n        }\\n    }\\n\\n    function uint64s(uint256[] memory arr) internal pure returns (uint64[] memory t) {\\n        t = new uint64[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = uint64(arr[i]);\\n        }\\n    }\\n\\n    function bools(uint256[] memory arr) internal pure returns (bool[] memory t) {\\n        t = new bool[](arr.length);\\n        for (uint256 i = 0; i < t.length; i++) {\\n            t[i] = arr[i] != 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf8c5573d5b5a9bed5ed42254fadce2feeb64bbf81cc0aa4b30b80769c26ad149\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: bridge.proto\\npragma solidity 0.8.17;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbBridge {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct Relay {\\n        address sender; // tag: 1\\n        address receiver; // tag: 2\\n        address token; // tag: 3\\n        uint256 amount; // tag: 4\\n        uint64 srcChainId; // tag: 5\\n        uint64 dstChainId; // tag: 6\\n        bytes32 srcTransferId; // tag: 7\\n    } // end struct Relay\\n\\n    function decRelay(bytes memory raw) internal pure returns (Relay memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.sender = Pb._address(buf.decBytes());\\n            } else if (tag == 2) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 3) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.srcChainId = uint64(buf.decVarint());\\n            } else if (tag == 6) {\\n                m.dstChainId = uint64(buf.decVarint());\\n            } else if (tag == 7) {\\n                m.srcTransferId = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder Relay\\n}\\n\",\"keccak256\":\"0x7f5c3fbd9ab93a48c74ba13ea08c581dff864aa8a3e5f8ebf7ddd5ac5c6e1c58\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/PbPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// Code generated by protoc-gen-sol. DO NOT EDIT.\\n// source: contracts/libraries/proto/pool.proto\\npragma solidity 0.8.17;\\nimport \\\"./Pb.sol\\\";\\n\\nlibrary PbPool {\\n    using Pb for Pb.Buffer; // so we can call Pb funcs on Buffer obj\\n\\n    struct WithdrawMsg {\\n        uint64 chainid; // tag: 1\\n        uint64 seqnum; // tag: 2\\n        address receiver; // tag: 3\\n        address token; // tag: 4\\n        uint256 amount; // tag: 5\\n        bytes32 refid; // tag: 6\\n    } // end struct WithdrawMsg\\n\\n    function decWithdrawMsg(bytes memory raw) internal pure returns (WithdrawMsg memory m) {\\n        Pb.Buffer memory buf = Pb.fromBytes(raw);\\n\\n        uint256 tag;\\n        Pb.WireType wire;\\n        while (buf.hasMore()) {\\n            (tag, wire) = buf.decKey();\\n            if (false) {}\\n            // solidity has no switch/case\\n            else if (tag == 1) {\\n                m.chainid = uint64(buf.decVarint());\\n            } else if (tag == 2) {\\n                m.seqnum = uint64(buf.decVarint());\\n            } else if (tag == 3) {\\n                m.receiver = Pb._address(buf.decBytes());\\n            } else if (tag == 4) {\\n                m.token = Pb._address(buf.decBytes());\\n            } else if (tag == 5) {\\n                m.amount = Pb._uint256(buf.decBytes());\\n            } else if (tag == 6) {\\n                m.refid = Pb._bytes32(buf.decBytes());\\n            } else {\\n                buf.skipValue(wire);\\n            } // skip value of unknown tag\\n        }\\n    } // end decoder WithdrawMsg\\n}\\n\",\"keccak256\":\"0x80917b507ebb9b8eda7875c30c63725f9976fdde9a7d2003b0da31bea1f44324\",\"license\":\"GPL-3.0-only\"},\"contracts/liquidity-bridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libraries/PbBridge.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\n/**\\n * @title The liquidity-pool based bridge.\\n */\\ncontract Bridge is Pool {\\n    using SafeERC20 for IERC20;\\n\\n    // liquidity events\\n    event Send(\\n        bytes32 transferId,\\n        address sender,\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        uint64 dstChainId,\\n        uint64 nonce,\\n        uint32 maxSlippage\\n    );\\n    event Relay(\\n        bytes32 transferId,\\n        address sender,\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        uint64 srcChainId,\\n        bytes32 srcTransferId\\n    );\\n    // gov events\\n    event MinSendUpdated(address token, uint256 amount);\\n    event MaxSendUpdated(address token, uint256 amount);\\n\\n    mapping(bytes32 => bool) public transfers;\\n    mapping(address => uint256) public minSend; // send _amount must > minSend\\n    mapping(address => uint256) public maxSend;\\n\\n    // min allowed max slippage uint32 value is slippage * 1M, eg. 0.5% -> 5000\\n    uint32 public minimalMaxSlippage;\\n\\n    /**\\n     * @notice Send a cross-chain transfer via the liquidity pool-based bridge.\\n     * NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\\n     * @param _receiver The address of the receiver.\\n     * @param _token The address of the token.\\n     * @param _amount The amount of the transfer.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     */\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage // slippage * 1M, eg. 0.5% -> 5000\\n    ) external nonReentrant whenNotPaused {\\n        bytes32 transferId = _send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Send(transferId, msg.sender, _receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n    }\\n\\n    /**\\n     * @notice Send a cross-chain transfer via the liquidity pool-based bridge using the native token.\\n     * @param _receiver The address of the receiver.\\n     * @param _amount The amount of the transfer.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A unique number. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     */\\n    function sendNative(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external payable nonReentrant whenNotPaused {\\n        require(msg.value == _amount, \\\"Amount mismatch\\\");\\n        require(nativeWrap != address(0), \\\"Native wrap not set\\\");\\n        bytes32 transferId = _send(_receiver, nativeWrap, _amount, _dstChainId, _nonce, _maxSlippage);\\n        IWETH(nativeWrap).deposit{value: _amount}();\\n        emit Send(transferId, msg.sender, _receiver, nativeWrap, _amount, _dstChainId, _nonce, _maxSlippage);\\n    }\\n\\n    function _send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) private returns (bytes32) {\\n        require(_amount > minSend[_token], \\\"amount too small\\\");\\n        require(maxSend[_token] == 0 || _amount <= maxSend[_token], \\\"amount too large\\\");\\n        require(_maxSlippage > minimalMaxSlippage, \\\"max slippage too small\\\");\\n        bytes32 transferId = keccak256(\\n            // uint64(block.chainid) for consistency as entire system uses uint64 for chain id\\n            // len = 20 + 20 + 20 + 32 + 8 + 8 + 8 = 116\\n            abi.encodePacked(msg.sender, _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n        );\\n        require(transfers[transferId] == false, \\\"transfer exists\\\");\\n        transfers[transferId] = true;\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Relay a cross-chain transfer sent from a liquidity pool-based bridge on another chain.\\n     * @param _relayRequest The serialized Relay protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external whenNotPaused {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Relay\\\"));\\n        verifySigs(abi.encodePacked(domain, _relayRequest), _sigs, _signers, _powers);\\n        PbBridge.Relay memory request = PbBridge.decRelay(_relayRequest);\\n        // len = 20 + 20 + 20 + 32 + 8 + 8 + 32 = 140\\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(\\n                request.sender,\\n                request.receiver,\\n                request.token,\\n                request.amount,\\n                request.srcChainId,\\n                request.dstChainId,\\n                request.srcTransferId\\n            )\\n        );\\n        require(transfers[transferId] == false, \\\"transfer exists\\\");\\n        transfers[transferId] = true;\\n        _updateVolume(request.token, request.amount);\\n        uint256 delayThreshold = delayThresholds[request.token];\\n        if (delayThreshold > 0 && request.amount > delayThreshold) {\\n            _addDelayedTransfer(transferId, request.receiver, request.token, request.amount);\\n        } else {\\n            _sendToken(request.receiver, request.token, request.amount);\\n        }\\n\\n        emit Relay(\\n            transferId,\\n            request.sender,\\n            request.receiver,\\n            request.token,\\n            request.amount,\\n            request.srcChainId,\\n            request.srcTransferId\\n        );\\n    }\\n\\n    function setMinSend(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            minSend[_tokens[i]] = _amounts[i];\\n            emit MinSendUpdated(_tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    function setMaxSend(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            maxSend[_tokens[i]] = _amounts[i];\\n            emit MaxSendUpdated(_tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    function setMinimalMaxSlippage(uint32 _minimalMaxSlippage) external onlyGovernor {\\n        minimalMaxSlippage = _minimalMaxSlippage;\\n    }\\n\\n    // This is needed to receive ETH when calling `IWETH.withdraw`\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xfc600eb7a2ac37c6e27960356715cd8bc6bcd0777f13135d512cc0fce75454ba\",\"license\":\"GPL-3.0-only\"},\"contracts/liquidity-bridge/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/PbPool.sol\\\";\\nimport \\\"../safeguard/Pauser.sol\\\";\\nimport \\\"../safeguard/VolumeControl.sol\\\";\\nimport \\\"../safeguard/DelayedTransfer.sol\\\";\\nimport \\\"./Signers.sol\\\";\\n\\n/**\\n * @title Liquidity pool functions for {Bridge}.\\n */\\ncontract Pool is Signers, ReentrancyGuard, Pauser, VolumeControl, DelayedTransfer {\\n    using SafeERC20 for IERC20;\\n\\n    uint64 public addseq; // ensure unique LiquidityAdded event, start from 1\\n    mapping(address => uint256) public minAdd; // add _amount must > minAdd\\n\\n    // map of successful withdraws, if true means already withdrew money or added to delayedTransfers\\n    mapping(bytes32 => bool) public withdraws;\\n\\n    // erc20 wrap of gas token of this chain, eg. WETH, when relay ie. pay out,\\n    // if request.token equals this, will withdraw and send native token to receiver\\n    // note we don't check whether it's zero address. when this isn't set, and request.token\\n    // is all 0 address, guarantee fail\\n    address public nativeWrap;\\n\\n    // when transfer native token after wrap, use this gas used config.\\n    uint256 public nativeTokenTransferGas = 50000;\\n\\n    // liquidity events\\n    event LiquidityAdded(\\n        uint64 seqnum,\\n        address provider,\\n        address token,\\n        uint256 amount // how many tokens were added\\n    );\\n    event WithdrawDone(\\n        bytes32 withdrawId,\\n        uint64 seqnum,\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        bytes32 refid\\n    );\\n    event MinAddUpdated(address token, uint256 amount);\\n\\n    /**\\n     * @notice Add liquidity to the pool-based bridge.\\n     * NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens.\\n     * @param _token The address of the token.\\n     * @param _amount The amount to add.\\n     */\\n    function addLiquidity(address _token, uint256 _amount) external nonReentrant whenNotPaused {\\n        require(_amount > minAdd[_token], \\\"amount too small\\\");\\n        addseq += 1;\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        emit LiquidityAdded(addseq, msg.sender, _token, _amount);\\n    }\\n\\n    /**\\n     * @notice Add native token liquidity to the pool-based bridge.\\n     * @param _amount The amount to add.\\n     */\\n    function addNativeLiquidity(uint256 _amount) external payable nonReentrant whenNotPaused {\\n        require(msg.value == _amount, \\\"Amount mismatch\\\");\\n        require(nativeWrap != address(0), \\\"Native wrap not set\\\");\\n        require(_amount > minAdd[nativeWrap], \\\"amount too small\\\");\\n        addseq += 1;\\n        IWETH(nativeWrap).deposit{value: _amount}();\\n        emit LiquidityAdded(addseq, msg.sender, nativeWrap, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from the bridge pool.\\n     * @param _wdmsg The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external whenNotPaused {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"WithdrawMsg\\\"));\\n        verifySigs(abi.encodePacked(domain, _wdmsg), _sigs, _signers, _powers);\\n        // decode and check wdmsg\\n        PbPool.WithdrawMsg memory wdmsg = PbPool.decWithdrawMsg(_wdmsg);\\n        // len = 8 + 8 + 20 + 20 + 32 = 88\\n        bytes32 wdId = keccak256(\\n            abi.encodePacked(wdmsg.chainid, wdmsg.seqnum, wdmsg.receiver, wdmsg.token, wdmsg.amount)\\n        );\\n        require(withdraws[wdId] == false, \\\"withdraw already succeeded\\\");\\n        withdraws[wdId] = true;\\n        _updateVolume(wdmsg.token, wdmsg.amount);\\n        uint256 delayThreshold = delayThresholds[wdmsg.token];\\n        if (delayThreshold > 0 && wdmsg.amount > delayThreshold) {\\n            _addDelayedTransfer(wdId, wdmsg.receiver, wdmsg.token, wdmsg.amount);\\n        } else {\\n            _sendToken(wdmsg.receiver, wdmsg.token, wdmsg.amount);\\n        }\\n        emit WithdrawDone(wdId, wdmsg.seqnum, wdmsg.receiver, wdmsg.token, wdmsg.amount, wdmsg.refid);\\n    }\\n\\n    function executeDelayedTransfer(bytes32 id) external whenNotPaused {\\n        delayedTransfer memory transfer = _executeDelayedTransfer(id);\\n        _sendToken(transfer.receiver, transfer.token, transfer.amount);\\n    }\\n\\n    function setMinAdd(address[] calldata _tokens, uint256[] calldata _amounts) external onlyGovernor {\\n        require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            minAdd[_tokens[i]] = _amounts[i];\\n            emit MinAddUpdated(_tokens[i], _amounts[i]);\\n        }\\n    }\\n\\n    function _sendToken(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        if (_token == nativeWrap) {\\n            // withdraw then transfer native to receiver\\n            IWETH(nativeWrap).withdraw(_amount);\\n            (bool sent, ) = _receiver.call{value: _amount, gas: nativeTokenTransferGas}(\\\"\\\");\\n            require(sent, \\\"failed to send native token\\\");\\n        } else {\\n            IERC20(_token).safeTransfer(_receiver, _amount);\\n        }\\n    }\\n\\n    // set nativeWrap, for relay requests, if token == nativeWrap, will withdraw first then transfer native to receiver\\n    function setWrap(address _weth) external onlyOwner {\\n        nativeWrap = _weth;\\n    }\\n\\n    // setNativeTransferGasUsed, native transfer will use this config.\\n    function setNativeTokenTransferGas(uint256 _gasUsed) external onlyGovernor {\\n        nativeTokenTransferGas = _gasUsed;\\n    }\\n}\\n\",\"keccak256\":\"0xf1bfca4bf2af0d4c66ded2f7bb32593fac6df1a739854f9f0e901f6021fb3b66\",\"license\":\"GPL-3.0-only\"},\"contracts/liquidity-bridge/Signers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../safeguard/Ownable.sol\\\";\\nimport \\\"../interfaces/ISigsVerifier.sol\\\";\\n\\n/**\\n * @title Multi-sig verification and management functions for {Bridge}.\\n */\\ncontract Signers is Ownable, ISigsVerifier {\\n    using ECDSA for bytes32;\\n\\n    bytes32 public ssHash;\\n    uint256 public triggerTime; // timestamp when last update was triggered\\n\\n    // reset can be called by the owner address for emergency recovery\\n    uint256 public resetTime;\\n    uint256 public noticePeriod; // advance notice period as seconds for reset\\n    uint256 constant MAX_INT = 2**256 - 1;\\n\\n    event SignersUpdated(address[] _signers, uint256[] _powers);\\n\\n    event ResetNotification(uint256 resetTime);\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers\\n     * The sigs must be sorted by signer addresses in ascending order.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) public view override {\\n        bytes32 h = keccak256(abi.encodePacked(_signers, _powers));\\n        require(ssHash == h, \\\"Mismatch current signers\\\");\\n        _verifySignedPowers(keccak256(_msg).toEthSignedMessageHash(), _sigs, _signers, _powers);\\n    }\\n\\n    /**\\n     * @notice Update new signers.\\n     * @param _newSigners sorted list of new signers\\n     * @param _curPowers powers of new signers\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _curSigners sorted list of current signers\\n     * @param _curPowers powers of current signers\\n     */\\n    function updateSigners(\\n        uint256 _triggerTime,\\n        address[] calldata _newSigners,\\n        uint256[] calldata _newPowers,\\n        bytes[] calldata _sigs,\\n        address[] calldata _curSigners,\\n        uint256[] calldata _curPowers\\n    ) external {\\n        // use trigger time for nonce protection, must be ascending\\n        require(_triggerTime > triggerTime, \\\"Trigger time is not increasing\\\");\\n        // make sure triggerTime is not too large, as it cannot be decreased once set\\n        require(_triggerTime < block.timestamp + 3600, \\\"Trigger time is too large\\\");\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"UpdateSigners\\\"));\\n        verifySigs(abi.encodePacked(domain, _triggerTime, _newSigners, _newPowers), _sigs, _curSigners, _curPowers);\\n        _updateSigners(_newSigners, _newPowers);\\n        triggerTime = _triggerTime;\\n    }\\n\\n    /**\\n     * @notice reset signers, only used for init setup and emergency recovery\\n     */\\n    function resetSigners(address[] calldata _signers, uint256[] calldata _powers) external onlyOwner {\\n        require(block.timestamp > resetTime, \\\"not reach reset time\\\");\\n        resetTime = MAX_INT;\\n        _updateSigners(_signers, _powers);\\n    }\\n\\n    function notifyResetSigners() external onlyOwner {\\n        resetTime = block.timestamp + noticePeriod;\\n        emit ResetNotification(resetTime);\\n    }\\n\\n    function increaseNoticePeriod(uint256 period) external onlyOwner {\\n        require(period > noticePeriod, \\\"notice period can only be increased\\\");\\n        noticePeriod = period;\\n    }\\n\\n    // separate from verifySigs func to avoid \\\"stack too deep\\\" issue\\n    function _verifySignedPowers(\\n        bytes32 _hash,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) private pure {\\n        require(_signers.length == _powers.length, \\\"signers and powers length not match\\\");\\n        uint256 totalPower; // sum of all signer.power\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            totalPower += _powers[i];\\n        }\\n        uint256 quorum = (totalPower * 2) / 3 + 1;\\n\\n        uint256 signedPower; // sum of signer powers who are in sigs\\n        address prev = address(0);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < _sigs.length; i++) {\\n            address signer = _hash.recover(_sigs[i]);\\n            require(signer > prev, \\\"signers not in ascending order\\\");\\n            prev = signer;\\n            // now find match signer add its power\\n            while (signer > _signers[index]) {\\n                index += 1;\\n                require(index < _signers.length, \\\"signer not found\\\");\\n            }\\n            if (signer == _signers[index]) {\\n                signedPower += _powers[index];\\n            }\\n            if (signedPower >= quorum) {\\n                // return early to save gas\\n                return;\\n            }\\n        }\\n        revert(\\\"quorum not reached\\\");\\n    }\\n\\n    function _updateSigners(address[] calldata _signers, uint256[] calldata _powers) private {\\n        require(_signers.length == _powers.length, \\\"signers and powers length not match\\\");\\n        address prev = address(0);\\n        for (uint256 i = 0; i < _signers.length; i++) {\\n            require(_signers[i] > prev, \\\"New signers not in ascending order\\\");\\n            prev = _signers[i];\\n        }\\n        ssHash = keccak256(abi.encodePacked(_signers, _powers));\\n        emit SignersUpdated(_signers, _powers);\\n    }\\n}\\n\",\"keccak256\":\"0x7220bc3aea38832e86185152c6219f267f1bf59c1a7100f3660eb45c5ae5f640\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/DelayedTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./Governor.sol\\\";\\n\\nabstract contract DelayedTransfer is Governor {\\n    struct delayedTransfer {\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint256 timestamp;\\n    }\\n    mapping(bytes32 => delayedTransfer) public delayedTransfers;\\n    mapping(address => uint256) public delayThresholds;\\n    uint256 public delayPeriod; // in seconds\\n\\n    event DelayedTransferAdded(bytes32 id);\\n    event DelayedTransferExecuted(bytes32 id, address receiver, address token, uint256 amount);\\n\\n    event DelayPeriodUpdated(uint256 period);\\n    event DelayThresholdUpdated(address token, uint256 threshold);\\n\\n    function setDelayThresholds(address[] calldata _tokens, uint256[] calldata _thresholds) external onlyGovernor {\\n        require(_tokens.length == _thresholds.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            delayThresholds[_tokens[i]] = _thresholds[i];\\n            emit DelayThresholdUpdated(_tokens[i], _thresholds[i]);\\n        }\\n    }\\n\\n    function setDelayPeriod(uint256 _period) external onlyGovernor {\\n        delayPeriod = _period;\\n        emit DelayPeriodUpdated(_period);\\n    }\\n\\n    function _addDelayedTransfer(\\n        bytes32 id,\\n        address receiver,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        require(delayedTransfers[id].timestamp == 0, \\\"delayed transfer already exists\\\");\\n        delayedTransfers[id] = delayedTransfer({\\n            receiver: receiver,\\n            token: token,\\n            amount: amount,\\n            timestamp: block.timestamp\\n        });\\n        emit DelayedTransferAdded(id);\\n    }\\n\\n    // caller needs to do the actual token transfer\\n    function _executeDelayedTransfer(bytes32 id) internal returns (delayedTransfer memory) {\\n        delayedTransfer memory transfer = delayedTransfers[id];\\n        require(transfer.timestamp > 0, \\\"delayed transfer not exist\\\");\\n        require(block.timestamp > transfer.timestamp + delayPeriod, \\\"delayed transfer still locked\\\");\\n        delete delayedTransfers[id];\\n        emit DelayedTransferExecuted(id, transfer.receiver, transfer.token, transfer.amount);\\n        return transfer;\\n    }\\n}\\n\",\"keccak256\":\"0xabc30b51461760fca2280c892430e2890a3dca109df98ce351c0964f1114eaa3\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Governor is Ownable {\\n    mapping(address => bool) public governors;\\n\\n    event GovernorAdded(address account);\\n    event GovernorRemoved(address account);\\n\\n    modifier onlyGovernor() {\\n        require(isGovernor(msg.sender), \\\"Caller is not governor\\\");\\n        _;\\n    }\\n\\n    constructor() {\\n        _addGovernor(msg.sender);\\n    }\\n\\n    function isGovernor(address _account) public view returns (bool) {\\n        return governors[_account];\\n    }\\n\\n    function addGovernor(address _account) public onlyOwner {\\n        _addGovernor(_account);\\n    }\\n\\n    function removeGovernor(address _account) public onlyOwner {\\n        _removeGovernor(_account);\\n    }\\n\\n    function renounceGovernor() public {\\n        _removeGovernor(msg.sender);\\n    }\\n\\n    function _addGovernor(address _account) private {\\n        require(!isGovernor(_account), \\\"Account is already governor\\\");\\n        governors[_account] = true;\\n        emit GovernorAdded(_account);\\n    }\\n\\n    function _removeGovernor(address _account) private {\\n        require(isGovernor(_account), \\\"Account is not governor\\\");\\n        governors[_account] = false;\\n        emit GovernorRemoved(_account);\\n    }\\n}\\n\",\"keccak256\":\"0x2c05629097c488feb0f1cc9d832397c7d4c419cdd00545465f83f3b58aea0c48\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\n\\nabstract contract Pauser is Ownable, Pausable {\\n    mapping(address => bool) public pausers;\\n\\n    event PauserAdded(address account);\\n    event PauserRemoved(address account);\\n\\n    constructor() {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"Caller is not pauser\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return pausers[account];\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) private {\\n        require(!isPauser(account), \\\"Account is already pauser\\\");\\n        pausers[account] = true;\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) private {\\n        require(isPauser(account), \\\"Account is not pauser\\\");\\n        pausers[account] = false;\\n        emit PauserRemoved(account);\\n    }\\n}\\n\",\"keccak256\":\"0xe260d8e1780ca5f7ee0bedb8d1f7415bfd1e42b2b5f6d191a8e3e741ab0af5fd\",\"license\":\"GPL-3.0-only\"},\"contracts/safeguard/VolumeControl.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./Governor.sol\\\";\\n\\nabstract contract VolumeControl is Governor {\\n    uint256 public epochLength; // seconds\\n    mapping(address => uint256) public epochVolumes; // key is token\\n    mapping(address => uint256) public epochVolumeCaps; // key is token\\n    mapping(address => uint256) public lastOpTimestamps; // key is token\\n\\n    event EpochLengthUpdated(uint256 length);\\n    event EpochVolumeUpdated(address token, uint256 cap);\\n\\n    function setEpochLength(uint256 _length) external onlyGovernor {\\n        epochLength = _length;\\n        emit EpochLengthUpdated(_length);\\n    }\\n\\n    function setEpochVolumeCaps(address[] calldata _tokens, uint256[] calldata _caps) external onlyGovernor {\\n        require(_tokens.length == _caps.length, \\\"length mismatch\\\");\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            epochVolumeCaps[_tokens[i]] = _caps[i];\\n            emit EpochVolumeUpdated(_tokens[i], _caps[i]);\\n        }\\n    }\\n\\n    function _updateVolume(address _token, uint256 _amount) internal {\\n        if (epochLength == 0) {\\n            return;\\n        }\\n        uint256 cap = epochVolumeCaps[_token];\\n        if (cap == 0) {\\n            return;\\n        }\\n        uint256 volume = epochVolumes[_token];\\n        uint256 timestamp = block.timestamp;\\n        uint256 epochStartTime = (timestamp / epochLength) * epochLength;\\n        if (lastOpTimestamps[_token] < epochStartTime) {\\n            volume = _amount;\\n        } else {\\n            volume += _amount;\\n        }\\n        require(volume <= cap, \\\"volume exceeds cap\\\");\\n        epochVolumes[_token] = volume;\\n        lastOpTimestamps[_token] = timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xe66e0543c641d3f0a38fa35a5f39c3cfe289b08a95bb77d3fbcaf3426479cb4d\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405261c3506014553480156200001757600080fd5b5062000023336200004e565b60016005556006805460ff191690556200003d336200009e565b620000483362000168565b62000228565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526007602052604090205460ff16156200010d5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c7265616479207061757365720000000000000060448201526064015b60405180910390fd5b6001600160a01b038116600081815260076020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f891015b60405180910390a150565b6001600160a01b03811660009081526008602052604090205460ff1615620001d35760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f720000000000604482015260640162000104565b6001600160a01b038116600081815260086020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b591016200015d565b6151da80620002386000396000f3fe60806040526004361061037a5760003560e01c80638456cb59116101d1578063ba2cb25c11610102578063e3eece26116100a0578063f20c922a1161006f578063f20c922a14610afb578063f2fde38b14610b1b578063f832138314610b3b578063f8b30d7d14610b6857600080fd5b8063e3eece2614610a52578063e43581b814610a82578063e999e5f414610abb578063eecdac8814610adb57600080fd5b8063cefe0df5116100dc578063cefe0df5146109d7578063d0790da9146109f7578063e026049c14610a0d578063e09ab42814610a2257600080fd5b8063ba2cb25c1461096a578063ccde517a1461098a578063cdd1b25d146109b757600080fd5b8063a21a92801161016f578063adc0d57f11610149578063adc0d57f14610897578063b1c94d9414610911578063b517b55014610927578063b5f2bc471461093d57600080fd5b8063a21a928014610837578063a5977fbb14610857578063a7bdf45a1461087757600080fd5b80638da5cb5b116101ab5780638da5cb5b146107c35780639b14d4c6146107e15780639e25fc5c146107f75780639ff9001a1461081757600080fd5b80638456cb5914610754578063878fe1ce1461076957806389e391271461078957600080fd5b806352532faa116102ab57806365a114f1116102495780636ef8d66d116102235780636ef8d66d146106dc5780637044c89e146106f157806380f51c121461070457806382dc1ec41461073457600080fd5b806365a114f114610686578063682dbc221461069c5780636b2c0f55146106bc57600080fd5b806357d775f81161028557806357d775f8146105fe5780635c975abb1461061457806360216b001461062c578063618ee0551461065957600080fd5b806352532faa1461059157806354eea796146105be57806356688700146105de57600080fd5b80633d57210711610318578063457bfa2f116102f2578063457bfa2f146104e057806346fbf68e1461051857806347b16c6c14610551578063482341261461057157600080fd5b80633d572107146104985780633f2e5fc3146104b85780633f4ba83a146104cb57600080fd5b80632fd1b0a4116103545780632fd1b0a4146103dd578063370fb47b146104145780633c4a25d0146104385780633c64f04b1461045857600080fd5b8063089927411461038657806317bdbae5146103a857806325c38b9f146103c857600080fd5b3661038157005b600080fd5b34801561039257600080fd5b506103a66103a1366004614954565b610b95565b005b3480156103b457600080fd5b506103a66103c3366004614954565b610d38565b3480156103d457600080fd5b506103a6610ecf565b3480156103e957600080fd5b506018546103fa9063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b34801561042057600080fd5b5061042a60025481565b60405190815260200161040b565b34801561044457600080fd5b506103a66104533660046149dc565b610f6e565b34801561046457600080fd5b506104886104733660046149f7565b60156020526000908152604090205460ff1681565b604051901515815260200161040b565b3480156104a457600080fd5b506103a66104b33660046149f7565b610fd1565b6103a66104c6366004614a3c565b611065565b3480156104d757600080fd5b506103a66112ba565b3480156104ec57600080fd5b50601354610500906001600160a01b031681565b6040516001600160a01b03909116815260200161040b565b34801561052457600080fd5b506104886105333660046149dc565b6001600160a01b031660009081526007602052604090205460ff1690565b34801561055d57600080fd5b506103a661056c366004614954565b611323565b34801561057d57600080fd5b506103a661058c366004614a9a565b6114ba565b34801561059d57600080fd5b5061042a6105ac3660046149dc565b600e6020526000908152604090205481565b3480156105ca57600080fd5b506103a66105d93660046149f7565b61152e565b3480156105ea57600080fd5b506103a66105f9366004614ab5565b6115bb565b34801561060a57600080fd5b5061042a60095481565b34801561062057600080fd5b5060065460ff16610488565b34801561063857600080fd5b5061042a6106473660046149dc565b600a6020526000908152604090205481565b34801561066557600080fd5b5061042a6106743660046149dc565b60176020526000908152604090205481565b34801561069257600080fd5b5061042a60035481565b3480156106a857600080fd5b506103a66106b7366004614af5565b61177c565b3480156106c857600080fd5b506103a66106d73660046149dc565b611868565b3480156106e857600080fd5b506103a66118c8565b6103a66106ff3660046149f7565b6118d1565b34801561071057600080fd5b5061048861071f3660046149dc565b60076020526000908152604090205460ff1681565b34801561074057600080fd5b506103a661074f3660046149dc565b611b82565b34801561076057600080fd5b506103a6611be2565b34801561077557600080fd5b506103a6610784366004614954565b611c49565b34801561079557600080fd5b506010546107aa9067ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161040b565b3480156107cf57600080fd5b506000546001600160a01b0316610500565b3480156107ed57600080fd5b5061042a60045481565b34801561080357600080fd5b506103a66108123660046149f7565b611de0565b34801561082357600080fd5b506103a66108323660046149dc565b611e4e565b34801561084357600080fd5b506103a6610852366004614c23565b611ec7565b34801561086357600080fd5b506103a6610872366004614d12565b61220e565b34801561088357600080fd5b506103a6610892366004614954565b61235b565b3480156108a357600080fd5b506108e66108b23660046149f7565b600d6020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919092169184565b604080516001600160a01b03958616815294909316602085015291830152606082015260800161040b565b34801561091d57600080fd5b5061042a600f5481565b34801561093357600080fd5b5061042a60145481565b34801561094957600080fd5b5061042a6109583660046149dc565b600b6020526000908152604090205481565b34801561097657600080fd5b506103a6610985366004614d7f565b61241b565b34801561099657600080fd5b5061042a6109a53660046149dc565b60116020526000908152604090205481565b3480156109c357600080fd5b506103a66109d2366004614c23565b612571565b3480156109e357600080fd5b506103a66109f23660046149f7565b612896565b348015610a0357600080fd5b5061042a60015481565b348015610a1957600080fd5b506103a66128f3565b348015610a2e57600080fd5b50610488610a3d3660046149f7565b60126020526000908152604090205460ff1681565b348015610a5e57600080fd5b50610488610a6d3660046149dc565b60086020526000908152604090205460ff1681565b348015610a8e57600080fd5b50610488610a9d3660046149dc565b6001600160a01b031660009081526008602052604090205460ff1690565b348015610ac757600080fd5b506103a6610ad6366004614954565b6128fc565b348015610ae757600080fd5b506103a6610af63660046149dc565b612a93565b348015610b0757600080fd5b506103a6610b163660046149f7565b612af3565b348015610b2757600080fd5b506103a6610b363660046149dc565b612bac565b348015610b4757600080fd5b5061042a610b563660046149dc565b600c6020526000908152604090205481565b348015610b7457600080fd5b5061042a610b833660046149dc565b60166020526000908152604090205481565b3360009081526008602052604090205460ff16610bf25760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b60448201526064015b60405180910390fd5b828114610c335760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d3157828282818110610c5057610c50614e7f565b9050602002013560166000878785818110610c6d57610c6d614e7f565b9050602002016020810190610c8291906149dc565b6001600160a01b031681526020810191909152604001600020557f8b59d386e660418a48d742213ad5ce7c4dd51ae81f30e4e2c387f17d907010c9858583818110610ccf57610ccf614e7f565b9050602002016020810190610ce491906149dc565b848484818110610cf657610cf6614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610d2981614eab565b915050610c36565b5050505050565b3360009081526008602052604090205460ff16610d905760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b828114610dd15760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d3157828282818110610dee57610dee614e7f565b90506020020135600e6000878785818110610e0b57610e0b614e7f565b9050602002016020810190610e2091906149dc565b6001600160a01b031681526020810191909152604001600020557fceaad6533bfb481492fb3e08ef19297f46611b8fa9de5ef4cf8dc23a56ad09ce858583818110610e6d57610e6d614e7f565b9050602002016020810190610e8291906149dc565b848484818110610e9457610e94614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610ec781614eab565b915050610dd4565b33610ee26000546001600160a01b031690565b6001600160a01b031614610f265760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b600454610f339042614ec4565b60038190556040519081527f68e825132f7d4bc837dea2d64ac9fc19912bf0224b67f9317d8f1a917f5304a1906020015b60405180910390a1565b33610f816000546001600160a01b031690565b6001600160a01b031614610fc55760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b610fce81612c88565b50565b3360009081526008602052604090205460ff166110295760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b600f8190556040518181527fc0a39f234199b125fb93713c4d067bdcebbf691087f87b79c0feb92b156ba8b6906020015b60405180910390a150565b6002600554036110b75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be9565b600260055560065460ff16156111025760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b8334146111435760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840dad2e6dac2e8c6d608b1b6044820152606401610be9565b6013546001600160a01b031661119b5760405162461bcd60e51b815260206004820152601360248201527f4e61746976652077726170206e6f7420736574000000000000000000000000006044820152606401610be9565b6013546000906111b99087906001600160a01b031687878787612d45565b9050601360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b15801561120b57600080fd5b505af115801561121f573d6000803e3d6000fd5b5050601354604080518681523360208201526001600160a01b03808d1692820192909252911660608201526080810189905267ffffffffffffffff80891660a0830152871660c082015263ffffffff861660e08201527f89d8051e597ab4178a863a5190407b98abfeff406aa8db90c59af76612e58f0193506101000191506112a59050565b60405180910390a15050600160055550505050565b3360009081526007602052604090205460ff166113195760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610be9565b611321612f78565b565b3360009081526008602052604090205460ff1661137b5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b8281146113bc5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d31578282828181106113d9576113d9614e7f565b90506020020135600b60008787858181106113f6576113f6614e7f565b905060200201602081019061140b91906149dc565b6001600160a01b031681526020810191909152604001600020557f608e49c22994f20b5d3496dca088b88dfd81b4a3e8cc3809ea1e10a320107e8985858381811061145857611458614e7f565b905060200201602081019061146d91906149dc565b84848481811061147f5761147f614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806114b281614eab565b9150506113bf565b3360009081526008602052604090205460ff166115125760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b6018805463ffffffff191663ffffffff92909216919091179055565b3360009081526008602052604090205460ff166115865760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b60098190556040518181527f2664fec2ff76486ac58ed087310855b648b15b9d19f3de8529e95f7c46b7d6b39060200161105a565b60026005540361160d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be9565b600260055560065460ff16156116585760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b6001600160a01b03821660009081526011602052604090205481116116b25760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610be9565b60108054600191906000906116d290849067ffffffffffffffff16614ed7565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611718333083856001600160a01b031661300f909392919063ffffffff16565b6010546040805167ffffffffffffffff90921682523360208301526001600160a01b0384168282015260608201839052517fd5d28426c3248963b1719df49aa4c665120372e02c8249bbea03d019c39ce7649181900360800190a150506001600555565b6000848484846040516020016117959493929190614f67565b60405160208183030381529060405280519060200120905080600154146117fe5760405162461bcd60e51b815260206004820152601860248201527f4d69736d617463682063757272656e74207369676e65727300000000000000006044820152606401610be9565b87516020808a0191909120604080517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081850152603c8082019390935281518082039093018352605c019052805191012061185e908888888888886130a7565b5050505050505050565b3361187b6000546001600160a01b031690565b6001600160a01b0316146118bf5760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b610fce816133dc565b611321336133dc565b6002600554036119235760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be9565b600260055560065460ff161561196e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b8034146119af5760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840dad2e6dac2e8c6d608b1b6044820152606401610be9565b6013546001600160a01b0316611a075760405162461bcd60e51b815260206004820152601360248201527f4e61746976652077726170206e6f7420736574000000000000000000000000006044820152606401610be9565b6013546001600160a01b03166000908152601160205260409020548111611a635760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610be9565b6010805460019190600090611a8390849067ffffffffffffffff16614ed7565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550601360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611af957600080fd5b505af1158015611b0d573d6000803e3d6000fd5b50506010546013546040805167ffffffffffffffff90931683523360208401526001600160a01b0390911690820152606081018590527fd5d28426c3248963b1719df49aa4c665120372e02c8249bbea03d019c39ce76493506080019150611b729050565b60405180910390a1506001600555565b33611b956000546001600160a01b031690565b6001600160a01b031614611bd95760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b610fce81613495565b3360009081526007602052604090205460ff16611c415760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610be9565b611321613552565b3360009081526008602052604090205460ff16611ca15760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b828114611ce25760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d3157828282818110611cff57611cff614e7f565b9050602002013560176000878785818110611d1c57611d1c614e7f565b9050602002016020810190611d3191906149dc565b6001600160a01b031681526020810191909152604001600020557f4f12d1a5bfb3ccd3719255d4d299d808d50cdca9a0a5c2b3a5aaa7edde73052c858583818110611d7e57611d7e614e7f565b9050602002016020810190611d9391906149dc565b848484818110611da557611da5614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180611dd881614eab565b915050611ce5565b60065460ff1615611e265760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b6000611e31826135cd565b9050611e4a816000015182602001518360400151613792565b5050565b33611e616000546001600160a01b031690565b6001600160a01b031614611ea55760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b60065460ff1615611f0d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b60004630604051602001611f6392919091825260601b6bffffffffffffffffffffffff191660208201527f57697468647261774d73670000000000000000000000000000000000000000006034820152603f0190565b604051602081830303815290604052805190602001209050611fad818a8a604051602001611f9393929190614f88565b60405160208183030381529060405288888888888861177c565b6000611fee8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506138c492505050565b905060008160000151826020015183604001518460600151856080015160405160200161206795949392919060c095861b6001600160c01b031990811682529490951b9093166008850152606091821b6bffffffffffffffffffffffff199081166010860152911b166024830152603882015260580190565b60408051601f1981840301815291815281516020928301206000818152601290935291205490915060ff16156120df5760405162461bcd60e51b815260206004820152601a60248201527f776974686472617720616c7265616479207375636365656465640000000000006044820152606401610be9565b6000818152601260205260409020805460ff191660011790556060820151608083015161210c9190613a1e565b60608201516001600160a01b03166000908152600e6020526040902054801580159061213b5750808360800151115b1561215d5761215882846040015185606001518660800151613b3c565b612174565b612174836040015184606001518560800151613792565b7f48a1ab26f3aa7b62bb6b6e8eed182f292b84eb7b006c0254386b268af20774be8284602001518560400151866060015187608001518860a001516040516121f89695949392919095865267ffffffffffffffff9490941660208601526001600160a01b03928316604086015291166060840152608083015260a082015260c00190565b60405180910390a1505050505050505050505050565b6002600554036122605760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be9565b600260055560065460ff16156122ab5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b60006122bb878787878787612d45565b90506122d26001600160a01b03871633308861300f565b604080518281523360208201526001600160a01b0389811682840152881660608201526080810187905267ffffffffffffffff86811660a0830152851660c082015263ffffffff841660e082015290517f89d8051e597ab4178a863a5190407b98abfeff406aa8db90c59af76612e58f01918190036101000190a1505060016005555050505050565b3361236e6000546001600160a01b031690565b6001600160a01b0316146123b25760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b60035442116124035760405162461bcd60e51b815260206004820152601460248201527f6e6f742072656163682072657365742074696d650000000000000000000000006044820152606401610be9565b60001960035561241584848484613c4f565b50505050565b6002548b1161246c5760405162461bcd60e51b815260206004820152601e60248201527f547269676765722074696d65206973206e6f7420696e6372656173696e6700006044820152606401610be9565b61247842610e10614ec4565b8b106124c65760405162461bcd60e51b815260206004820152601960248201527f547269676765722074696d6520697320746f6f206c61726765000000000000006044820152606401610be9565b6000463060405160200161251c92919091825260601b6bffffffffffffffffffffffff191660208201527f5570646174655369676e65727300000000000000000000000000000000000000603482015260410190565b604051602081830303815290604052805190602001209050612552818d8d8d8d8d604051602001611f9396959493929190614fa2565b61255e8b8b8b8b613c4f565b5050506002989098555050505050505050565b60065460ff16156125b75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b6000463060405160200161260d92919091825260601b6bffffffffffffffffffffffff191660208201527f52656c6179000000000000000000000000000000000000000000000000000000603482015260390190565b60405160208183030381529060405280519060200120905061263d818a8a604051602001611f9393929190614f88565b600061267e8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613df992505050565b8051602080830151604080850151606080870151608088015160a089015160c0808b015187519a861b6bffffffffffffffffffffffff199081168c8c015298861b891660348c01529590941b9096166048890152605c880191909152811b6001600160c01b0319908116607c88015293901b9092166084850152608c808501929092528051808503909201825260ac909301835280519082012060008181526015909252919020549192509060ff161561276c5760405162461bcd60e51b815260206004820152600f60248201526e7472616e736665722065786973747360881b6044820152606401610be9565b60008181526015602052604090819020805460ff1916600117905582015160608301516127999190613a1e565b6040808301516001600160a01b03166000908152600e602052205480158015906127c65750808360600151115b156127e8576127e382846020015185604001518660600151613b3c565b6127ff565b6127ff836020015184604001518560600151613792565b7f79fa08de5149d912dce8e5e8da7a7c17ccdf23dd5d3bfe196802e6eb86347c7c82846000015185602001518660400151876060015188608001518960c001516040516121f897969594939291909687526001600160a01b0395861660208801529385166040870152919093166060850152608084019290925267ffffffffffffffff9190911660a083015260c082015260e00190565b3360009081526008602052604090205460ff166128ee5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b601455565b61132133613f6a565b3360009081526008602052604090205460ff166129545760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b8281146129955760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d31578282828181106129b2576129b2614e7f565b90506020020135601160008787858181106129cf576129cf614e7f565b90506020020160208101906129e491906149dc565b6001600160a01b031681526020810191909152604001600020557fc56b0d14c4940515800d94ebbd0f3f5d8cc58ba1109c12536bd993b72e466e4f858583818110612a3157612a31614e7f565b9050602002016020810190612a4691906149dc565b848484818110612a5857612a58614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180612a8b81614eab565b915050612998565b33612aa66000546001600160a01b031690565b6001600160a01b031614612aea5760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b610fce81613f6a565b33612b066000546001600160a01b031690565b6001600160a01b031614612b4a5760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b6004548111612ba75760405162461bcd60e51b815260206004820152602360248201527f6e6f7469636520706572696f642063616e206f6e6c7920626520696e637265616044820152621cd95960ea1b6064820152608401610be9565b600455565b33612bbf6000546001600160a01b031690565b6001600160a01b031614612c035760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b6001600160a01b038116612c7f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610be9565b610fce81614023565b6001600160a01b03811660009081526008602052604090205460ff1615612cf15760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f7200000000006044820152606401610be9565b6001600160a01b038116600081815260086020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b5910161105a565b6001600160a01b0385166000908152601660205260408120548511612d9f5760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610be9565b6001600160a01b0386166000908152601760205260409020541580612ddc57506001600160a01b0386166000908152601760205260409020548511155b612e285760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f206c61726765000000000000000000000000000000006044820152606401610be9565b60185463ffffffff90811690831611612e835760405162461bcd60e51b815260206004820152601660248201527f6d617820736c69707061676520746f6f20736d616c6c000000000000000000006044820152606401610be9565b6040516bffffffffffffffffffffffff1933606090811b8216602084015289811b8216603484015288901b166048820152605c81018690526001600160c01b031960c086811b8216607c84015285811b8216608484015246901b16608c82015260009060940160408051601f1981840301815291815281516020928301206000818152601590935291205490915060ff1615612f535760405162461bcd60e51b815260206004820152600f60248201526e7472616e736665722065786973747360881b6044820152606401610be9565b6000818152601560205260409020805460ff1916600117905590509695505050505050565b60065460ff16612fca5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610be9565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610f64565b6040516001600160a01b03808516602483015283166044820152606481018290526124159085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614073565b8281146131025760405162461bcd60e51b815260206004820152602360248201527f7369676e65727320616e6420706f77657273206c656e677468206e6f74206d616044820152620e8c6d60eb1b6064820152608401610be9565b6000805b848110156131465783838281811061312057613120614e7f565b90506020020135826131329190614ec4565b91508061313e81614eab565b915050613106565b5060006003613156836002614fca565b6131609190614fe1565b61316b906001614ec4565b905060008080805b8a81101561338a5760006131f68d8d8481811061319257613192614e7f565b90506020028101906131a49190615003565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f61415890919063ffffffff16565b9050836001600160a01b0316816001600160a01b0316116132595760405162461bcd60e51b815260206004820152601e60248201527f7369676e657273206e6f7420696e20617363656e64696e67206f7264657200006044820152606401610be9565b8093505b8a8a8481811061326f5761326f614e7f565b905060200201602081019061328491906149dc565b6001600160a01b0316816001600160a01b031611156132fe576132a8600184614ec4565b92508983106132f95760405162461bcd60e51b815260206004820152601060248201527f7369676e6572206e6f7420666f756e64000000000000000000000000000000006044820152606401610be9565b61325d565b8a8a8481811061331057613310614e7f565b905060200201602081019061332591906149dc565b6001600160a01b0316816001600160a01b0316036133645788888481811061334f5761334f614e7f565b90506020020135856133619190614ec4565b94505b85851061337757505050505050506133d3565b508061338281614eab565b915050613173565b5060405162461bcd60e51b815260206004820152601260248201527f71756f72756d206e6f74207265616368656400000000000000000000000000006044820152606401610be9565b50505050505050565b6001600160a01b03811660009081526007602052604090205460ff166134445760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610be9565b6001600160a01b038116600081815260076020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e910161105a565b6001600160a01b03811660009081526007602052604090205460ff16156134fe5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610be9565b6001600160a01b038116600081815260076020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8910161105a565b60065460ff16156135985760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612ff73390565b6040805160808101825260008082526020820181905291810182905260608101919091526000828152600d6020908152604091829020825160808101845281546001600160a01b039081168252600183015416928101929092526002810154928201929092526003909101546060820181905261368c5760405162461bcd60e51b815260206004820152601a60248201527f64656c61796564207472616e73666572206e6f742065786973740000000000006044820152606401610be9565b600f54816060015161369e9190614ec4565b42116136ec5760405162461bcd60e51b815260206004820152601d60248201527f64656c61796564207472616e73666572207374696c6c206c6f636b65640000006044820152606401610be9565b6000838152600d6020908152604080832080546001600160a01b03199081168255600182018054909116905560028101849055600301929092558251908301518383015192517f3b40e5089937425d14cdd96947e5661868357e224af59bd8b24a4b8a330d44269361378493889390929091909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a192915050565b6013546001600160a01b03908116908316036138ab57601354604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156137ee57600080fd5b505af1158015613802573d6000803e3d6000fd5b5050601454604051600093506001600160a01b0387169250849084818181858888f193505050503d8060008114613855576040519150601f19603f3d011682016040523d82523d6000602084013e61385a565b606091505b50509050806124155760405162461bcd60e51b815260206004820152601b60248201527f6661696c656420746f2073656e64206e617469766520746f6b656e00000000006044820152606401610be9565b6138bf6001600160a01b038316848361417e565b505050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b60208301515183511015613a1657613922836141ae565b90925090508160010361394957613938836141e8565b67ffffffffffffffff16845261390b565b8160020361396e5761395a836141e8565b67ffffffffffffffff16602085015261390b565b8160030361399a5761398761398284614263565b614320565b6001600160a01b0316604085015261390b565b816004036139c1576139ae61398284614263565b6001600160a01b0316606085015261390b565b816005036139e4576139da6139d584614263565b61432b565b608085015261390b565b81600603613a07576139fd6139f884614263565b614362565b60a085015261390b565b613a11838261437a565b61390b565b505050919050565b600954600003613a2c575050565b6001600160a01b0382166000908152600b602052604081205490819003613a5257505050565b6001600160a01b0383166000908152600a602052604081205460095490914291613a7c8184614fe1565b613a869190614fca565b6001600160a01b0387166000908152600c6020526040902054909150811115613ab157849250613abe565b613abb8584614ec4565b92505b83831115613b0e5760405162461bcd60e51b815260206004820152601260248201527f766f6c756d6520657863656564732063617000000000000000000000000000006044820152606401610be9565b506001600160a01b039094166000908152600a6020908152604080832093909355600c905220929092555050565b6000848152600d602052604090206003015415613b9b5760405162461bcd60e51b815260206004820152601f60248201527f64656c61796564207472616e7366657220616c726561647920657869737473006044820152606401610be9565b604080516080810182526001600160a01b0380861682528481166020808401918252838501868152426060860190815260008b8152600d90935291869020945185549085166001600160a01b031991821617865592516001860180549190951693169290921790925551600283015551600390910155517fcbcfffe5102114216a85d3aceb14ad4b81a3935b1b5c468fadf3889eb9c5dce690613c419086815260200190565b60405180910390a150505050565b828114613caa5760405162461bcd60e51b815260206004820152602360248201527f7369676e65727320616e6420706f77657273206c656e677468206e6f74206d616044820152620e8c6d60eb1b6064820152608401610be9565b6000805b84811015613d8357816001600160a01b0316868683818110613cd257613cd2614e7f565b9050602002016020810190613ce791906149dc565b6001600160a01b031611613d485760405162461bcd60e51b815260206004820152602260248201527f4e6577207369676e657273206e6f7420696e20617363656e64696e67206f726460448201526132b960f11b6064820152608401610be9565b858582818110613d5a57613d5a614e7f565b9050602002016020810190613d6f91906149dc565b915080613d7b81614eab565b915050613cae565b5084848484604051602001613d9b9493929190614f67565b60408051601f198184030181529082905280516020909101206001557ff126123539a68393c55697f617e7d1148e371988daed246c2f41da99965a23f890613dea90879087908790879061504a565b60405180910390a15050505050565b6040805160e08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905283518085019094528184528301849052909190805b60208301515183511015613a1657613e5e836141ae565b909250905081600103613e8757613e7761398284614263565b6001600160a01b03168452613e47565b81600203613eae57613e9b61398284614263565b6001600160a01b03166020850152613e47565b81600303613ed557613ec261398284614263565b6001600160a01b03166040850152613e47565b81600403613ef357613ee96139d584614263565b6060850152613e47565b81600503613f1857613f04836141e8565b67ffffffffffffffff166080850152613e47565b81600603613f3d57613f29836141e8565b67ffffffffffffffff1660a0850152613e47565b81600703613f5b57613f516139f884614263565b60c0850152613e47565b613f65838261437a565b613e47565b6001600160a01b03811660009081526008602052604090205460ff16613fd25760405162461bcd60e51b815260206004820152601760248201527f4163636f756e74206973206e6f7420676f7665726e6f720000000000000000006044820152606401610be9565b6001600160a01b038116600081815260086020908152604091829020805460ff1916905590519182527f1ebe834e73d60a5fec822c1e1727d34bc79f2ad977ed504581cc1822fe20fb5b910161105a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006140c8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166143ea9092919063ffffffff16565b8051909150156138bf57808060200190518101906140e691906150c6565b6138bf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610be9565b60008060006141678585614403565b9150915061417481614471565b5090505b92915050565b6040516001600160a01b0383166024820152604481018290526138bf90849063a9059cbb60e01b90606401613043565b60008060006141bc846141e8565b90506141c9600882614fe1565b92508060071660058111156141e0576141e06150e8565b915050915091565b602080820151825181019091015160009182805b600a8110156103815783811a9150614215816007614fca565b82607f16901b851794508160801660000361425157614235816001614ec4565b86518790614244908390614ec4565b9052509395945050505050565b8061425b81614eab565b9150506141fc565b60606000614270836141e8565b905060008184600001516142849190614ec4565b905083602001515181111561429857600080fd5b8167ffffffffffffffff8111156142b1576142b1614adf565b6040519080825280601f01601f1916602001820160405280156142db576020820181803683370190505b50602080860151865192955091818601919083010160005b8581101561431557818101518382015261430e602082614ec4565b90506142f3565b505050935250919050565b600061417882614627565b600060208251111561433c57600080fd5b602082015190508151602061435191906150fe565b61435c906008614fca565b1c919050565b6000815160201461437257600080fd5b506020015190565b600081600581111561438e5761438e6150e8565b0361439c576138bf826141e8565b60028160058111156143b0576143b06150e8565b036103815760006143c0836141e8565b905080836000018181516143d49190614ec4565b905250602083015151835111156138bf57600080fd5b60606143f9848460008561464f565b90505b9392505050565b60008082516041036144395760208301516040840151606085015160001a61442d87828585614797565b9450945050505061446a565b82516040036144625760208301516040840151614457868383614884565b93509350505061446a565b506000905060025b9250929050565b6000816004811115614485576144856150e8565b0361448d5750565b60018160048111156144a1576144a16150e8565b036144ee5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610be9565b6002816004811115614502576145026150e8565b0361454f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610be9565b6003816004811115614563576145636150e8565b036145bb5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610be9565b60048160048111156145cf576145cf6150e8565b03610fce5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610be9565b6000815160141461463757600080fd5b50602001516c01000000000000000000000000900490565b6060824710156146c75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610be9565b6001600160a01b0385163b61471e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610be9565b600080866001600160a01b0316858760405161473a9190615135565b60006040518083038185875af1925050503d8060008114614777576040519150601f19603f3d011682016040523d82523d6000602084013e61477c565b606091505b509150915061478c8282866148d6565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156147ce575060009050600361487b565b8460ff16601b141580156147e657508460ff16601c14155b156147f7575060009050600461487b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561484b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166148745760006001925092505061487b565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816148ba60ff86901c601b614ec4565b90506148c887828885614797565b935093505050935093915050565b606083156148e55750816143fc565b8251156148f55782518084602001fd5b8160405162461bcd60e51b8152600401610be99190615151565b60008083601f84011261492157600080fd5b50813567ffffffffffffffff81111561493957600080fd5b6020830191508360208260051b850101111561446a57600080fd5b6000806000806040858703121561496a57600080fd5b843567ffffffffffffffff8082111561498257600080fd5b61498e8883890161490f565b909650945060208701359150808211156149a757600080fd5b506149b48782880161490f565b95989497509550505050565b80356001600160a01b03811681146149d757600080fd5b919050565b6000602082840312156149ee57600080fd5b6143fc826149c0565b600060208284031215614a0957600080fd5b5035919050565b803567ffffffffffffffff811681146149d757600080fd5b803563ffffffff811681146149d757600080fd5b600080600080600060a08688031215614a5457600080fd5b614a5d866149c0565b945060208601359350614a7260408701614a10565b9250614a8060608701614a10565b9150614a8e60808701614a28565b90509295509295909350565b600060208284031215614aac57600080fd5b6143fc82614a28565b60008060408385031215614ac857600080fd5b614ad1836149c0565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060006080888a031215614b1057600080fd5b873567ffffffffffffffff80821115614b2857600080fd5b818a0191508a601f830112614b3c57600080fd5b813581811115614b4e57614b4e614adf565b604051601f8201601f19908116603f01168101908382118183101715614b7657614b76614adf565b816040528281528d6020848701011115614b8f57600080fd5b82602086016020830137600094508460208483010152809b5050505060208a013581811115614bbc578283fd5b614bc88c828d0161490f565b90995097505060408a013581811115614bdf578283fd5b614beb8c828d0161490f565b90975095505060608a013581811115614c02578283fd5b614c0e8c828d0161490f565b9a9d999c50979a509598949794955050505050565b6000806000806000806000806080898b031215614c3f57600080fd5b883567ffffffffffffffff80821115614c5757600080fd5b818b0191508b601f830112614c6b57600080fd5b813581811115614c7a57600080fd5b8c6020828501011115614c8c57600080fd5b60209283019a509850908a01359080821115614ca757600080fd5b614cb38c838d0161490f565b909850965060408b0135915080821115614ccc57600080fd5b614cd88c838d0161490f565b909650945060608b0135915080821115614cf157600080fd5b50614cfe8b828c0161490f565b999c989b5096995094979396929594505050565b60008060008060008060c08789031215614d2b57600080fd5b614d34876149c0565b9550614d42602088016149c0565b945060408701359350614d5760608801614a10565b9250614d6560808801614a10565b9150614d7360a08801614a28565b90509295509295509295565b600080600080600080600080600080600060c08c8e031215614da057600080fd5b8b359a5067ffffffffffffffff8060208e01351115614dbe57600080fd5b614dce8e60208f01358f0161490f565b909b50995060408d0135811015614de457600080fd5b614df48e60408f01358f0161490f565b909950975060608d0135811015614e0a57600080fd5b614e1a8e60608f01358f0161490f565b909750955060808d0135811015614e3057600080fd5b614e408e60808f01358f0161490f565b909550935060a08d0135811015614e5657600080fd5b50614e678d60a08e01358e0161490f565b81935080925050509295989b509295989b9093969950565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201614ebd57614ebd614e95565b5060010190565b8082018082111561417857614178614e95565b67ffffffffffffffff818116838216019080821115614ef857614ef8614e95565b5092915050565b60008160005b84811015614f34576001600160a01b03614f1e836149c0565b1686526020958601959190910190600101614f05565b5093949350505050565b60006001600160fb1b03831115614f5457600080fd5b8260051b80838637939093019392505050565b6000614f7e614f77838789614eff565b8486614f3e565b9695505050505050565b838152818360208301376000910160200190815292915050565b8681528560208201526000614fbe614f77604084018789614eff565b98975050505050505050565b808202811582820484141761417857614178614e95565b600082614ffe57634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e1984360301811261501a57600080fd5b83018035915067ffffffffffffffff82111561503557600080fd5b60200191503681900382131561446a57600080fd5b6040808252810184905260008560608301825b8781101561508b576001600160a01b03615076846149c0565b1682526020928301929091019060010161505d565b5083810360208501528481526001600160fb1b038511156150ab57600080fd5b8460051b915081866020830137016020019695505050505050565b6000602082840312156150d857600080fd5b815180151581146143fc57600080fd5b634e487b7160e01b600052602160045260246000fd5b8181038181111561417857614178614e95565b60005b8381101561512c578181015183820152602001615114565b50506000910152565b60008251615147818460208701615111565b9190910192915050565b6020815260008251806020840152615170816040850160208701615111565b601f01601f1916919091016040019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212201f580448276626679dfbd08ead02b1321fa261434071f9e38f43db7adf29f45264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061037a5760003560e01c80638456cb59116101d1578063ba2cb25c11610102578063e3eece26116100a0578063f20c922a1161006f578063f20c922a14610afb578063f2fde38b14610b1b578063f832138314610b3b578063f8b30d7d14610b6857600080fd5b8063e3eece2614610a52578063e43581b814610a82578063e999e5f414610abb578063eecdac8814610adb57600080fd5b8063cefe0df5116100dc578063cefe0df5146109d7578063d0790da9146109f7578063e026049c14610a0d578063e09ab42814610a2257600080fd5b8063ba2cb25c1461096a578063ccde517a1461098a578063cdd1b25d146109b757600080fd5b8063a21a92801161016f578063adc0d57f11610149578063adc0d57f14610897578063b1c94d9414610911578063b517b55014610927578063b5f2bc471461093d57600080fd5b8063a21a928014610837578063a5977fbb14610857578063a7bdf45a1461087757600080fd5b80638da5cb5b116101ab5780638da5cb5b146107c35780639b14d4c6146107e15780639e25fc5c146107f75780639ff9001a1461081757600080fd5b80638456cb5914610754578063878fe1ce1461076957806389e391271461078957600080fd5b806352532faa116102ab57806365a114f1116102495780636ef8d66d116102235780636ef8d66d146106dc5780637044c89e146106f157806380f51c121461070457806382dc1ec41461073457600080fd5b806365a114f114610686578063682dbc221461069c5780636b2c0f55146106bc57600080fd5b806357d775f81161028557806357d775f8146105fe5780635c975abb1461061457806360216b001461062c578063618ee0551461065957600080fd5b806352532faa1461059157806354eea796146105be57806356688700146105de57600080fd5b80633d57210711610318578063457bfa2f116102f2578063457bfa2f146104e057806346fbf68e1461051857806347b16c6c14610551578063482341261461057157600080fd5b80633d572107146104985780633f2e5fc3146104b85780633f4ba83a146104cb57600080fd5b80632fd1b0a4116103545780632fd1b0a4146103dd578063370fb47b146104145780633c4a25d0146104385780633c64f04b1461045857600080fd5b8063089927411461038657806317bdbae5146103a857806325c38b9f146103c857600080fd5b3661038157005b600080fd5b34801561039257600080fd5b506103a66103a1366004614954565b610b95565b005b3480156103b457600080fd5b506103a66103c3366004614954565b610d38565b3480156103d457600080fd5b506103a6610ecf565b3480156103e957600080fd5b506018546103fa9063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b34801561042057600080fd5b5061042a60025481565b60405190815260200161040b565b34801561044457600080fd5b506103a66104533660046149dc565b610f6e565b34801561046457600080fd5b506104886104733660046149f7565b60156020526000908152604090205460ff1681565b604051901515815260200161040b565b3480156104a457600080fd5b506103a66104b33660046149f7565b610fd1565b6103a66104c6366004614a3c565b611065565b3480156104d757600080fd5b506103a66112ba565b3480156104ec57600080fd5b50601354610500906001600160a01b031681565b6040516001600160a01b03909116815260200161040b565b34801561052457600080fd5b506104886105333660046149dc565b6001600160a01b031660009081526007602052604090205460ff1690565b34801561055d57600080fd5b506103a661056c366004614954565b611323565b34801561057d57600080fd5b506103a661058c366004614a9a565b6114ba565b34801561059d57600080fd5b5061042a6105ac3660046149dc565b600e6020526000908152604090205481565b3480156105ca57600080fd5b506103a66105d93660046149f7565b61152e565b3480156105ea57600080fd5b506103a66105f9366004614ab5565b6115bb565b34801561060a57600080fd5b5061042a60095481565b34801561062057600080fd5b5060065460ff16610488565b34801561063857600080fd5b5061042a6106473660046149dc565b600a6020526000908152604090205481565b34801561066557600080fd5b5061042a6106743660046149dc565b60176020526000908152604090205481565b34801561069257600080fd5b5061042a60035481565b3480156106a857600080fd5b506103a66106b7366004614af5565b61177c565b3480156106c857600080fd5b506103a66106d73660046149dc565b611868565b3480156106e857600080fd5b506103a66118c8565b6103a66106ff3660046149f7565b6118d1565b34801561071057600080fd5b5061048861071f3660046149dc565b60076020526000908152604090205460ff1681565b34801561074057600080fd5b506103a661074f3660046149dc565b611b82565b34801561076057600080fd5b506103a6611be2565b34801561077557600080fd5b506103a6610784366004614954565b611c49565b34801561079557600080fd5b506010546107aa9067ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161040b565b3480156107cf57600080fd5b506000546001600160a01b0316610500565b3480156107ed57600080fd5b5061042a60045481565b34801561080357600080fd5b506103a66108123660046149f7565b611de0565b34801561082357600080fd5b506103a66108323660046149dc565b611e4e565b34801561084357600080fd5b506103a6610852366004614c23565b611ec7565b34801561086357600080fd5b506103a6610872366004614d12565b61220e565b34801561088357600080fd5b506103a6610892366004614954565b61235b565b3480156108a357600080fd5b506108e66108b23660046149f7565b600d6020526000908152604090208054600182015460028301546003909301546001600160a01b0392831693919092169184565b604080516001600160a01b03958616815294909316602085015291830152606082015260800161040b565b34801561091d57600080fd5b5061042a600f5481565b34801561093357600080fd5b5061042a60145481565b34801561094957600080fd5b5061042a6109583660046149dc565b600b6020526000908152604090205481565b34801561097657600080fd5b506103a6610985366004614d7f565b61241b565b34801561099657600080fd5b5061042a6109a53660046149dc565b60116020526000908152604090205481565b3480156109c357600080fd5b506103a66109d2366004614c23565b612571565b3480156109e357600080fd5b506103a66109f23660046149f7565b612896565b348015610a0357600080fd5b5061042a60015481565b348015610a1957600080fd5b506103a66128f3565b348015610a2e57600080fd5b50610488610a3d3660046149f7565b60126020526000908152604090205460ff1681565b348015610a5e57600080fd5b50610488610a6d3660046149dc565b60086020526000908152604090205460ff1681565b348015610a8e57600080fd5b50610488610a9d3660046149dc565b6001600160a01b031660009081526008602052604090205460ff1690565b348015610ac757600080fd5b506103a6610ad6366004614954565b6128fc565b348015610ae757600080fd5b506103a6610af63660046149dc565b612a93565b348015610b0757600080fd5b506103a6610b163660046149f7565b612af3565b348015610b2757600080fd5b506103a6610b363660046149dc565b612bac565b348015610b4757600080fd5b5061042a610b563660046149dc565b600c6020526000908152604090205481565b348015610b7457600080fd5b5061042a610b833660046149dc565b60166020526000908152604090205481565b3360009081526008602052604090205460ff16610bf25760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b60448201526064015b60405180910390fd5b828114610c335760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d3157828282818110610c5057610c50614e7f565b9050602002013560166000878785818110610c6d57610c6d614e7f565b9050602002016020810190610c8291906149dc565b6001600160a01b031681526020810191909152604001600020557f8b59d386e660418a48d742213ad5ce7c4dd51ae81f30e4e2c387f17d907010c9858583818110610ccf57610ccf614e7f565b9050602002016020810190610ce491906149dc565b848484818110610cf657610cf6614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610d2981614eab565b915050610c36565b5050505050565b3360009081526008602052604090205460ff16610d905760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b828114610dd15760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d3157828282818110610dee57610dee614e7f565b90506020020135600e6000878785818110610e0b57610e0b614e7f565b9050602002016020810190610e2091906149dc565b6001600160a01b031681526020810191909152604001600020557fceaad6533bfb481492fb3e08ef19297f46611b8fa9de5ef4cf8dc23a56ad09ce858583818110610e6d57610e6d614e7f565b9050602002016020810190610e8291906149dc565b848484818110610e9457610e94614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180610ec781614eab565b915050610dd4565b33610ee26000546001600160a01b031690565b6001600160a01b031614610f265760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b600454610f339042614ec4565b60038190556040519081527f68e825132f7d4bc837dea2d64ac9fc19912bf0224b67f9317d8f1a917f5304a1906020015b60405180910390a1565b33610f816000546001600160a01b031690565b6001600160a01b031614610fc55760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b610fce81612c88565b50565b3360009081526008602052604090205460ff166110295760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b600f8190556040518181527fc0a39f234199b125fb93713c4d067bdcebbf691087f87b79c0feb92b156ba8b6906020015b60405180910390a150565b6002600554036110b75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be9565b600260055560065460ff16156111025760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b8334146111435760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840dad2e6dac2e8c6d608b1b6044820152606401610be9565b6013546001600160a01b031661119b5760405162461bcd60e51b815260206004820152601360248201527f4e61746976652077726170206e6f7420736574000000000000000000000000006044820152606401610be9565b6013546000906111b99087906001600160a01b031687878787612d45565b9050601360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b15801561120b57600080fd5b505af115801561121f573d6000803e3d6000fd5b5050601354604080518681523360208201526001600160a01b03808d1692820192909252911660608201526080810189905267ffffffffffffffff80891660a0830152871660c082015263ffffffff861660e08201527f89d8051e597ab4178a863a5190407b98abfeff406aa8db90c59af76612e58f0193506101000191506112a59050565b60405180910390a15050600160055550505050565b3360009081526007602052604090205460ff166113195760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610be9565b611321612f78565b565b3360009081526008602052604090205460ff1661137b5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b8281146113bc5760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d31578282828181106113d9576113d9614e7f565b90506020020135600b60008787858181106113f6576113f6614e7f565b905060200201602081019061140b91906149dc565b6001600160a01b031681526020810191909152604001600020557f608e49c22994f20b5d3496dca088b88dfd81b4a3e8cc3809ea1e10a320107e8985858381811061145857611458614e7f565b905060200201602081019061146d91906149dc565b84848481811061147f5761147f614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a1806114b281614eab565b9150506113bf565b3360009081526008602052604090205460ff166115125760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b6018805463ffffffff191663ffffffff92909216919091179055565b3360009081526008602052604090205460ff166115865760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b60098190556040518181527f2664fec2ff76486ac58ed087310855b648b15b9d19f3de8529e95f7c46b7d6b39060200161105a565b60026005540361160d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be9565b600260055560065460ff16156116585760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b6001600160a01b03821660009081526011602052604090205481116116b25760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610be9565b60108054600191906000906116d290849067ffffffffffffffff16614ed7565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611718333083856001600160a01b031661300f909392919063ffffffff16565b6010546040805167ffffffffffffffff90921682523360208301526001600160a01b0384168282015260608201839052517fd5d28426c3248963b1719df49aa4c665120372e02c8249bbea03d019c39ce7649181900360800190a150506001600555565b6000848484846040516020016117959493929190614f67565b60405160208183030381529060405280519060200120905080600154146117fe5760405162461bcd60e51b815260206004820152601860248201527f4d69736d617463682063757272656e74207369676e65727300000000000000006044820152606401610be9565b87516020808a0191909120604080517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081850152603c8082019390935281518082039093018352605c019052805191012061185e908888888888886130a7565b5050505050505050565b3361187b6000546001600160a01b031690565b6001600160a01b0316146118bf5760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b610fce816133dc565b611321336133dc565b6002600554036119235760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be9565b600260055560065460ff161561196e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b8034146119af5760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840dad2e6dac2e8c6d608b1b6044820152606401610be9565b6013546001600160a01b0316611a075760405162461bcd60e51b815260206004820152601360248201527f4e61746976652077726170206e6f7420736574000000000000000000000000006044820152606401610be9565b6013546001600160a01b03166000908152601160205260409020548111611a635760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610be9565b6010805460019190600090611a8390849067ffffffffffffffff16614ed7565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550601360009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015611af957600080fd5b505af1158015611b0d573d6000803e3d6000fd5b50506010546013546040805167ffffffffffffffff90931683523360208401526001600160a01b0390911690820152606081018590527fd5d28426c3248963b1719df49aa4c665120372e02c8249bbea03d019c39ce76493506080019150611b729050565b60405180910390a1506001600555565b33611b956000546001600160a01b031690565b6001600160a01b031614611bd95760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b610fce81613495565b3360009081526007602052604090205460ff16611c415760405162461bcd60e51b815260206004820152601460248201527f43616c6c6572206973206e6f74207061757365720000000000000000000000006044820152606401610be9565b611321613552565b3360009081526008602052604090205460ff16611ca15760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b828114611ce25760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d3157828282818110611cff57611cff614e7f565b9050602002013560176000878785818110611d1c57611d1c614e7f565b9050602002016020810190611d3191906149dc565b6001600160a01b031681526020810191909152604001600020557f4f12d1a5bfb3ccd3719255d4d299d808d50cdca9a0a5c2b3a5aaa7edde73052c858583818110611d7e57611d7e614e7f565b9050602002016020810190611d9391906149dc565b848484818110611da557611da5614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180611dd881614eab565b915050611ce5565b60065460ff1615611e265760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b6000611e31826135cd565b9050611e4a816000015182602001518360400151613792565b5050565b33611e616000546001600160a01b031690565b6001600160a01b031614611ea55760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b60065460ff1615611f0d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b60004630604051602001611f6392919091825260601b6bffffffffffffffffffffffff191660208201527f57697468647261774d73670000000000000000000000000000000000000000006034820152603f0190565b604051602081830303815290604052805190602001209050611fad818a8a604051602001611f9393929190614f88565b60405160208183030381529060405288888888888861177c565b6000611fee8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506138c492505050565b905060008160000151826020015183604001518460600151856080015160405160200161206795949392919060c095861b6001600160c01b031990811682529490951b9093166008850152606091821b6bffffffffffffffffffffffff199081166010860152911b166024830152603882015260580190565b60408051601f1981840301815291815281516020928301206000818152601290935291205490915060ff16156120df5760405162461bcd60e51b815260206004820152601a60248201527f776974686472617720616c7265616479207375636365656465640000000000006044820152606401610be9565b6000818152601260205260409020805460ff191660011790556060820151608083015161210c9190613a1e565b60608201516001600160a01b03166000908152600e6020526040902054801580159061213b5750808360800151115b1561215d5761215882846040015185606001518660800151613b3c565b612174565b612174836040015184606001518560800151613792565b7f48a1ab26f3aa7b62bb6b6e8eed182f292b84eb7b006c0254386b268af20774be8284602001518560400151866060015187608001518860a001516040516121f89695949392919095865267ffffffffffffffff9490941660208601526001600160a01b03928316604086015291166060840152608083015260a082015260c00190565b60405180910390a1505050505050505050505050565b6002600554036122605760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610be9565b600260055560065460ff16156122ab5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b60006122bb878787878787612d45565b90506122d26001600160a01b03871633308861300f565b604080518281523360208201526001600160a01b0389811682840152881660608201526080810187905267ffffffffffffffff86811660a0830152851660c082015263ffffffff841660e082015290517f89d8051e597ab4178a863a5190407b98abfeff406aa8db90c59af76612e58f01918190036101000190a1505060016005555050505050565b3361236e6000546001600160a01b031690565b6001600160a01b0316146123b25760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b60035442116124035760405162461bcd60e51b815260206004820152601460248201527f6e6f742072656163682072657365742074696d650000000000000000000000006044820152606401610be9565b60001960035561241584848484613c4f565b50505050565b6002548b1161246c5760405162461bcd60e51b815260206004820152601e60248201527f547269676765722074696d65206973206e6f7420696e6372656173696e6700006044820152606401610be9565b61247842610e10614ec4565b8b106124c65760405162461bcd60e51b815260206004820152601960248201527f547269676765722074696d6520697320746f6f206c61726765000000000000006044820152606401610be9565b6000463060405160200161251c92919091825260601b6bffffffffffffffffffffffff191660208201527f5570646174655369676e65727300000000000000000000000000000000000000603482015260410190565b604051602081830303815290604052805190602001209050612552818d8d8d8d8d604051602001611f9396959493929190614fa2565b61255e8b8b8b8b613c4f565b5050506002989098555050505050505050565b60065460ff16156125b75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b6000463060405160200161260d92919091825260601b6bffffffffffffffffffffffff191660208201527f52656c6179000000000000000000000000000000000000000000000000000000603482015260390190565b60405160208183030381529060405280519060200120905061263d818a8a604051602001611f9393929190614f88565b600061267e8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613df992505050565b8051602080830151604080850151606080870151608088015160a089015160c0808b015187519a861b6bffffffffffffffffffffffff199081168c8c015298861b891660348c01529590941b9096166048890152605c880191909152811b6001600160c01b0319908116607c88015293901b9092166084850152608c808501929092528051808503909201825260ac909301835280519082012060008181526015909252919020549192509060ff161561276c5760405162461bcd60e51b815260206004820152600f60248201526e7472616e736665722065786973747360881b6044820152606401610be9565b60008181526015602052604090819020805460ff1916600117905582015160608301516127999190613a1e565b6040808301516001600160a01b03166000908152600e602052205480158015906127c65750808360600151115b156127e8576127e382846020015185604001518660600151613b3c565b6127ff565b6127ff836020015184604001518560600151613792565b7f79fa08de5149d912dce8e5e8da7a7c17ccdf23dd5d3bfe196802e6eb86347c7c82846000015185602001518660400151876060015188608001518960c001516040516121f897969594939291909687526001600160a01b0395861660208801529385166040870152919093166060850152608084019290925267ffffffffffffffff9190911660a083015260c082015260e00190565b3360009081526008602052604090205460ff166128ee5760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b601455565b61132133613f6a565b3360009081526008602052604090205460ff166129545760405162461bcd60e51b815260206004820152601660248201527521b0b63632b91034b9903737ba1033b7bb32b93737b960511b6044820152606401610be9565b8281146129955760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b6044820152606401610be9565b60005b83811015610d31578282828181106129b2576129b2614e7f565b90506020020135601160008787858181106129cf576129cf614e7f565b90506020020160208101906129e491906149dc565b6001600160a01b031681526020810191909152604001600020557fc56b0d14c4940515800d94ebbd0f3f5d8cc58ba1109c12536bd993b72e466e4f858583818110612a3157612a31614e7f565b9050602002016020810190612a4691906149dc565b848484818110612a5857612a58614e7f565b604080516001600160a01b0390951685526020918202939093013590840152500160405180910390a180612a8b81614eab565b915050612998565b33612aa66000546001600160a01b031690565b6001600160a01b031614612aea5760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b610fce81613f6a565b33612b066000546001600160a01b031690565b6001600160a01b031614612b4a5760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b6004548111612ba75760405162461bcd60e51b815260206004820152602360248201527f6e6f7469636520706572696f642063616e206f6e6c7920626520696e637265616044820152621cd95960ea1b6064820152608401610be9565b600455565b33612bbf6000546001600160a01b031690565b6001600160a01b031614612c035760405162461bcd60e51b815260206004820181905260248201526000805160206151858339815191526044820152606401610be9565b6001600160a01b038116612c7f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610be9565b610fce81614023565b6001600160a01b03811660009081526008602052604090205460ff1615612cf15760405162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920676f7665726e6f7200000000006044820152606401610be9565b6001600160a01b038116600081815260086020908152604091829020805460ff1916600117905590519182527fdc5a48d79e2e147530ff63ecdbed5a5a66adb9d5cf339384d5d076da197c40b5910161105a565b6001600160a01b0385166000908152601660205260408120548511612d9f5760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b6044820152606401610be9565b6001600160a01b0386166000908152601760205260409020541580612ddc57506001600160a01b0386166000908152601760205260409020548511155b612e285760405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f206c61726765000000000000000000000000000000006044820152606401610be9565b60185463ffffffff90811690831611612e835760405162461bcd60e51b815260206004820152601660248201527f6d617820736c69707061676520746f6f20736d616c6c000000000000000000006044820152606401610be9565b6040516bffffffffffffffffffffffff1933606090811b8216602084015289811b8216603484015288901b166048820152605c81018690526001600160c01b031960c086811b8216607c84015285811b8216608484015246901b16608c82015260009060940160408051601f1981840301815291815281516020928301206000818152601590935291205490915060ff1615612f535760405162461bcd60e51b815260206004820152600f60248201526e7472616e736665722065786973747360881b6044820152606401610be9565b6000818152601560205260409020805460ff1916600117905590509695505050505050565b60065460ff16612fca5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610be9565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b039091168152602001610f64565b6040516001600160a01b03808516602483015283166044820152606481018290526124159085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152614073565b8281146131025760405162461bcd60e51b815260206004820152602360248201527f7369676e65727320616e6420706f77657273206c656e677468206e6f74206d616044820152620e8c6d60eb1b6064820152608401610be9565b6000805b848110156131465783838281811061312057613120614e7f565b90506020020135826131329190614ec4565b91508061313e81614eab565b915050613106565b5060006003613156836002614fca565b6131609190614fe1565b61316b906001614ec4565b905060008080805b8a81101561338a5760006131f68d8d8481811061319257613192614e7f565b90506020028101906131a49190615003565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508f61415890919063ffffffff16565b9050836001600160a01b0316816001600160a01b0316116132595760405162461bcd60e51b815260206004820152601e60248201527f7369676e657273206e6f7420696e20617363656e64696e67206f7264657200006044820152606401610be9565b8093505b8a8a8481811061326f5761326f614e7f565b905060200201602081019061328491906149dc565b6001600160a01b0316816001600160a01b031611156132fe576132a8600184614ec4565b92508983106132f95760405162461bcd60e51b815260206004820152601060248201527f7369676e6572206e6f7420666f756e64000000000000000000000000000000006044820152606401610be9565b61325d565b8a8a8481811061331057613310614e7f565b905060200201602081019061332591906149dc565b6001600160a01b0316816001600160a01b0316036133645788888481811061334f5761334f614e7f565b90506020020135856133619190614ec4565b94505b85851061337757505050505050506133d3565b508061338281614eab565b915050613173565b5060405162461bcd60e51b815260206004820152601260248201527f71756f72756d206e6f74207265616368656400000000000000000000000000006044820152606401610be9565b50505050505050565b6001600160a01b03811660009081526007602052604090205460ff166134445760405162461bcd60e51b815260206004820152601560248201527f4163636f756e74206973206e6f742070617573657200000000000000000000006044820152606401610be9565b6001600160a01b038116600081815260076020908152604091829020805460ff1916905590519182527fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e910161105a565b6001600160a01b03811660009081526007602052604090205460ff16156134fe5760405162461bcd60e51b815260206004820152601960248201527f4163636f756e7420697320616c726561647920706175736572000000000000006044820152606401610be9565b6001600160a01b038116600081815260076020908152604091829020805460ff1916600117905590519182527f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8910161105a565b60065460ff16156135985760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610be9565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612ff73390565b6040805160808101825260008082526020820181905291810182905260608101919091526000828152600d6020908152604091829020825160808101845281546001600160a01b039081168252600183015416928101929092526002810154928201929092526003909101546060820181905261368c5760405162461bcd60e51b815260206004820152601a60248201527f64656c61796564207472616e73666572206e6f742065786973740000000000006044820152606401610be9565b600f54816060015161369e9190614ec4565b42116136ec5760405162461bcd60e51b815260206004820152601d60248201527f64656c61796564207472616e73666572207374696c6c206c6f636b65640000006044820152606401610be9565b6000838152600d6020908152604080832080546001600160a01b03199081168255600182018054909116905560028101849055600301929092558251908301518383015192517f3b40e5089937425d14cdd96947e5661868357e224af59bd8b24a4b8a330d44269361378493889390929091909384526001600160a01b03928316602085015291166040830152606082015260800190565b60405180910390a192915050565b6013546001600160a01b03908116908316036138ab57601354604051632e1a7d4d60e01b8152600481018390526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156137ee57600080fd5b505af1158015613802573d6000803e3d6000fd5b5050601454604051600093506001600160a01b0387169250849084818181858888f193505050503d8060008114613855576040519150601f19603f3d011682016040523d82523d6000602084013e61385a565b606091505b50509050806124155760405162461bcd60e51b815260206004820152601b60248201527f6661696c656420746f2073656e64206e617469766520746f6b656e00000000006044820152606401610be9565b6138bf6001600160a01b038316848361417e565b505050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905283518085019094528184528301849052909190805b60208301515183511015613a1657613922836141ae565b90925090508160010361394957613938836141e8565b67ffffffffffffffff16845261390b565b8160020361396e5761395a836141e8565b67ffffffffffffffff16602085015261390b565b8160030361399a5761398761398284614263565b614320565b6001600160a01b0316604085015261390b565b816004036139c1576139ae61398284614263565b6001600160a01b0316606085015261390b565b816005036139e4576139da6139d584614263565b61432b565b608085015261390b565b81600603613a07576139fd6139f884614263565b614362565b60a085015261390b565b613a11838261437a565b61390b565b505050919050565b600954600003613a2c575050565b6001600160a01b0382166000908152600b602052604081205490819003613a5257505050565b6001600160a01b0383166000908152600a602052604081205460095490914291613a7c8184614fe1565b613a869190614fca565b6001600160a01b0387166000908152600c6020526040902054909150811115613ab157849250613abe565b613abb8584614ec4565b92505b83831115613b0e5760405162461bcd60e51b815260206004820152601260248201527f766f6c756d6520657863656564732063617000000000000000000000000000006044820152606401610be9565b506001600160a01b039094166000908152600a6020908152604080832093909355600c905220929092555050565b6000848152600d602052604090206003015415613b9b5760405162461bcd60e51b815260206004820152601f60248201527f64656c61796564207472616e7366657220616c726561647920657869737473006044820152606401610be9565b604080516080810182526001600160a01b0380861682528481166020808401918252838501868152426060860190815260008b8152600d90935291869020945185549085166001600160a01b031991821617865592516001860180549190951693169290921790925551600283015551600390910155517fcbcfffe5102114216a85d3aceb14ad4b81a3935b1b5c468fadf3889eb9c5dce690613c419086815260200190565b60405180910390a150505050565b828114613caa5760405162461bcd60e51b815260206004820152602360248201527f7369676e65727320616e6420706f77657273206c656e677468206e6f74206d616044820152620e8c6d60eb1b6064820152608401610be9565b6000805b84811015613d8357816001600160a01b0316868683818110613cd257613cd2614e7f565b9050602002016020810190613ce791906149dc565b6001600160a01b031611613d485760405162461bcd60e51b815260206004820152602260248201527f4e6577207369676e657273206e6f7420696e20617363656e64696e67206f726460448201526132b960f11b6064820152608401610be9565b858582818110613d5a57613d5a614e7f565b9050602002016020810190613d6f91906149dc565b915080613d7b81614eab565b915050613cae565b5084848484604051602001613d9b9493929190614f67565b60408051601f198184030181529082905280516020909101206001557ff126123539a68393c55697f617e7d1148e371988daed246c2f41da99965a23f890613dea90879087908790879061504a565b60405180910390a15050505050565b6040805160e08101825260008082526020808301829052828401829052606083018290526080830182905260a0830182905260c0830182905283518085019094528184528301849052909190805b60208301515183511015613a1657613e5e836141ae565b909250905081600103613e8757613e7761398284614263565b6001600160a01b03168452613e47565b81600203613eae57613e9b61398284614263565b6001600160a01b03166020850152613e47565b81600303613ed557613ec261398284614263565b6001600160a01b03166040850152613e47565b81600403613ef357613ee96139d584614263565b6060850152613e47565b81600503613f1857613f04836141e8565b67ffffffffffffffff166080850152613e47565b81600603613f3d57613f29836141e8565b67ffffffffffffffff1660a0850152613e47565b81600703613f5b57613f516139f884614263565b60c0850152613e47565b613f65838261437a565b613e47565b6001600160a01b03811660009081526008602052604090205460ff16613fd25760405162461bcd60e51b815260206004820152601760248201527f4163636f756e74206973206e6f7420676f7665726e6f720000000000000000006044820152606401610be9565b6001600160a01b038116600081815260086020908152604091829020805460ff1916905590519182527f1ebe834e73d60a5fec822c1e1727d34bc79f2ad977ed504581cc1822fe20fb5b910161105a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006140c8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166143ea9092919063ffffffff16565b8051909150156138bf57808060200190518101906140e691906150c6565b6138bf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610be9565b60008060006141678585614403565b9150915061417481614471565b5090505b92915050565b6040516001600160a01b0383166024820152604481018290526138bf90849063a9059cbb60e01b90606401613043565b60008060006141bc846141e8565b90506141c9600882614fe1565b92508060071660058111156141e0576141e06150e8565b915050915091565b602080820151825181019091015160009182805b600a8110156103815783811a9150614215816007614fca565b82607f16901b851794508160801660000361425157614235816001614ec4565b86518790614244908390614ec4565b9052509395945050505050565b8061425b81614eab565b9150506141fc565b60606000614270836141e8565b905060008184600001516142849190614ec4565b905083602001515181111561429857600080fd5b8167ffffffffffffffff8111156142b1576142b1614adf565b6040519080825280601f01601f1916602001820160405280156142db576020820181803683370190505b50602080860151865192955091818601919083010160005b8581101561431557818101518382015261430e602082614ec4565b90506142f3565b505050935250919050565b600061417882614627565b600060208251111561433c57600080fd5b602082015190508151602061435191906150fe565b61435c906008614fca565b1c919050565b6000815160201461437257600080fd5b506020015190565b600081600581111561438e5761438e6150e8565b0361439c576138bf826141e8565b60028160058111156143b0576143b06150e8565b036103815760006143c0836141e8565b905080836000018181516143d49190614ec4565b905250602083015151835111156138bf57600080fd5b60606143f9848460008561464f565b90505b9392505050565b60008082516041036144395760208301516040840151606085015160001a61442d87828585614797565b9450945050505061446a565b82516040036144625760208301516040840151614457868383614884565b93509350505061446a565b506000905060025b9250929050565b6000816004811115614485576144856150e8565b0361448d5750565b60018160048111156144a1576144a16150e8565b036144ee5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610be9565b6002816004811115614502576145026150e8565b0361454f5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610be9565b6003816004811115614563576145636150e8565b036145bb5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610be9565b60048160048111156145cf576145cf6150e8565b03610fce5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610be9565b6000815160141461463757600080fd5b50602001516c01000000000000000000000000900490565b6060824710156146c75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610be9565b6001600160a01b0385163b61471e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610be9565b600080866001600160a01b0316858760405161473a9190615135565b60006040518083038185875af1925050503d8060008114614777576040519150601f19603f3d011682016040523d82523d6000602084013e61477c565b606091505b509150915061478c8282866148d6565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156147ce575060009050600361487b565b8460ff16601b141580156147e657508460ff16601c14155b156147f7575060009050600461487b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561484b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166148745760006001925092505061487b565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816148ba60ff86901c601b614ec4565b90506148c887828885614797565b935093505050935093915050565b606083156148e55750816143fc565b8251156148f55782518084602001fd5b8160405162461bcd60e51b8152600401610be99190615151565b60008083601f84011261492157600080fd5b50813567ffffffffffffffff81111561493957600080fd5b6020830191508360208260051b850101111561446a57600080fd5b6000806000806040858703121561496a57600080fd5b843567ffffffffffffffff8082111561498257600080fd5b61498e8883890161490f565b909650945060208701359150808211156149a757600080fd5b506149b48782880161490f565b95989497509550505050565b80356001600160a01b03811681146149d757600080fd5b919050565b6000602082840312156149ee57600080fd5b6143fc826149c0565b600060208284031215614a0957600080fd5b5035919050565b803567ffffffffffffffff811681146149d757600080fd5b803563ffffffff811681146149d757600080fd5b600080600080600060a08688031215614a5457600080fd5b614a5d866149c0565b945060208601359350614a7260408701614a10565b9250614a8060608701614a10565b9150614a8e60808701614a28565b90509295509295909350565b600060208284031215614aac57600080fd5b6143fc82614a28565b60008060408385031215614ac857600080fd5b614ad1836149c0565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060006080888a031215614b1057600080fd5b873567ffffffffffffffff80821115614b2857600080fd5b818a0191508a601f830112614b3c57600080fd5b813581811115614b4e57614b4e614adf565b604051601f8201601f19908116603f01168101908382118183101715614b7657614b76614adf565b816040528281528d6020848701011115614b8f57600080fd5b82602086016020830137600094508460208483010152809b5050505060208a013581811115614bbc578283fd5b614bc88c828d0161490f565b90995097505060408a013581811115614bdf578283fd5b614beb8c828d0161490f565b90975095505060608a013581811115614c02578283fd5b614c0e8c828d0161490f565b9a9d999c50979a509598949794955050505050565b6000806000806000806000806080898b031215614c3f57600080fd5b883567ffffffffffffffff80821115614c5757600080fd5b818b0191508b601f830112614c6b57600080fd5b813581811115614c7a57600080fd5b8c6020828501011115614c8c57600080fd5b60209283019a509850908a01359080821115614ca757600080fd5b614cb38c838d0161490f565b909850965060408b0135915080821115614ccc57600080fd5b614cd88c838d0161490f565b909650945060608b0135915080821115614cf157600080fd5b50614cfe8b828c0161490f565b999c989b5096995094979396929594505050565b60008060008060008060c08789031215614d2b57600080fd5b614d34876149c0565b9550614d42602088016149c0565b945060408701359350614d5760608801614a10565b9250614d6560808801614a10565b9150614d7360a08801614a28565b90509295509295509295565b600080600080600080600080600080600060c08c8e031215614da057600080fd5b8b359a5067ffffffffffffffff8060208e01351115614dbe57600080fd5b614dce8e60208f01358f0161490f565b909b50995060408d0135811015614de457600080fd5b614df48e60408f01358f0161490f565b909950975060608d0135811015614e0a57600080fd5b614e1a8e60608f01358f0161490f565b909750955060808d0135811015614e3057600080fd5b614e408e60808f01358f0161490f565b909550935060a08d0135811015614e5657600080fd5b50614e678d60a08e01358e0161490f565b81935080925050509295989b509295989b9093969950565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201614ebd57614ebd614e95565b5060010190565b8082018082111561417857614178614e95565b67ffffffffffffffff818116838216019080821115614ef857614ef8614e95565b5092915050565b60008160005b84811015614f34576001600160a01b03614f1e836149c0565b1686526020958601959190910190600101614f05565b5093949350505050565b60006001600160fb1b03831115614f5457600080fd5b8260051b80838637939093019392505050565b6000614f7e614f77838789614eff565b8486614f3e565b9695505050505050565b838152818360208301376000910160200190815292915050565b8681528560208201526000614fbe614f77604084018789614eff565b98975050505050505050565b808202811582820484141761417857614178614e95565b600082614ffe57634e487b7160e01b600052601260045260246000fd5b500490565b6000808335601e1984360301811261501a57600080fd5b83018035915067ffffffffffffffff82111561503557600080fd5b60200191503681900382131561446a57600080fd5b6040808252810184905260008560608301825b8781101561508b576001600160a01b03615076846149c0565b1682526020928301929091019060010161505d565b5083810360208501528481526001600160fb1b038511156150ab57600080fd5b8460051b915081866020830137016020019695505050505050565b6000602082840312156150d857600080fd5b815180151581146143fc57600080fd5b634e487b7160e01b600052602160045260246000fd5b8181038181111561417857614178614e95565b60005b8381101561512c578181015183820152602001615114565b50506000910152565b60008251615147818460208701615111565b9190910192915050565b6020815260008251806020840152615170816040850160208701615111565b601f01601f1916919091016040019291505056fe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212201f580448276626679dfbd08ead02b1321fa261434071f9e38f43db7adf29f45264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(address,uint256)": {
        "params": {
          "_amount": "The amount to add.",
          "_token": "The address of the token."
        }
      },
      "addNativeLiquidity(uint256)": {
        "params": {
          "_amount": "The amount to add."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "relay(bytes,bytes[],address[],uint256[])": {
        "params": {
          "_powers": "The signing powers of the signers.",
          "_relayRequest": "The serialized Relay protobuf.",
          "_signers": "The sorted list of signers.",
          "_sigs": "The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by +2/3 of the bridge's current signing power to be delivered."
        }
      },
      "send(address,address,uint256,uint64,uint64,uint32)": {
        "params": {
          "_amount": "The amount of the transfer.",
          "_dstChainId": "The destination chain ID.",
          "_maxSlippage": "The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%. Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the transfer can be refunded.",
          "_nonce": "A number input to guarantee uniqueness of transferId. Can be timestamp in practice.",
          "_receiver": "The address of the receiver.",
          "_token": "The address of the token."
        }
      },
      "sendNative(address,uint256,uint64,uint64,uint32)": {
        "params": {
          "_amount": "The amount of the transfer.",
          "_dstChainId": "The destination chain ID.",
          "_maxSlippage": "The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%. Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the transfer can be refunded.",
          "_nonce": "A unique number. Can be timestamp in practice.",
          "_receiver": "The address of the receiver."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateSigners(uint256,address[],uint256[],bytes[],address[],uint256[])": {
        "params": {
          "_curPowers": "powers of current signers",
          "_curSigners": "sorted list of current signers",
          "_newSigners": "sorted list of new signers",
          "_sigs": "list of signatures sorted by signer addresses in ascending order"
        }
      },
      "verifySigs(bytes,bytes[],address[],uint256[])": {
        "params": {
          "_msg": "signed message",
          "_powers": "powers of current signers",
          "_signers": "sorted list of current signers",
          "_sigs": "list of signatures sorted by signer addresses in ascending order"
        }
      },
      "withdraw(bytes,bytes[],address[],uint256[])": {
        "params": {
          "_powers": "The signing powers of the signers.",
          "_signers": "The sorted list of signers.",
          "_sigs": "The list of signatures sorted by signing addresses in ascending order. A withdrawal must be signed-off by +2/3 of the bridge's current signing power to be delivered.",
          "_wdmsg": "The serialized Withdraw protobuf."
        }
      }
    },
    "title": "The liquidity-pool based bridge.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(address,uint256)": {
        "notice": "Add liquidity to the pool-based bridge. NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens."
      },
      "addNativeLiquidity(uint256)": {
        "notice": "Add native token liquidity to the pool-based bridge."
      },
      "relay(bytes,bytes[],address[],uint256[])": {
        "notice": "Relay a cross-chain transfer sent from a liquidity pool-based bridge on another chain."
      },
      "resetSigners(address[],uint256[])": {
        "notice": "reset signers, only used for init setup and emergency recovery"
      },
      "send(address,address,uint256,uint64,uint64,uint32)": {
        "notice": "Send a cross-chain transfer via the liquidity pool-based bridge. NOTE: This function DOES NOT SUPPORT fee-on-transfer / rebasing tokens."
      },
      "sendNative(address,uint256,uint64,uint64,uint32)": {
        "notice": "Send a cross-chain transfer via the liquidity pool-based bridge using the native token."
      },
      "updateSigners(uint256,address[],uint256[],bytes[],address[],uint256[])": {
        "notice": "Update new signers."
      },
      "verifySigs(bytes,bytes[],address[],uint256[])": {
        "notice": "Verifies that a message is signed by a quorum among the signers The sigs must be sorted by signer addresses in ascending order."
      },
      "withdraw(bytes,bytes[],address[],uint256[])": {
        "notice": "Withdraw funds from the bridge pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 33210,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15465,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "ssHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 15467,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "triggerTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15469,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "resetTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15471,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "noticePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 739,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 654,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "_paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 33324,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "pausers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 33083,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "governors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 33471,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "epochLength",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 33475,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "epochVolumes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33479,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "epochVolumeCaps",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 33483,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "lastOpTimestamps",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 32884,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "delayedTransfers",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_struct(delayedTransfer)32879_storage)"
      },
      {
        "astId": 32888,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "delayThresholds",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 32890,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "delayPeriod",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 15009,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "addseq",
        "offset": 0,
        "slot": "16",
        "type": "t_uint64"
      },
      {
        "astId": 15013,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "minAdd",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15017,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "withdraws",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 15019,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "nativeWrap",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 15022,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "nativeTokenTransferGas",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 14242,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "transfers",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 14246,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "minSend",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14250,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "maxSend",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14252,
        "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
        "label": "minimalMaxSlippage",
        "offset": 0,
        "slot": "24",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(delayedTransfer)32879_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DelayedTransfer.delayedTransfer)",
        "numberOfBytes": "32",
        "value": "t_struct(delayedTransfer)32879_storage"
      },
      "t_struct(delayedTransfer)32879_storage": {
        "encoding": "inplace",
        "label": "struct DelayedTransfer.delayedTransfer",
        "members": [
          {
            "astId": 32872,
            "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 32874,
            "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 32876,
            "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 32878,
            "contract": "contracts/liquidity-bridge/Bridge.sol:Bridge",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}