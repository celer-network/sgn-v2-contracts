{
  "address": "0x7A1Fca8F42cf135Fae9bDaDFeD1a233cCDC3Aeba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senderAdapters",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "srcChainId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "dstChainId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "nonce",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "bridgeName",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct MessageStruct.Message",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "ErrorSendMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "nonce",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "dstChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "senderAdapters",
          "type": "address[]"
        }
      ],
      "name": "MultiBridgeMsgSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "senderAdapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "SenderAdapterUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_senderAdapters",
          "type": "address[]"
        }
      ],
      "name": "addSenderAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_multiBridgeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "estimateTotalMessageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_multiBridgeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "remoteCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_senderAdapters",
          "type": "address[]"
        }
      ],
      "name": "removeSenderAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "senderAdapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x203781a51fd9db4bd5fa833e530711f7aa4f4535ba50e0caa2610a1e65b82145",
  "receipt": {
    "to": null,
    "from": "0xFf370251BDbe480b1164C383Df99B9EbD3FA12C3",
    "contractAddress": "0x7A1Fca8F42cf135Fae9bDaDFeD1a233cCDC3Aeba",
    "transactionIndex": 2,
    "gasUsed": "1010661",
    "logsBloom": "0x
    "blockHash": "0x3cbdbb66d9cbd5b6b48aec925787493aacec0e11f1cdc58d6e2992e7a9cc2262",
    "transactionHash": "0x203781a51fd9db4bd5fa833e530711f7aa4f4535ba50e0caa2610a1e65b82145",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 32101771,
        "transactionHash": "0x203781a51fd9db4bd5fa833e530711f7aa4f4535ba50e0caa2610a1e65b82145",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ff370251bdbe480b1164c383df99b9ebd3fa12c3",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000562c946d70b000000000000000000000000000000000000000000000000000299f8177bdda2a5000000000000000000000000000000000000000000000d9a19e550197b4543040000000000000000000000000000000000000000000000000294954e350697a5000000000000000000000000000000000000000000000d9a19eab2e2c21c4e04",
        "logIndex": 7,
        "blockHash": "0x3cbdbb66d9cbd5b6b48aec925787493aacec0e11f1cdc58d6e2992e7a9cc2262"
      }
    ],
    "blockNumber": 32101771,
    "cumulativeGasUsed": "1178342",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc3c4e615a692f1DA0757523a7a7DdEf96bA7E042"
  ],
  "numDeployments": 1,
  "solcInputHash": "f0ff772b27e18f703fe2c68e46ad4021",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senderAdapters\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"bridgeName\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct MessageStruct.Message\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ErrorSendMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"senderAdapters\",\"type\":\"address[]\"}],\"name\":\"MultiBridgeMsgSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"senderAdapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"SenderAdapterUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_senderAdapters\",\"type\":\"address[]\"}],\"name\":\"addSenderAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_multiBridgeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"estimateTotalMessageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_multiBridgeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"remoteCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_senderAdapters\",\"type\":\"address[]\"}],\"name\":\"removeSenderAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"senderAdapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"remoteCall(uint64,address,address,bytes)\":{\"params\":{\"_callData\":\"is the data to be sent to _target by low-level call(eg. address(_target).call(_callData)).\",\"_dstChainId\":\"is the destination chainId.\",\"_multiBridgeReceiver\":\"is the MultiBridgeReceiver address on destination chain.\",\"_target\":\"is the contract address on the destination chain.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSenderAdapters(address[])\":{\"notice\":\"Add bridge sender adapters\"},\"estimateTotalMessageFee(uint64,address,address,bytes)\":{\"notice\":\"A helper function for estimating total required message fee by all available message bridges.\"},\"remoteCall(uint64,address,address,bytes)\":{\"notice\":\"Call a remote function on a destination chain by sending multiple copies of a cross-chain message via all available bridges. A fee in native token may be required by each message bridge to send messages. Any native token fee remained will be refunded back to msg.sender, which requires caller being able to receive native token. Caller can use estimateTotalMessageFee() to get total message fees before calling this function.\"},\"removeSenderAdapters(address[])\":{\"notice\":\"Remove bridge sender adapters\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/message/apps/multibridge/MultiBridgeSender.sol\":\"MultiBridgeSender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/message/apps/multibridge/MessageStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nlibrary MessageStruct {\\r\\n    /**\\r\\n     * @dev Message indicates a remote call to target contract on destination chain.\\r\\n     *\\r\\n     * @param srcChainId is the id of chain where this message is sent from.\\r\\n     * @param dstChainId is the id of chain where this message is sent to.\\r\\n     * @param nonce is an incrementing number held by MultiBridgeSender to ensure msgId uniqueness\\r\\n     * @param target is the contract to be called on dst chain.\\r\\n     * @param callData is the data to be sent to target by low-level call(eg. address(target).call(callData)).\\r\\n     * @param bridgeName is the message bridge name used for sending this message.\\r\\n     */\\r\\n    struct Message {\\r\\n        uint64 srcChainId;\\r\\n        uint64 dstChainId;\\r\\n        uint32 nonce;\\r\\n        address target;\\r\\n        bytes callData;\\r\\n        string bridgeName;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6d9ea95bc7ab487a1a0bc845a9efcb9410c7ea9688a418fd2b7e2005141b696\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/MultiBridgeSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"./interfaces/IBridgeSenderAdapter.sol\\\";\\r\\nimport \\\"./interfaces/IMultiBridgeReceiver.sol\\\";\\r\\nimport \\\"./MessageStruct.sol\\\";\\r\\n\\r\\ncontract MultiBridgeSender {\\r\\n    // List of bridge sender adapters\\r\\n    address[] public senderAdapters;\\r\\n    // The dApp contract that can use this multi-bridge sender for cross-chain remoteCall.\\r\\n    // This means the current MultiBridgeSender is only intended to be used by a single dApp.\\r\\n    address public immutable caller;\\r\\n    uint32 public nonce;\\r\\n\\r\\n    event MultiBridgeMsgSent(uint32 nonce, uint64 dstChainId, address target, bytes callData, address[] senderAdapters);\\r\\n    event SenderAdapterUpdated(address senderAdapter, bool add); // add being false indicates removal of the adapter\\r\\n    event ErrorSendMessage(address senderAdapters, MessageStruct.Message message);\\r\\n\\r\\n    modifier onlyCaller() {\\r\\n        require(msg.sender == caller, \\\"not caller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _caller) {\\r\\n        caller = _caller;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Call a remote function on a destination chain by sending multiple copies of a cross-chain message\\r\\n     * via all available bridges.\\r\\n     *\\r\\n     * A fee in native token may be required by each message bridge to send messages. Any native token fee remained\\r\\n     * will be refunded back to msg.sender, which requires caller being able to receive native token.\\r\\n     * Caller can use estimateTotalMessageFee() to get total message fees before calling this function.\\r\\n     *\\r\\n     * @param _dstChainId is the destination chainId.\\r\\n     * @param _multiBridgeReceiver is the MultiBridgeReceiver address on destination chain.\\r\\n     * @param _target is the contract address on the destination chain.\\r\\n     * @param _callData is the data to be sent to _target by low-level call(eg. address(_target).call(_callData)).\\r\\n     */\\r\\n    function remoteCall(\\r\\n        uint64 _dstChainId,\\r\\n        address _multiBridgeReceiver,\\r\\n        address _target,\\r\\n        bytes calldata _callData\\r\\n    ) external payable onlyCaller {\\r\\n        MessageStruct.Message memory message = MessageStruct.Message(\\r\\n            uint64(block.chainid),\\r\\n            _dstChainId,\\r\\n            nonce,\\r\\n            _target,\\r\\n            _callData,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        bytes memory data;\\r\\n        uint256 totalFee;\\r\\n        // send copies of the message through multiple bridges\\r\\n        for (uint256 i = 0; i < senderAdapters.length; i++) {\\r\\n            message.bridgeName = IBridgeSenderAdapter(senderAdapters[i]).name();\\r\\n            data = abi.encodeWithSelector(IMultiBridgeReceiver.receiveMessage.selector, message);\\r\\n            uint256 fee = IBridgeSenderAdapter(senderAdapters[i]).getMessageFee(\\r\\n                uint256(_dstChainId),\\r\\n                _multiBridgeReceiver,\\r\\n                data\\r\\n            );\\r\\n            // if one bridge is paused it shouldn't halt the process\\r\\n            try\\r\\n                IBridgeSenderAdapter(senderAdapters[i]).dispatchMessage{value: fee}(\\r\\n                    uint256(_dstChainId),\\r\\n                    _multiBridgeReceiver,\\r\\n                    data\\r\\n                )\\r\\n            {\\r\\n                totalFee += fee;\\r\\n            } catch {\\r\\n                emit ErrorSendMessage(senderAdapters[i], message);\\r\\n            }\\r\\n        }\\r\\n        emit MultiBridgeMsgSent(nonce, _dstChainId, _target, _callData, senderAdapters);\\r\\n        nonce++;\\r\\n        // refund remaining native token to msg.sender\\r\\n        if (totalFee < msg.value) {\\r\\n            payable(msg.sender).transfer(msg.value - totalFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add bridge sender adapters\\r\\n     */\\r\\n    function addSenderAdapters(address[] calldata _senderAdapters) external onlyCaller {\\r\\n        for (uint256 i = 0; i < _senderAdapters.length; i++) {\\r\\n            _addSenderAdapter(_senderAdapters[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove bridge sender adapters\\r\\n     */\\r\\n    function removeSenderAdapters(address[] calldata _senderAdapters) external onlyCaller {\\r\\n        for (uint256 i = 0; i < _senderAdapters.length; i++) {\\r\\n            _removeSenderAdapter(_senderAdapters[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A helper function for estimating total required message fee by all available message bridges.\\r\\n     */\\r\\n    function estimateTotalMessageFee(\\r\\n        uint64 _dstChainId,\\r\\n        address _multiBridgeReceiver,\\r\\n        address _target,\\r\\n        bytes calldata _callData\\r\\n    ) public view returns (uint256) {\\r\\n        MessageStruct.Message memory message = MessageStruct.Message(\\r\\n            uint64(block.chainid),\\r\\n            _dstChainId,\\r\\n            nonce,\\r\\n            _target,\\r\\n            _callData,\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        bytes memory data;\\r\\n        uint256 totalFee;\\r\\n        for (uint256 i = 0; i < senderAdapters.length; i++) {\\r\\n            message.bridgeName = IBridgeSenderAdapter(senderAdapters[i]).name();\\r\\n            data = abi.encodeWithSelector(IMultiBridgeReceiver.receiveMessage.selector, message);\\r\\n            uint256 fee = IBridgeSenderAdapter(senderAdapters[i]).getMessageFee(\\r\\n                uint256(_dstChainId),\\r\\n                _multiBridgeReceiver,\\r\\n                data\\r\\n            );\\r\\n            totalFee += fee;\\r\\n        }\\r\\n        return totalFee;\\r\\n    }\\r\\n\\r\\n    function _addSenderAdapter(address _senderAdapter) private {\\r\\n        for (uint256 i = 0; i < senderAdapters.length; i++) {\\r\\n            if (senderAdapters[i] == _senderAdapter) {\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n        senderAdapters.push(_senderAdapter);\\r\\n        emit SenderAdapterUpdated(_senderAdapter, true);\\r\\n    }\\r\\n\\r\\n    function _removeSenderAdapter(address _senderAdapter) private {\\r\\n        uint256 lastIndex = senderAdapters.length - 1;\\r\\n        for (uint256 i = 0; i < senderAdapters.length; i++) {\\r\\n            if (senderAdapters[i] == _senderAdapter) {\\r\\n                if (i < lastIndex) {\\r\\n                    senderAdapters[i] = senderAdapters[lastIndex];\\r\\n                }\\r\\n                senderAdapters.pop();\\r\\n                emit SenderAdapterUpdated(_senderAdapter, false);\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb142a864c7decd8576734d2e971055ef0e1f0ca2551b98850d3ffc16fc33564e\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/EIP5164/MessageDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev The MessageDispatcher lives on the origin chain and dispatches messages to the MessageExecutor for execution.\\r\\n * More about MessageDispatcher of EIP5164, see https://eips.ethereum.org/EIPS/eip-5164#messagedispatcher.\\r\\n */\\r\\ninterface MessageDispatcher {\\r\\n    /**\\r\\n     * @dev The MessageDispatched event MUST be emitted by the MessageDispatcher when an individual message is dispatched.\\r\\n     */\\r\\n    event MessageDispatched(\\r\\n        bytes32 indexed messageId,\\r\\n        address indexed from,\\r\\n        uint256 indexed toChainId,\\r\\n        address to,\\r\\n        bytes data\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x251076e11f98a786d888588736ce1bf70eae2d8fcd9ab14208fe828d13c4d270\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/EIP5164/SingleMessageDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"./MessageDispatcher.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev The SingleMessageDispatcher is an extension of MessageDispatcher that defines a method, dispatchMessage,\\r\\n * for dispatching an individual message to be executed on the toChainId.\\r\\n * More about SingleMessageDispatcher of EIP5164, see https://eips.ethereum.org/EIPS/eip-5164#singlemessagedispatcher.\\r\\n */\\r\\ninterface SingleMessageDispatcher is MessageDispatcher {\\r\\n    /**\\r\\n     * @dev A method for dispatching an individual message to be executed on the toChainId.\\r\\n     */\\r\\n    function dispatchMessage(\\r\\n        uint256 toChainId,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (bytes32 messageId);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3ca3480d156095cff1fd4635bae37e3aa6bb380c244f8b91d4086bd25888613\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/IBridgeSenderAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"../MessageStruct.sol\\\";\\r\\nimport \\\"./EIP5164/SingleMessageDispatcher.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Adapter that connects MultiBridgeSender and each message bridge.\\r\\n * Message bridge can implement their favourite encode&decode way for MessageStruct.Message.\\r\\n */\\r\\ninterface IBridgeSenderAdapter is SingleMessageDispatcher {\\r\\n    /**\\r\\n     * @dev Return name of this message bridge.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Return native token amount in wei required by this message bridge for sending a message.\\r\\n     */\\r\\n    function getMessageFee(\\r\\n        uint256 toChainId,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    //    /**\\r\\n    //     * @dev Send a MessageStruct.Message through this message bridge.\\r\\n    //     */\\r\\n    //    function sendMessage(MessageStruct.Message memory _message) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Owner update receiver adapter address on dst chain.\\r\\n     */\\r\\n    function updateReceiverAdapter(uint256[] calldata _dstChainIds, address[] calldata _receiverAdapters) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Owner setup MultiBridgeSender.\\r\\n     */\\r\\n    function setMultiBridgeSender(address _multiBridgeSender) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbf8af9be8f2ef1bd2d303e1940dc82e5441337bf498ec3f7a4fc0c5f17062183\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/IMultiBridgeReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../MessageStruct.sol\\\";\\r\\n\\r\\ninterface IMultiBridgeReceiver {\\r\\n    /**\\r\\n     * @notice Receive messages from allowed bridge receiver adapters.\\r\\n     * If the accumulated power of a message has reached the power threshold,\\r\\n     * this message will be executed immediately, which will invoke an external function call\\r\\n     * according to the message content.\\r\\n     *\\r\\n     * @dev Every receiver adapter should call this function with decoded MessageStruct.Message\\r\\n     * when receiver adapter receives a message produced by a corresponding sender adapter on the source chain.\\r\\n     */\\r\\n    function receiveMessage(MessageStruct.Message calldata _message) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7f734828a6b013c06df48d85a83fae5b66a86d94fb59fb68c3af98c14d49cf17\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "remoteCall(uint64,address,address,bytes)": {
        "params": {
          "_callData": "is the data to be sent to _target by low-level call(eg. address(_target).call(_callData)).",
          "_dstChainId": "is the destination chainId.",
          "_multiBridgeReceiver": "is the MultiBridgeReceiver address on destination chain.",
          "_target": "is the contract address on the destination chain."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSenderAdapters(address[])": {
        "notice": "Add bridge sender adapters"
      },
      "estimateTotalMessageFee(uint64,address,address,bytes)": {
        "notice": "A helper function for estimating total required message fee by all available message bridges."
      },
      "remoteCall(uint64,address,address,bytes)": {
        "notice": "Call a remote function on a destination chain by sending multiple copies of a cross-chain message via all available bridges. A fee in native token may be required by each message bridge to send messages. Any native token fee remained will be refunded back to msg.sender, which requires caller being able to receive native token. Caller can use estimateTotalMessageFee() to get total message fees before calling this function."
      },
      "removeSenderAdapters(address[])": {
        "notice": "Remove bridge sender adapters"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19545,
        "contract": "contracts/message/apps/multibridge/MultiBridgeSender.sol:MultiBridgeSender",
        "label": "senderAdapters",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 19549,
        "contract": "contracts/message/apps/multibridge/MultiBridgeSender.sol:MultiBridgeSender",
        "label": "nonce",
        "offset": 0,
        "slot": "1",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}