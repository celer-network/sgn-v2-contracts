{
  "address": "0xe134059918851f5Ffcbf29ED71ea942D0A4f2995",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_routerGateway",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "MessageDispatched",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "dispatchMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getMessageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiBridgeSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "receiverAdapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "routerGateway",
      "outputs": [
        {
          "internalType": "contract IRouterGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_multiBridgeSender",
          "type": "address"
        }
      ],
      "name": "setMultiBridgeSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "toBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "b",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_dstChainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_receiverAdapters",
          "type": "address[]"
        }
      ],
      "name": "updateReceiverAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x521eb8c57375b47c2e38a560a100351222350f26ccc57e615435e5f88a9f8cc6",
  "receipt": {
    "to": null,
    "from": "0xFf370251BDbe480b1164C383Df99B9EbD3FA12C3",
    "contractAddress": "0xe134059918851f5Ffcbf29ED71ea942D0A4f2995",
    "transactionIndex": 6,
    "gasUsed": "992472",
    "logsBloom": "0x
    "blockHash": "0x6580f3595a89f517e21dcf0703bcb948b004fb498b646e3a7fe33e5c60ffb210",
    "transactionHash": "0x521eb8c57375b47c2e38a560a100351222350f26ccc57e615435e5f88a9f8cc6",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 32102176,
        "transactionHash": "0x521eb8c57375b47c2e38a560a100351222350f26ccc57e615435e5f88a9f8cc6",
        "address": "0xe134059918851f5Ffcbf29ED71ea942D0A4f2995",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ff370251bdbe480b1164c383df99b9ebd3fa12c3"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x6580f3595a89f517e21dcf0703bcb948b004fb498b646e3a7fe33e5c60ffb210"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 32102176,
        "transactionHash": "0x521eb8c57375b47c2e38a560a100351222350f26ccc57e615435e5f88a9f8cc6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ff370251bdbe480b1164c383df99b9ebd3fa12c3",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000006c5a034a86710000000000000000000000000000000000000000000000000028d8c0159d9c94a000000000000000000000000000000000000000000002d19c32ee6e102ae109e0000000000000000000000000000000000000000000000000286c6612531623a000000000000000000000000000000000000000000002d19c335ac81375677ae",
        "logIndex": 21,
        "blockHash": "0x6580f3595a89f517e21dcf0703bcb948b004fb498b646e3a7fe33e5c60ffb210"
      }
    ],
    "blockNumber": 32102176,
    "cumulativeGasUsed": "1362912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB139915AE11f6f0ACd05C8dB85E8ED1bE1c7c17d"
  ],
  "numDeployments": 1,
  "solcInputHash": "f0ff772b27e18f703fe2c68e46ad4021",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_routerGateway\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"MessageDispatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"dispatchMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getMessageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiBridgeSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receiverAdapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerGateway\",\"outputs\":[{\"internalType\":\"contract IRouterGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_multiBridgeSender\",\"type\":\"address\"}],\"name\":\"setMultiBridgeSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"toBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_dstChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_receiverAdapters\",\"type\":\"address[]\"}],\"name\":\"updateReceiverAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMultiBridgeSender(address)\":{\"details\":\"Owner setup MultiBridgeSender.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateReceiverAdapter(uint256[],address[])\":{\"details\":\"Owner update receiver adapter address on dst chain.\"}},\"stateVariables\":{\"name\":{\"details\":\"Return name of this message bridge.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/message/apps/multibridge/adapters/router/RouterSenderAdapter.sol\":\"RouterSenderAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/message/apps/multibridge/MessageStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nlibrary MessageStruct {\\r\\n    /**\\r\\n     * @dev Message indicates a remote call to target contract on destination chain.\\r\\n     *\\r\\n     * @param srcChainId is the id of chain where this message is sent from.\\r\\n     * @param dstChainId is the id of chain where this message is sent to.\\r\\n     * @param nonce is an incrementing number held by MultiBridgeSender to ensure msgId uniqueness\\r\\n     * @param target is the contract to be called on dst chain.\\r\\n     * @param callData is the data to be sent to target by low-level call(eg. address(target).call(callData)).\\r\\n     * @param bridgeName is the message bridge name used for sending this message.\\r\\n     */\\r\\n    struct Message {\\r\\n        uint64 srcChainId;\\r\\n        uint64 dstChainId;\\r\\n        uint32 nonce;\\r\\n        address target;\\r\\n        bytes callData;\\r\\n        string bridgeName;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6d9ea95bc7ab487a1a0bc845a9efcb9410c7ea9688a418fd2b7e2005141b696\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/adapters/router/RouterSenderAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../../interfaces/IBridgeSenderAdapter.sol\\\";\\r\\nimport \\\"./interfaces/IRouterGateway.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract RouterSenderAdapter is IBridgeSenderAdapter, Ownable {\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    string public constant name = \\\"router\\\";\\r\\n    address public multiBridgeSender;\\r\\n    IRouterGateway public immutable routerGateway;\\r\\n    // dstChainId => receiverAdapter address\\r\\n    uint32 public nonce;\\r\\n\\r\\n    mapping(uint256 => address) public receiverAdapters;\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyMultiBridgeSender() {\\r\\n        require(msg.sender == multiBridgeSender, \\\"not multi-bridge msg sender\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== CONSTRUCTOR  ========== */\\r\\n\\r\\n    constructor(address _routerGateway) {\\r\\n        routerGateway = IRouterGateway(_routerGateway);\\r\\n    }\\r\\n\\r\\n    /* ========== EXTERNAL METHODS ========== */\\r\\n\\r\\n    function getMessageFee(\\r\\n        uint256,\\r\\n        address,\\r\\n        bytes calldata\\r\\n    ) external view returns (uint256) {\\r\\n        return routerGateway.requestToDestDefaultFee();\\r\\n    }\\r\\n\\r\\n    function dispatchMessage(\\r\\n        uint256 _toChainId,\\r\\n        address _to,\\r\\n        bytes calldata _data\\r\\n    ) external payable override onlyMultiBridgeSender returns (bytes32) {\\r\\n        require(receiverAdapters[_toChainId] != address(0), \\\"no receiver adapter\\\");\\r\\n        bytes32 msgId = bytes32(uint256(nonce));\\r\\n\\r\\n        Utils.RequestArgs memory requestArgs = Utils.RequestArgs(type(uint64).max, false, Utils.FeePayer.APP);\\r\\n\\r\\n        Utils.DestinationChainParams memory destChainParams = Utils.DestinationChainParams(\\r\\n            350000,\\r\\n            0,\\r\\n            0,\\r\\n            Strings.toString(uint256(_toChainId))\\r\\n        );\\r\\n\\r\\n        bytes[] memory payloads = new bytes[](1);\\r\\n        payloads[0] = abi.encode(msg.sender, _to, _data, msgId);\\r\\n\\r\\n        bytes[] memory destContractAddresses = new bytes[](1);\\r\\n        destContractAddresses[0] = toBytes(receiverAdapters[_toChainId]);\\r\\n\\r\\n        routerGateway.requestToDest{value: msg.value}(\\r\\n            requestArgs,\\r\\n            Utils.AckType.NO_ACK,\\r\\n            Utils.AckGasParams(0, 0),\\r\\n            destChainParams,\\r\\n            Utils.ContractCalls(payloads, destContractAddresses)\\r\\n        );\\r\\n\\r\\n        nonce++;\\r\\n        return msgId;\\r\\n    }\\r\\n\\r\\n    /* ========== ADMIN METHODS ========== */\\r\\n\\r\\n    function updateReceiverAdapter(uint256[] calldata _dstChainIds, address[] calldata _receiverAdapters)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(_dstChainIds.length == _receiverAdapters.length, \\\"mismatch length\\\");\\r\\n        for (uint256 i = 0; i < _dstChainIds.length; i++) {\\r\\n            receiverAdapters[_dstChainIds[i]] = _receiverAdapters[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setMultiBridgeSender(address _multiBridgeSender) external override onlyOwner {\\r\\n        multiBridgeSender = _multiBridgeSender;\\r\\n    }\\r\\n\\r\\n    /* ========== UTILS METHODS ========== */\\r\\n\\r\\n    function toBytes(address a) public pure returns (bytes memory b) {\\r\\n        assembly {\\r\\n            let m := mload(0x40)\\r\\n            a := and(a, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, a))\\r\\n            mstore(0x40, add(m, 52))\\r\\n            b := m\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38ff376c5f1bee0e085023a7f1bcbba7b35892998b9e25c32dacb266e3092158\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/adapters/router/interfaces/IRouterGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nlibrary Utils {\\r\\n    struct RequestArgs {\\r\\n        uint64 expTimestamp;\\r\\n        bool isAtomicCalls;\\r\\n        Utils.FeePayer feePayerEnum;\\r\\n    }\\r\\n\\r\\n    enum FeePayer {\\r\\n        APP,\\r\\n        USER,\\r\\n        NONE\\r\\n    }\\r\\n\\r\\n    struct AckGasParams {\\r\\n        uint64 gasLimit;\\r\\n        uint64 gasPrice;\\r\\n    }\\r\\n\\r\\n    struct DestinationChainParams {\\r\\n        uint64 gasLimit;\\r\\n        uint64 gasPrice;\\r\\n        uint64 destChainType;\\r\\n        string destChainId;\\r\\n    }\\r\\n\\r\\n    struct ContractCalls {\\r\\n        bytes[] payloads;\\r\\n        bytes[] destContractAddresses;\\r\\n    }\\r\\n\\r\\n    enum AckType {\\r\\n        NO_ACK,\\r\\n        ACK_ON_SUCCESS,\\r\\n        ACK_ON_ERROR,\\r\\n        ACK_ON_BOTH\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IRouterGateway {\\r\\n    /// @notice Function to send a message to the destination chain\\r\\n    /// @param requestArgs the struct request args containing expiry timestamp, isAtomicCalls and the fee payer.\\r\\n    /// @param ackType type of acknowledgement you want: ACK_ON_SUCCESS, ACK_ON_ERR, ACK_ON_BOTH.\\r\\n    /// @param ackGasParams This includes the gas limit required for the execution of handler function for\\r\\n    /// crosstalk acknowledgement on the source chain and the gas price of the source chain.\\r\\n    /// @param destChainParams dest chain params include the destChainType, destChainId, the gas limit\\r\\n    /// required to execute handler function on the destination chain and the gas price of destination chain.\\r\\n    /// @param contractCalls Array of struct ContractCalls containing the multiple payloads to be sent to multiple\\r\\n    /// contract addresses (in bytes format) on the destination chain.\\r\\n    /// @return Returns the nonce from the gateway contract.\\r\\n    function requestToDest(\\r\\n        Utils.RequestArgs memory requestArgs,\\r\\n        Utils.AckType ackType,\\r\\n        Utils.AckGasParams memory ackGasParams,\\r\\n        Utils.DestinationChainParams memory destChainParams,\\r\\n        Utils.ContractCalls memory contractCalls\\r\\n    ) external payable returns (uint64);\\r\\n\\r\\n    /// @notice Function to fetch the fees for cross-chain message transfer.\\r\\n    /// @return fees\\r\\n    function requestToDestDefaultFee() external view returns (uint256 fees);\\r\\n}\\r\\n\",\"keccak256\":\"0x1b165f13cde5bc1a0467748fb2046337de85b0b0fd90d0ba64ea53aebad66c0c\",\"license\":\"MIT\"},\"contracts/message/apps/multibridge/interfaces/EIP5164/MessageDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev The MessageDispatcher lives on the origin chain and dispatches messages to the MessageExecutor for execution.\\r\\n * More about MessageDispatcher of EIP5164, see https://eips.ethereum.org/EIPS/eip-5164#messagedispatcher.\\r\\n */\\r\\ninterface MessageDispatcher {\\r\\n    /**\\r\\n     * @dev The MessageDispatched event MUST be emitted by the MessageDispatcher when an individual message is dispatched.\\r\\n     */\\r\\n    event MessageDispatched(\\r\\n        bytes32 indexed messageId,\\r\\n        address indexed from,\\r\\n        uint256 indexed toChainId,\\r\\n        address to,\\r\\n        bytes data\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x251076e11f98a786d888588736ce1bf70eae2d8fcd9ab14208fe828d13c4d270\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/EIP5164/SingleMessageDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"./MessageDispatcher.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev The SingleMessageDispatcher is an extension of MessageDispatcher that defines a method, dispatchMessage,\\r\\n * for dispatching an individual message to be executed on the toChainId.\\r\\n * More about SingleMessageDispatcher of EIP5164, see https://eips.ethereum.org/EIPS/eip-5164#singlemessagedispatcher.\\r\\n */\\r\\ninterface SingleMessageDispatcher is MessageDispatcher {\\r\\n    /**\\r\\n     * @dev A method for dispatching an individual message to be executed on the toChainId.\\r\\n     */\\r\\n    function dispatchMessage(\\r\\n        uint256 toChainId,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external payable returns (bytes32 messageId);\\r\\n}\\r\\n\",\"keccak256\":\"0xa3ca3480d156095cff1fd4635bae37e3aa6bb380c244f8b91d4086bd25888613\",\"license\":\"GPL-3.0-only\"},\"contracts/message/apps/multibridge/interfaces/IBridgeSenderAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\n\\r\\npragma solidity >=0.8.9;\\r\\n\\r\\nimport \\\"../MessageStruct.sol\\\";\\r\\nimport \\\"./EIP5164/SingleMessageDispatcher.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Adapter that connects MultiBridgeSender and each message bridge.\\r\\n * Message bridge can implement their favourite encode&decode way for MessageStruct.Message.\\r\\n */\\r\\ninterface IBridgeSenderAdapter is SingleMessageDispatcher {\\r\\n    /**\\r\\n     * @dev Return name of this message bridge.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Return native token amount in wei required by this message bridge for sending a message.\\r\\n     */\\r\\n    function getMessageFee(\\r\\n        uint256 toChainId,\\r\\n        address to,\\r\\n        bytes calldata data\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    //    /**\\r\\n    //     * @dev Send a MessageStruct.Message through this message bridge.\\r\\n    //     */\\r\\n    //    function sendMessage(MessageStruct.Message memory _message) external payable;\\r\\n\\r\\n    /**\\r\\n     * @dev Owner update receiver adapter address on dst chain.\\r\\n     */\\r\\n    function updateReceiverAdapter(uint256[] calldata _dstChainIds, address[] calldata _receiverAdapters) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Owner setup MultiBridgeSender.\\r\\n     */\\r\\n    function setMultiBridgeSender(address _multiBridgeSender) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xbf8af9be8f2ef1bd2d303e1940dc82e5441337bf498ec3f7a4fc0c5f17062183\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMultiBridgeSender(address)": {
        "details": "Owner setup MultiBridgeSender."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateReceiverAdapter(uint256[],address[])": {
        "details": "Owner update receiver adapter address on dst chain."
      }
    },
    "stateVariables": {
      "name": {
        "details": "Return name of this message bridge."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/message/apps/multibridge/adapters/router/RouterSenderAdapter.sol:RouterSenderAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21642,
        "contract": "contracts/message/apps/multibridge/adapters/router/RouterSenderAdapter.sol:RouterSenderAdapter",
        "label": "multiBridgeSender",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 21647,
        "contract": "contracts/message/apps/multibridge/adapters/router/RouterSenderAdapter.sol:RouterSenderAdapter",
        "label": "nonce",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 21651,
        "contract": "contracts/message/apps/multibridge/adapters/router/RouterSenderAdapter.sol:RouterSenderAdapter",
        "label": "receiverAdapters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}